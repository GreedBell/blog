{"./":{"url":"./","title":"Introduction","keywords":"","body":"Bell's Blog Apple Mac Pro 换 SSD 监听 iOS App 新评论 转移 App App Previews 发布文章到 AppStore 的 Today 板块 审核加急 Developer ID Application 创建苹果开发者账号 iOS 图片资源的各种尺寸 审核 代码签名 WWDC 2019 Xcode Code Snippets Library plugin xcconfig Instruments Groups VS Folder References Asset Catalog PlistBuddy 操作 Plist 文件 project.pbxproj Xcode10 解决 pbxproj 合并冲突 import xcodeproj Xcode 警告信息 Other Xcode8 兼容iOS7以及低版本系统 利用 agvtool 更新 Version 和 build 清理磁盘 xcode-install appBetter UI测试 测试平台 测试框架 Weex node.js mocha.js 使用 nginx 优化 node.js npm5 Mongoose artTemplate Koa2 child_process 模块中 spawn 和 exec 的区别 bluebird 为什么选 node.js 私有 npm express 基于 node.js 的 github 前端 Nodejs日志管理log4js passport.js nodemon Jest NodeJS服务崩溃的解决办法 Q&A npm pm2 nvm Go chat 第三方实时聊天实现 node.js socket.io 实时聊天的实现 云主机与云存储 hosthatch node.js 虚拟主机 hostus 搬瓦工 openshift 搭建 node.js 服务 util SVN 客户端使用 支付 markdown 搜索 创建客户端测试接口 phabricator Visual Studio Code Let's Encrypt 加密解密 appium Atom weixin scheme asciiflow ssl fabric PlantUML SVN IETF Graphviz OpenSSL 其它工具 免费 ssl Smarty Lottie mermaid arcanist Gnuplot react-native 原生模块高级篇 原生模块基础篇 修改状态栏 调试 React Native Network 实现过程 使用源码编译 RN JS Bridge 过程 react native 使用 appium Image 分析 使用 # Android 下拉刷新 RN Compoent 转 Native key command 面试 原生与 JS 交互 触摸事件和手势 升级 react native 到 0.60 原生模块分析 组件 升级 react native 到 0.47 遇到的问题 Yoga 布局 Native 调用 RN 组件 问题 字体 界面布局 Python pip 技术 前后端分离 C 编译器的工作过程 面向对象编程 cookie 自动生成 SUMMARY.md 视频技术 JSON 跨域 上传文件 Ajax API 文档 编程思想 混合 App 增量更新方案 CORS 设计模式 算法 web proxy 符点精度问题 运维 Centos 自启动 Docker For Mac 查看主机信息 网络相关命令 centos启用ftp功能 用户和群组管理 动态DNS SSH Dockerfile 使用 iptables JMX Exporter Kubernetes centos docker 方式安装 gitlab kibana Gitlab CLI curl 后台任务 批量删除 Mac 批量修改字符串 rsync # 端口相关命令 Logrotate 管理日志 docker tar 为普通用户添加 sudo 权限 Shell stat 查看文件信息 shell命令行传入参数处理 shell 中字符串处理 exit mail命令使用 杂七杂八 运算符的使用方法 vi ci Jenkins travis-ci自动更新gh-pages分支 Jenkins 高级使用 Jenkins Q&A travis centos 安装 gitlab ci Drone 大前端 Android 原生与 JS 互相调用 iOS 原生与 JS 互相调用 Vue.js vue-router vue-devtools vue-loader vue 环境搭建 element-ui vuex Other QQ 协议 Company 广告联盟 Java JUnit Java Servlet 高并发 集合 Chaining Optionals zip CheckStyle Lombok JVM Profiler Disruptor spotbugs 高精度计算 Queue HttpClient 运行 Format PMD Java 协程（coroutine） 反射 Quasar FindBugs VisualVM 断言与异常 kotlin PHP Xdebug Illuminate Database laravel api 认证过程分析 docker php WorkerMan laravel web 认证过程分析 工具 resources Linux + nginx + PHP 环境 mac 安装 PHP7.1 PhpStorm 异步 laravel 使用 PHP Mongo laravel phpdoc 高精度计算 面试 PHP 使用 Mail Mac 下配置 PHP 环境 适合写 Restfull API 的框架 pecl php 使用 redis Linux + nginx + PHP7 环境 Slim phinx Yii Composer Atom 开发 PHP iOS swift 远程推送 iOS上实现毛玻璃效果 循环引用 iOS JS Bridge iOS 文件夹路径 Cupertino WKWebView 的使用 xcrun fastlane iPAd 分屏 iOS键盘 iOS WebSocket 后台下载 Action Extension Popover 下拉刷新 UIKeyCommand 音频 HEIF/HEVC 崩溃 iOS 注释 Document Provider 3D Touch Touch ID 和 Face ID Masonry权值 ., 面试 js 与 oc 间调用 libextobjc 自定义显示选中文字的编辑菜单项 Apple Pay 让界面更流畅 File Provider Swift Objective-C 静态代码分析工具 iOS框架设计 扫码 外接键盘 Universal Links oclint Other iOS开发过程中遇到的问题 自动打包并发布应用 Cocoapods iOS 手势 App 内 AppStore 评分 语音识别 xcode-select iPhoneX 适配 iOS 导入导出文档 WKWebView 的问题 布局方式 UISplitViewController pod lib create 实现过程 CI服务器与自动化部署 Handoff Selector Sharing Extension 实用工具 iOS 单元测试 mac 开机自启动 Mac OSX的开机启动配置 macports Brew Mac 删除临时文件 快捷键 崩溃 命令 Spotlight Other apache ue Adobe bridge Sketch Axure 库 Photoshop 加变量 photoshop 图标资源 Axure SVN 协作 zeplin Axure 工具选择 微信小程序 Wex5 UI2 Android 存储 调试 Gradle 使用 内存溢出 触摸事件处理 Sonatype Nexus Repository Manager Android 文件路径 Gradle 编码规范 AndroidManifest.xml View Android studio 使用 JavaDoc Fresco adb 命令 图片相关 Android Lint 清理磁盘 - Android 下拉刷新 ActionMode 热更新 JCenter App Links 给apk签名 Android library maven 全面屏 发包 发布 Android 库 Emulator 在运行时请求权限 面试 Deep Links Intent gradle 升级到 5 Service KeyEvent 按键事件 控制流程 杂七杂八 Questions Activity 设备尺寸 本地通知 AndroidX 布局 Adapter 混淆（Proguard） Mac 搭建 Android 开发环境 Android Studio 360 加固保 状态栏透明 实用工具 Gif JavaScript Q&A jsdoc ES6 高精度计算 点点滴滴 Web 内核 前端开发 存储 favicon.ico gulp 结合 webpack jQuery scss web 调试 CSS Web 调起 App Babel CommonJS 错误捕获 EditorConfig chrome 调试 CSS Modules Gulp fis 单页应用 (SPA) angular.js PhoneGap 面试 Chrome Apps Bootstrap Fetch 网页游戏 Cordova 分析 other Web缓存 Cordova css 使用 requireJS WebStorm ESLint webpack html 屏幕自适应 PostCSS react.js React 使用 redux react-redux react router create-react-app react-router-redux ant-design 文件格式转换 CSV Markdown Microsoft Office XLS 文件 Aspose POI PDF Office Open XML JSON 转 XML Objective C CLOC 宏 ARC ClangFormat 高精度计算 runtime Ruby Gemfile gem bundle 管理 gem 包 gets 获取输入 Other Git checkout git diff 的使用 git stash 子模块 git tag 管理 GitHub clone 本地代码 Git合并其它仓库的代码 提交记录 rebase git merge GitBook git branch 代码回滚 git flow Questions 更新 .gitignore git-commit ssh 方式架设 git 服务 翻墙 CentOS 下安装 denote CentOS 下安装 ss5 shadowsocks 使用 autossh 建立反向 SSH 隧道管理内网 Mac 主机 Centos 安装 srelay ssh方式实现ss5代理 外网访问内网 后端开发 ubuntu 安装 mysql Mac 安装 redis Java 后端技术栈 CentOS 安装 redis 运维 Java 服务 redis mysql 使用 nginx Gretty mongodb 使用 mysql json web token RESTful API 面试 Centos 上安装和使用 nginx Mac 安装 Mysql postgresql gRPC java Tomca For Mac Tomcat URL 与 URI 的区别 redis-questions ubuntu 上安装和使用 nginx phpMyAdmin mac 安装 nginx mongodb "},"apple/":{"url":"apple/","title":"Apple","keywords":"","body":"Apple Guides and Sample Code 10.3 更新 iOS 10.3 Release Notes What's New in iOS SKStoreReviewController 评价 App https://opensource.apple.com 苹果开源的项目 模拟器上安装 iPa xcrun simctl install booted shimo.app App Store 下载的包是 ARM 平台的包，不支持 X86 或者 i386, 所以安装了也打不开。 iPhone CPU 架构 iOS Support Matrix "},"apple/mac-pro-change-ssd.html":{"url":"apple/mac-pro-change-ssd.html","title":"Mac Pro 换 SSD","keywords":"","body":"Mac Pro 换 SSD 查看 SSD 型号 Apple > 关于本机 > 系统报告 > 硬件 > SATA/SATA Express SSD的接口是苹果专门定制的PCIE的接口，不是普通的接口,需要买定制的 SSD，或者加转接口。 推荐 创见(Transcend)820苹果升级专用PCI-e 3D-TLC SSD 960G（无外接盒） OWC Solid State Drives References 2015款的macbook pro能换固态硬盘么？ "},"apple/rss-app-reviews.html":{"url":"apple/rss-app-reviews.html","title":"监听 iOS App 新评论","keywords":"","body":"监听 iOS App 新评论 Are there RSS feeds for iOS apps' reviews on the app store? RSS Feed For Apple App Reviews 获取评论 https://itunes.apple.com/us/rss/customerreviews/id=1013727678/json https://itunes.apple.com/us/rss/customerreviews/page=1/id=1013727678/sortby=mostrecent/xml?urlDesc=/customerreviews/id=1013727678/json https://itunes.apple.com/us/rss/customerreviews/page=1/id=1013727678/limit=10/xml https://itunes.apple.com/cn/rss/customerreviews/page=1/id=1013727678/limit=10/sortby=mostrecent/xml https://itunes.apple.com/cn/rss/customerreviews/id=1013727678/page=1/sortby=mostrecent/xml itunes RSS feed Generator feed entry[] 评论列表 author name label 评论用户名 title label 评论标题 content label 评论内容 实现 用 ifttt 的 New App Store Review 只能发给账号绑定的邮箱 RSS feed to email 能发多个邮箱，不过只能用自己的 gmail 邮箱发 "},"apple/transfer-app.html":{"url":"apple/transfer-app.html","title":"转移 App","keywords":"","body":"转移 App 请确保 App 仅使用可以转让的技术和内容。 任何版本的 App 都不能使用 iCloud 权利。 任何版本的 App 都不能使用 Passbook 权利。 App 不能提供（或之前提供过）App 内购买项目订阅：自动续订、免费或非续订。 只要有一条不满足就不能转移，而且联系苹果客服也没用 下架再上架 将 App 下架 app下架有两种方式： 一是直接下架， 二是间接的把销售地区改为空，也能达到下架的目的。 需要注意的是： 即使app下架了，这个app的名称也是不能再被使用的。如果一旦下架，就永久不能再使用了，慎重！！！！但是，可以通过提交新的版本更改应用的名称以及app icon。 即使app下架了，bundle id 也会一直占用 上架以后，app 的 bundle id 是不能进行更换的。 References App转让的问题 第一个 iOS App上架的总结 转让和删除 App "},"apple/app-previews.html":{"url":"apple/app-previews.html","title":"App Previews","keywords":"","body":"App Previews Creating App Previews with Final Cut Pro X Final Cut Pro X 帮助 Show More with App Previews Creating Videos for App Previews App 预览属性 格式要求 查看视频信息 Quick time 打开，command + i 查看视频信息 录制 iOS Apps Connect your iOS device to your Mac with a Lightning cable Open QuickTime Player Choose File > New Movie Recording Click on the down arrow next to the Record button Select your device under Camera and Microphone Record 编辑 用 QuickTime or iMovie or Final Cut Pro X, "},"apple/send-story-to-appstore-today.html":{"url":"apple/send-story-to-appstore-today.html","title":"发布文章到 AppStore 的 Today 板块","keywords":"","body":"发布文章到 AppStore 的 Today 板块 进入 探索全新的 App Store > 拖到最下面 “分享您的故事” > 联系我们 或者直接进入 Contact the App Store Team "},"apple/expedite-review.html":{"url":"apple/expedite-review.html","title":"审核加急","keywords":"","body":"审核加急 方法一 itunesconnect > 联系我们 > Please choose from the following topics: App Review > Please choose from the following topics: App Store Review > Please choose from the following topics: Request Expedited Review > Click Request an Expedited App Review 方法二 直接打开 https://developer.apple.com/contact/app-store/?topic=expedite "},"apple/developer-id-application.html":{"url":"apple/developer-id-application.html","title":"Developer ID Application","keywords":"","body":"Developer ID Application 证书制作 参考 Developer ID Application证书制作 证书下载 打开 苹果开发者网站 点击 Type 为 Developer ID Application 的 Certificate Download "},"apple/create-developer-account.html":{"url":"apple/create-developer-account.html","title":"创建苹果开发者账号","keywords":"","body":"创建苹果开发者账号 创建苹果开发者账号 创建 Apple ID 注册苹果开发者账号 注册企业版苹果开发者账号 申请 D-U-N-S 方法一 方法二 创建 Apple ID https://appleid.apple.com 注册苹果开发者账号 Enroll 注册企业版苹果开发者账号 Enterprise Enroll ( 中文 ) 申请 D-U-N-S D-U-N-S ( 中文 ) 方法一 D-U-N-S Number look up tool 查看是否已经有 DUNS，没有就申请 方法二 直接发邮件到 appdeveloper@dnb.com 申请 Your D-U-N-S Number request/update submitted on 9/3/2017 with ID Number 102122-471422 has been reviewed. We were not able to provide a D-U-N-S Number for this request.Resolution Description: Unable to VerifyTo resolve this issue, either resubmit your request with the additional information or contact D&B directly to assist in the verification of your business. Email: appdeveloper@dnb.comThe following information was submitted as part of your request:Business Name: wu bing City: wuhan Country: CHINA PEOPLES REPThank you for using D&B's Mini Investigation Service. "},"apple/size.html":{"url":"apple/size.html","title":"iOS 图片资源的各种尺寸","keywords":"","body":"iOS 图片资源的各种尺寸 横竖屏高宽比的计算是建立在 iPad 支持横竖屏切换，iPhone 不支持横竖屏切换的基础上。 分辨率 机型 比例 对角线(英寸) 分辨率(pixels) 竖屏比例 横屏比例 iPhone 1x 320 x 480 1.5 iPhone 4/4s 2x 3.5 640 x 960 1.5 iPhone 5/5s 2x 4 640 x 1136 1.775 iPhone 6/6s/7/8 2x 4.7 750 x 1334 1.778 iPhone 6+/6s+/7+/8+ 3x 5.5 1242 x 2208 1.777 iPhone X 3x 5.8 1125 × 2436 2.165 (MAX) iPhone XS 3x 5.8 1125 × 2436 2.165 (MAX) iPhone XS Max 3x 6.5 1242 x 2688 2.164 iPhone XR 2x 6.1 828 x 1792 2.164 iPad 1x 7.9 768 x 1024 1.333 0.750 iPad mini 4 2x 7.9 1536 × 2048 1.333 0.750 9.7\" iPad 2x 9.7 1536 x 2048 1.333 0.750 10.5\" iPad pro 3x 10.5 1668 x 2224 1.334 0.7496 (MIN) 12.9\" iPad pro 3x 12.9 2048 x 2732 1.334 0.7496 (MIN) App 内用图 Logo 一倍大小 比例 size(pixels) 机型 备注 20 1x 20 x 20 20 2x 40 x 40 == 40 20 3x 60 x 60 29 1x 29 x 29 29 2x 58 x 58 29 3x 87 x 87 40 1x 40 x 40 == 40 40 2x 80 x 80 40 3x 120 x 120 == 120 60 2x 120 x 120 == 120 60 3x 180 x 180 76 1x 76 x 76 iPad App 76 2x 152 x 152 iPad App 83.5 2x 167 x 167 iPad Pro App 启动图 平台 比例 size(pixels) 备注 iPhone 2x 640 × 960 iPhone retina4 640 × 1136 iPad 1x 768 × 1024 iPad 2x 1536 × 2048 默认启动广告图 客户端等比缩放后，取中间部分 平台 比例 size(pixels) 备注 自适应 1x 667/0.75 × 667 890 × 667 自适应 2x 1334/0.75 × 1334 1780 × 1334 自适应 3x 2001/0.75 × 2001 2670x2001 后台配置启动广告图 取最大的图，客户端等比缩放后，取中间部分 平台 比例 size(pixels) 备注 自适应 3x 2001/0.75 × 2001 2670x2001 引导图 客户端等比缩放后，取中间部分,其中 0.75 是 iOS 所有设备中最小高宽比。 平台 比例 size(pixels) 备注 自适应 1x 667/0.75 × 667 890 × 667 自适应 2x 1334/0.75 × 1334 1780 × 1334 自适应 3x 2001/0.75 × 2001 2670 x 2001 iTunes Connect 用图 Logo 此图标将用于 App Store，其格式必须为 JPG 或 PNG，最低分辨率至少为 72 DPI，并采用 RGB 色彩空间。它不能包含图层或圆角。 取 1024 x 1024 截屏 iTunes Connect Properties 机型 屏幕 分辨率(pixels) iPhone4 3.5-Inch Retina 640 x 960 iPhone5 4-Inch Retina 640 x 1136 iPhone6 4.7-Inch Retina 750 x 1334 iPhone6+ 5.5-Inch Retina 1242 x 2208 iPad 9.7-Inch Retina 1536 x 2048 iPad pro 12.9-Inch Retina 2048 x 2732 注意 自适应的图片只有中间部分是有效部分，左边和右边部分可能不显示。在所有设备中中间宽度显示的最小宽度为 2001/2.165 = 924.249。其中 2.165 是 iOS 所有设备中最大高宽比。 "},"apple/review.html":{"url":"apple/review.html","title":"审核","keywords":"","body":"审核 PLA 1.2 AppStore PLA 1.2的解决方案 被拒描述 PLA 1.2 PLA 1.2 协议被拒，近期金融产品避不开的版权审核难题！ 金融类 App 必须用公司账户发布，如果是个人账户发布的，可以让账户管理员联系苹果客服申请升级到公司账户。 "},"apple/codesign.html":{"url":"apple/codesign.html","title":"代码签名","keywords":"","body":"代码签名 codesign： 代码签名 Signing Identity： 证书名 provisioning profiles： 描述文件 codesign 使用 Signing Identity 对应的证书来签名 code sign -s 重新签名ipa 从描述文件导出 entitlements.plist security cms -D -i > entitlements_full.plist /usr/libexec/PlistBuddy -x -c 'Print:Entitlements' entitlements_full.plist > entitlements.plist 生成的 plist 文件内容不能修改，因为 App 安装的时候会检验 entitlements 是否和描述文件一致，不一致就会安装失败 查看可以签名的证书 security find-identity -v -p codesigning 使用 fastlane 重新签名 单目标 fastlane sigh resign shimo.ipa -e entitlements.plist -i \"iPhone Distribution: Company (UFAYDHAUP)\" -p 多标题 苹果开发者网站从新建立了三个AppID，然后将三个AppID装在一个group中，然后生成hoc Provisioning Profiles fastlane sigh resign Quip.ipa -i \"iPhone Developer: XXXXXX\" -p com.quip.Quip=\"Development_Test_Quip.mobileprovision\" -p com.quip.Quip.DocumentProvider=\".mobileprovision\" -p com.quip.Quip.DocumentProviderFileProvider=\".mobileprovision\" --use_app_entitlements 使用 codesign 重新签名 References 重新签名ipa 使用 Xcode 调试第三方应用 https://stackoverflow.com/a/36890405 代码签名探析 Xcode 9's Manual Provisioning Changes ipa多目标重签名流程 "},"apple/wwdc-2019.html":{"url":"apple/wwdc-2019.html","title":"WWDC 2019","keywords":"","body":"WWDC 2019 iPad OS Project Catalyst Marzipan 技术， iOS/iPad App 迁移到 macOS SwiftUI 官方文档 View 布局 所有基础组件重写 "},"xcode/":{"url":"xcode/","title":"Xcode","keywords":"","body":"Xcode Debug View Hierarchy 显示app视图结构 Profile 编译 > 运行 > Instruments Analyze 静态代码分析 Analyze 主要分析以下四种问题 逻辑错误：访问空指针或未初始化的变量等； 内存管理错误：如内存泄漏等； 比如ARC下,内存管理不包括core foundation 声明错误：从未使用过的变量； Api调用错误：未包含使用的库和框架。 Clang Static Analyzer 命令行方式\b静态代码分析 Clang Static Analyzer Running the analyzer within Xcode 安装 从 https://clang-analyzer.llvm.org/release_notes.html 下载安装对应版本 工具 scan-build 静态代码分析工具 Xcode Analyze 工具 使用方法 Example: scan-build xcodebuild -configuration Debug -sdk iphonesimulator12.1 scan-view 查看 scan-build 生成的日志文件 Example: scan-view /var/folders/j5/rp29_qg91ll9dg817j_9l1qw0000gn/T/scan-build-2018-12-17-153756-7659-1 编译出错常用处理方法 are not found Edit Scheme > Build > 取消勾选 Parallelize Build 'Masonry.h' file not found CocoaPods 相关的头文件找不到。 解决方法一： Target 切换到 Generic iOS Device > Build > 再切回原 target 统计 ： 解决方法二： ONLY_ACTIVE_ARCH 设为 NO，再编译 Questions Quick Help 不显示注释 删掉 ~/Library/Caches/com.apple.dt.Xcode, 再重启 Xcode Problems with glog (config.h missing) and gflags/gflags.h on Xcode 10 cd ./node_modules/react-native/third-party/glog-0.3.4 && ../../scripts/ios-configure-glog.sh 参考 https://github.com/facebook/react-native/issues/19774#issuecomment-397910801 References 苹果开发者的Mac大瘦身 Managing Xcode "},"xcode/code-snippets-library.html":{"url":"xcode/code-snippets-library.html","title":"Code Snippets Library","keywords":"","body":"Code Snippets Library Reference Xcode开发技巧之Code Snippets Library Xcode Snippets "},"xcode/plugin.html":{"url":"xcode/plugin.html","title":"plugin","keywords":"","body":"plugin Alcatraz 插件管理工具 插件地址 安装 curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh clang-format 代码格式化工具 插件地址 命令行安装 $ brew install clang-format 文档 使用 $ clang-format target_file > temp_file $ cat temp_file > target_file VVDocumenter-Xcode 注释工具 插件地址 自定义快捷键 Preferences > Keyboard > Shortcuts > App Shortcuts > Click + 插件失效更新 获取Xcode路径 $ xcode-select -p /Applications/Xcode-7.3.app/Contents/Developer 获取DVTPlugInCompatibilityUUID $ defaults read /Applications/Xcode-7.3.app/Contents/Info DVTPlugInCompatibilityUUID ACA8656B-FEA8-4B6D-8E4A-93F4C95C362C 更新DVTPlugInCompatibilityUUID $ find ~/Library/Application\\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add DVTPlugInCompatibilityUUID 只需在命令行输入一行命令即可(注意：这段代码貌似仅支持Xcode6以上) plugin alcatraz 插件管理工具, Xcode8不支持 ClangFormat-Xcode 代码格式化, Xcode8不支持 XcodeClangFormat XcodeClangFormat Xcode8 代码格式化插件， 安装好后 系统设置 > 扩展 开启扩展 系统设置 > 键盘 > 快捷键 添加快捷键 "},"xcode/xcconfig.html":{"url":"xcode/xcconfig.html","title":"xcconfig","keywords":"","body":"xcconfig XX.xcconfig xcconfig是一个保存xcode工程各种配置的纯文本文件,如果被使用,会覆盖掉相同的配置项,我们可以利用它进行管理工程使得同样的工程使用不同的预定义参数或编译期产生其他行为。 新建 File > New-File > iOS > Other > Configuration Setting File 参数 Xcode Document 中搜索 Xcode Build Setting Reference: Build Setting Reference，有所有参数说明 相关资料: http://blog.csdn.net/fengsh998/article/details/8307424 Targeted device family 目标平台 TARGETED_DEVICE_FAMILY 1：iPhone/iPod touch. (Default) 2：iPad. 1，2：iPad. TARGETED_DEVICE_FAMILY = 1,2 Runpath Search Paths Space-separated list of directory paths. Specifies the run-path locations at which the dynamic loader searches for the product’s run-path dependent libraries. See Dynamic Library Programming Topics. LD_RUNPATH_SEARCH_PATHS LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks Precompile Prefix Header 是否用pch文件 GCC_PRECOMPILE_PREFIX_HEADER YES: Target generates a prefix header when the prerequisite is met. NO: Target does not generate a prefix header. GCC_PRECOMPILE_PREFIX_HEADER = YES Prefix Header pch文件路径 GCC_PREFIX_HEADER GCC_PREFIX_HEADER = MyProduct_Prefix.pch info.plist File Info.plist文件路径 INFOPLIST_FILE INFOPLIST_FILE = Info.plist PRODUCT_NAME 包名 PRODUCT_NAME PRODUCT_NAME = PRODUCT_NAME Build Active Architecture Only Specifies whether the product includes only object code for the native architecture ONLY_ACTIVE_ARCH YES: The product includes only code for the native architecture (NATIVE_ARCH). NO: The product includes code for the architectures specified in ARCHS (Architectures). 使用 如果用了Cocoapods，要加上 Pods/Target Support Files/Pods/Pods.debug.xcconfig 或 Pods/Target Support Files/Pods/Pods.release.xcconfig Xcode > Project > Info > Configurations 修改各个Taget 的 Debug 和 Release 对应的xcconfig文件 运行脚本 新建 File > New-File > iOS > Other > Shell Script 使用 Xcode > TARGETS > Build Phases > + > New Run Script Phase 相关资料 http://www.hongtaozhy.com/2014/04/04/xcconfig/ http://www.jianshu.com/p/44c82630bd50 Xcode:用于管理多个 target 配置的 XCConfig 文件 "},"xcode/Instruments.html":{"url":"xcode/Instruments.html","title":"Instruments","keywords":"","body":"Instruments 官方文档 Time Profiler 分析代码的执行时间，找出导致程序变慢的原因。 CallTree 勾选Call Tree中Separate Thread和Hide System Libraries两个选项 Separate By Thread 线程分离,只有这样才能在调用路径中能够清晰看到占用CPU最大的线程. Invert Call Tree 从上到下跟踪堆栈信息.这个选项可以快捷的看到方法调用路径最深方法占用CPU耗时,比如FuncA{FunB{FunC}},勾选后堆栈以C->B->A把调用层级最深的C显示最外面. Hide Missing Symbols 如果dSYM无法找到你的APP或者调用系统框架的话，那么表中将看到调用方法名只能看到16进制的数值,勾选这个选项则可以隐藏这些符号，便于简化分析数据. Hide System Libraries 勾选后耗时调用路径只会显示app耗时的代码,性能分析普遍我们都比较关系自己代码的耗时而不是系统的.基本是必选项.注意有些代码耗时也会纳入系统层级，可以进行勾选前后前后对执行路径进行比对会非常有用. Flatten Recursion 递归函数, 每个堆栈跟踪一个条目 Top Functions 一个函数花费的时间直接在该函数中的总和，以及在函数调用该函数所花费的时间的总时间。因此，如果函数A调用B，那么A的时间报告在A花费的时间加上B花费的时间,这非常真有用，因为它可以让你每次下到调用堆栈时挑最大的时间数字，归零在你最耗时的方法。 Allocations 监测内存使用/分配情况 Leaks 找到引发内存泄漏的起点 Cocoa Layout 观察约束变化，找出布局代码的问题所在。 Network 跟踪 TCP / IP和 UDP / IP 连接。 Automations 创建和编辑测试脚本来自动化 iOS 应用的用户界面测试。 打开Instruments Xcode run>Show the Debug Navagitor>Profile in Instruments 相关资料 Instruments中文文档 http://www.cocoachina.com/ios/20150225/11163.html "},"xcode/groups-vs-folder-references.html":{"url":"xcode/groups-vs-folder-references.html","title":"Groups VS Folder References","keywords":"","body":"Groups VS Folder References Groups [UIImage imageNamed:@\"Images/Icons/GoPago\"]; 可以写成 [UIImage imageNamed:@\"GoPago\"]; 优势 管理麻烦 劣势 Folder References 优势 劣势 http://vocaro.com/trevor/blog/2012/10/21/xcode-groups-vs-folder-references/ "},"xcode/asset-catalog.html":{"url":"xcode/asset-catalog.html","title":"Asset Catalog","keywords":"","body":"Asset Catalog asset catalog References iOS拾遗—— Assets Catalogs 与 I/O 优化 "},"xcode/plist-buddy.html":{"url":"xcode/plist-buddy.html","title":"PlistBuddy 操作 Plist 文件","keywords":"","body":"PlistBuddy 操作 Plist 文件 /usr/libexec/PlistBuddy 使用 1.添加 /usr/libexec/PlistBuddy -c 'Add :Software:Gallery:Version string \"1.0\"' ~/Desktop/com.sample.plist 2.输出 /usr/libexec/PlistBuddy -c \"Print\" ~/Desktop/com.sample.plist 3.修改 /usr/libexec/PlistBuddy -c 'Set :Software:Gallery:Version \"1.1\"' ~/Desktop/com.sample.plist 4.删除 /usr/libexec/PlistBuddy -c 'Delete :Software:Gallery:Version' ~/Desktop/com.sample.plist 5.合并 /usr/libexec/PlistBuddy -c \"Merge ~/Desktop/Global.plist :Software:Gallery\" ~/Desktop/com.sample.plist 打印Build号 /usr/libexec/PlistBuddy -c \"Print CFBundleVersion\" ./Info.plist "},"xcode/project-pbxproj.html":{"url":"xcode/project-pbxproj.html","title":"project.pbxproj","keywords":"","body":"project.pbxproj /usr/libexec/PlistBuddy https://github.com/CocoaPods/Xcodeproj "},"xcode/xcode10.html":{"url":"xcode/xcode10.html","title":"Xcode10","keywords":"","body":"Xcode10 常见问题 library not found for -lstdc++.6.0.9 因为 Xcode10 不再自带 libstdc++，需要从 Xcode9 拷贝过来 // 真机用 sudo cp /Applications/Xcode-9.4.1.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libstdc++.* /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/ // 模拟器用 // 对于模拟器来说由于iOS12的模拟器将libstdc++.6.tbd & libstdc++.6.0.9.tbd已经删除，即使复制了文件，依然会报错 sudo cp /Applications/Xcode-9.4.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator11.4.sdk/usr/lib/libstdc++.* /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator12.0.sdk/usr/lib/ sudo cp /Applications/Xcode-9.4.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libstdc++.* /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/ cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/ sudo ln -s libstdc++.6.0.9.tbd libstdc++.6.tbd sudo ln -s libstdc++.6.0.9.tbd libstdc++.tbd 拷贝结果 $ cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/ $ ls -l libstdc++.* -rw-r--r--@ 1 root wheel 209673 10 8 21:22 libstdc++.6.0.9.tbd lrwxr-xr-x 1 root wheel 19 10 8 21:23 libstdc++.6.tbd -> libstdc++.6.0.9.tbd lrwxr-xr-x 1 root wheel 19 10 8 21:23 libstdc++.tbd -> libstdc++.6.0.9.tbd ld: symbol(s) not found for architecture x86_64 RN 问题 file can not found libfishhook.a Libraries > RCTWebSocket > Build Phases > libfishhook.a 删了再添加 编译 glog 的时候 can not found config.h 运行下面脚本，配置 glog，再编译工程 cd node_modules/react-native/third-party/glog-0.3.4 ../../scripts/ios-configure-glog.sh 或者 cd node_modules/react-native/third-party/glog-0.3.4 ./configure --host arm-apple-darwin Cycle in dependencies between targets 'Lottie_iOS' and 'Communication'; command + shift + k 清空缓存 error: Multiple commands produce libReact.a 参考 https://stackoverflow.com/questions/51071090/multiple-commands-produced-error-xcode-10 方法一： File > Project/Workspace settings > Build System 设置为 Legacy Build System 方法二： target > Build phase > Copy Bundle Resource/Compile Sources > 删除 libReact.a signalhandler.cc:78:28: no member named '__rip' in '__darwin_arm_thread_state' 参考 https://github.com/facebook/react-native/issues/16106#issuecomment-401662200 node-module/react-native/third-party/glog-0.3.4/src/signalhandler.cc 78 行直接返回 NULL 新功能 New Build System https://stackoverflow.com/a/51205222/5266652 There is an (as of yet undocumented) flag in xcodebuild: -UseModernBuildSystem=. The value can be either 0 or NO to use the legacy (\"original\") build system, or 1 or YES to use the new build system. "},"xcode/merge-pbxproj.html":{"url":"xcode/merge-pbxproj.html","title":"解决 pbxproj 合并冲突","keywords":"","body":"解决 pbxproj 合并冲突 A Better Way to Automatically Merge Changes in Your XCode Project Files brew install mergepbx git mergetool --tool=mergepbx PROJECT.pbxproj "},"xcode/import.html":{"url":"xcode/import.html","title":"import","keywords":"","body":"import #include 用于 lib 或 framework #include \"something\" 用于引入的代码 Header Search Paths 添加 lib 或 framework 依赖的 Lib 和 Framework 需要添加到 Target > Build Phase > Link Binary With Libraries = Target > General > Linked Frameworks and Libraries 自定义的 Framework 需要添加到 Target > Build Phase > Embed Framework = Target > General > Embedded Binaries "},"xcode/xcodeproj.html":{"url":"xcode/xcodeproj.html","title":"xcodeproj","keywords":"","body":"xcodeproj ruby创建和修改Xcode工程文件 https://github.com/CocoaPods/Xcodeproj "},"xcode/warning.html":{"url":"xcode/warning.html","title":"Xcode 警告信息","keywords":"","body":"Xcode 警告信息 Xcode 编译警告设置 Build Settings > Apple LLVM [Version] - Warning ***** 配置警告设置，Quick Help查看每个设置的帮助。 Reference Compiler Warnings for Objective-C Developers Warnings-xcconfig jonreid/XcodeWarnings #pragma message 预处理指令 不支持中文，在issue navagitor中提示 #pragma message(\" to do\") #pragma message(\" fix me\") #pragma message(\" do not known\") #pragma message(\" important\") #warning 同 #pragma message #warning to do 注释 支持中文，在Symbols list中显示 // TODO: // FIXME: // !!!: // ???: Build Phases 添加 run script KEYWORDS=\"TODO|FIXME|\\?\\?\\?:|\\!\\!\\!:\" find . -name *.[h,m] ! -path \"./Pods/*\" ! -path \"./Example/*\" | xargs egrep --with-filename --line-number --only-matching ${KEYWORDS} | perl -p -e \"s/($KEYWORDS)/ warning: \\$1/\" 所有变成warning 相关资料 "},"xcode/Other.html":{"url":"xcode/Other.html","title":"Other","keywords":"","body":"Other Edit all in Scope 选定一个想要修改的字符串，然后选择 Edit－Edit all in Scope，然后在你输入的时候，所有该字符出现的地方都进行同步更改 cocoapods 开发库添加文件，pod update之后才能用 添加软链接到 /Pods/Headers/Public 修改XCode编译时使用的线程数 $ defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks `sysctl -n hw.ncpu` "},"xcode/xcode8-ios7.html":{"url":"xcode/xcode8-ios7.html","title":"Xcode8 兼容iOS7以及低版本系统","keywords":"","body":"Xcode8 兼容iOS7以及低版本系统 安装 Xcode7 gem install xcode-install xcversion install 7.3.1 拷贝 Xcode7 的 iOS7 的配置文件到 Xcode 8 目录下 sudo cp -rf /Applications/Xcode-7.3.1.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/7.0 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/ 修改 SDKSettings.plist 拷贝到其它目录并打开 cp /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/SDKSettings.plist ~/ open ~/SDKSettings.plist 做如下修改 DefaultProperties > DEPLOYMENT_TARGET_SUGGESTED_VALUES 添加 7.0 拷贝回原目录 sudo cp ~/SDKSettings.plist /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/ 重启 Xcode Questions 1: Shadow memory range interleaves with an existing memory mapping. ASan cannot proceed correctly. ABORTING. 把Scheme里面 取消勾选 Address Sanitizer "},"xcode/agvtool.html":{"url":"xcode/agvtool.html","title":"利用 agvtool 更新 Version 和 build","keywords":"","body":"利用 agvtool 更新 Version 和 build 更新 Version 和 build 使用 修改Build Setting Build Setting > Versioning System 设置为 Apple Generic Build Setting > Current Project Version 设置为0 Version 初始化 $ agvtool new-marketing-version 3.2.0 查看 $ agvtool what-marketing-version 自增 $ agvtool new-marketing-version Build 初始化 $ agvtool new-version -all 19 查看 $ agvtool what-version 自增 $ agvtool next-version 修改 Info.plist 的 CFBundleVersion agvtool next-version 只会修改 Build Settings 里的 Current Project Version,不会修改 Info.plist 里的 CFBundleVersion，所以需要 PlistBuddy 来修改。 进入工程根目录，运行下面的脚本 /usr/libexec/PlistBuddy -c \"Set :CFBundleVersion `agvtool what-version | awk 'NR==2{print}' `\" Info.plist Reference https://developer.apple.com/library/mac/qa/qa1827/_index.html https://segmentfault.com/a/1190000002423661 "},"xcode/xcode-clean.html":{"url":"xcode/xcode-clean.html","title":"清理磁盘","keywords":"","body":"清理磁盘 模拟器 清除 ~/Library/Developer/CoreSimulator/Devices/ 下不需要的模拟器 # 列出所有设备 xcrun simctl list devices # 删除无用设备 xcrun simctl delete unavailable Archives 影响：不可恢复；Adhoc或者App Store版本会被删除。建议备份dSYM文件夹 路径：~/Library/Developer/Xcode/Archives DerivedData 可重新生成；会删除build生成的项目索引、build输出以及日志。重新打开项目时会重新生成，大的项目会耗费一些时间。 路径：~/Library/Developer/Xcode/DerivedData Other Xcode 下载缓存目录： ~/Library/Caches/com.apple.dt.Xcode/Downloads Xcode 支持的系统：~/Library/Developer/Xcode/iOS\\ DeviceSupport/ References http://blog.csdn.net/epeaktop/article/details/25295565 Xcode卡顿解决方案 Xcode磁盘空间大清理 "},"xcode/xcode-install.html":{"url":"xcode/xcode-install.html","title":"xcode-install","keywords":"","body":"xcode-install 安装不同版本Xcode Github 安装 xcode-install $ gem install xcode-install 查看可安装的Xcode版本 $ xcversion list 安装 Xcode $ xcversion install 7 安装模拟器 查看已安装模拟器 xcversion simulators 在Xcode8.0下、手动安装iOS 9.3 的模拟器 "},"appBetter/ui-test.html":{"url":"appBetter/ui-test.html","title":"UI测试","keywords":"","body":"UI测试 官方文档 系统通知 都用addUIInterruptionMonitorWithDescription来实现 XCUIApplication *app = [[XCUIApplication alloc] init]; // 定位 [self addUIInterruptionMonitorWithDescription:@\"Location Dialog\" handler:^BOOL(XCUIElement * _Nonnull interruptingElement) { XCUIElement *button = interruptingElement.buttons[@\"Allow\"]; if ([button exists]) { [button tap]; return YES; } return NO; }]; // 通知 [self addUIInterruptionMonitorWithDescription:@\"User Notifications\" handler:^BOOL(XCUIElement * _Nonnull interruptingElement) { XCUIElement *button = interruptingElement.buttons[@\"OK\"]; if ([button exists]) { [button tap]; return YES; } return NO; }]; Q1:自动录制的中文报错 输出的中文都是unicode编码的,\\U需要改成\\u才能用 Q2: UI Testing Failure - Failure getting list of active applications: AX error -25205 https://forums.developer.apple.com/thread/20611 重启Xcode好了 Reference http://mdsa.51cto.com/art/201507/485053.htm http://masilotti.com/ui-testing-xcode-7/ "},"appBetter/test-platform.html":{"url":"appBetter/test-platform.html","title":"测试平台","keywords":"","body":"测试平台 阿里云测 腾讯优测 腾讯 百度APP测试服 TestIn 相关资料 https://www.zhihu.com/question/22192125 "},"appBetter/test-framework.html":{"url":"appBetter/test-framework.html","title":"测试框架","keywords":"","body":"测试框架 UI 测试 (UI Testing) XCTest 单元测试 (Unit Test) XCTest 相关资料 http://www.cocoachina.com/ios/20150731/12859.html "},"weex/":{"url":"weex/","title":"Weex","keywords":"","body":"Weex GitHub 官网 论坛 awesome-weex Weex 相关文章 工具 weex-toolkit 辅助开发和调试 weex-devtool Weex 调试工具， Weex-Toolkit 替代品 weex-pack Weex 工程开发套件：创建工程，打包原生应用 weex-pack weexpack releases 最大只有 0.2.5， 直接 npm install -g weexpack 会安装 0.3.1 版本不可用， npm install -g weexpack@0.2.5 weex-toolkit npm install -g weex-toolkit 调试 参考 Weex Devtools使用手册 和 weex-devtool 调试Android 调试iOS 调试Web IDE WebStrom 搜索插件 weex weeex 插件使用 创建工程 weexpack init demo npm install "},"nodejs/":{"url":"nodejs/","title":"node.js","keywords":"","body":"node.js Node.js 是一个开放源代码、跨平台的、用于服务器端和网络应用的运行环境。 官网 Node.js 究竟是什么？ Node.js 教程 cnodejs Node.js静态文件服务器实战 安装 brew 方式安装 https://nodejs.org/en/download/package-manager/#osx brew install node nvm 方式安装 Github 安装 nvm $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash 查看可用 node.js 版本 $ nvm ls-remote 查看 node.js 稳定版本 https://semver.io/node/stable 安装 node.js $ nvm install 5.11.1 IDE webstorm npm NodeJS包管理和分发工具 bower NPM 主要运用于 Node.js 项目的内部依赖包管理，安装的模块位于项目根目录下的 node_modules 文件夹内。而 Bower 大部分情况下用于前端开发，对于CSS/JS/模板等内容进行依赖管理，依赖的下载目录结构可以自定义。 官网 Express Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。 安装 $ npm install express --save JXcore JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。 查看Node支持哪些新特性 $ node -e 'console.log(process.versions)' { http_parser: '2.7.0', node: '6.1.0', v8: '5.0.71.35', uv: '1.9.0', zlib: '1.2.8', ares: '1.10.1-DEV', icu: '56.1', modules: '48', openssl: '1.0.2h' } Cookie node.js 方式 node.js操作Cookie Cookie Management in Express 第三方中间方式 $ npm install cookie-parser var express = require('express'); var app = express(); var cookieParser = require('cookie-parser'); // 加载用于解析 cookie 的中间件 app.use(cookieParser()); request 请求 request Request —— 让 Node.js http请求变得超简单 Node.js进程管理 PM2 相关资料 NPM vs Bower 的区别 "},"nodejs/mocha.html":{"url":"nodejs/mocha.html","title":"mocha.js","keywords":"","body":"mocha.js node.js 测试框架 官网 GitHub GitHub wiki 测试框架 Mocha 实例教程 安装 $ npm install --global mocha 使用 测试脚本命名 .test.js 测试 .spec.js 规格 默认入口 test/*.test.js 参数 --recursive 测试 test 目录下面所有的测试用例(不管在哪一层).默认只测试 test 目录下的测试用例 --reporter, -R 默认是spec格式 ,其它格式 "},"nodejs/optimize-nginx.html":{"url":"nodejs/optimize-nginx.html","title":"使用 nginx 优化 node.js","keywords":"","body":"使用 nginx 优化 node.js 使用nginx反向代理处理静态页面 尽管Node.JS的性能不错，但处理静态事务确实不是他的专长，如：gzip编码，静态文件，HTTP缓存，SSL处理，负载平衡和反向代理及多站点代理等，都可以通过nginx来完成，从而减小node.js的负载，并通过nginx强大的缓存来节省您网站的流量从而提高网站的加载速度。 "},"nodejs/npm5.html":{"url":"nodejs/npm5.html","title":"npm5","keywords":"","body":"npm5 添加了 package-lock.json 来锁定版本， 注意事项 npm i 只会安装 package-lock.json 中对应版本的包，如果要升级包需要使用 npm update 或者 npm i @ npm i 会从 node_modules 取对应的源地址保存到 package-lock.json，所以如果是多人协作，必须要统一使用同样的源，否则不同的人 npm i 之后都会修改 package-lock.json Questions npm WARN invalid config loglevel=\"notice\" 参考 https://github.com/npm/npm/issues/16862#issuecomment-306389816 npm config set loglevel warn "},"nodejs/mongoose.html":{"url":"nodejs/mongoose.html","title":"Mongoose","keywords":"","body":"Mongoose node.js mongodb 库 Built-in Promises http://mongoosejs.com/docs/promises.html http://stackoverflow.com/questions/38138445/node3341-deprecationwarning-mongoose-mpromise mongoose 默认返回的是 mpromise, mongoose推荐使用原生的 global.Promise 或者第三方的promise,例如： require('bluebird') 自定义 _id var Post = new mongoose.Schema({ _id: Number, title: String, content: String, tags: [ String ] }); OR var Post = new mongoose.Schema({ title: String, content: String, tags: [ String ] }, { _id: false }); array to json lean() Collection.find().lean(); "},"nodejs/artTemplate.html":{"url":"nodejs/artTemplate.html","title":"artTemplate","keywords":"","body":"artTemplate js 模板引擎 Github "},"nodejs/Koa2.html":{"url":"nodejs/Koa2.html","title":"Koa2","keywords":"","body":"Koa2 Koa2 支持 async，所以选择之。 官网 GitHub 文档 koa 中文文档 安装 npm install koa@2 中间件 Koa官方推荐的中间件 koa-adapter 把1.0中间件转换成2.0的 koa-bodyparser json解析 $ npm install --save koa-bodyparser@next Koa-static Koa静态文件 Koa-router Koa 路由 $ npm install --save koa-router@next koa-favicon Koa middleware for serving a favicon. $ npm install --save koa-favicon@next koa-compress 压缩 $ npm install --save koa-compress@next koa-bunyan-logger 打印请求日志, 推荐 koa-logger 打印请求日志 $ npm install --save koa-logger@next koa-cors 允许跨域访问 创建工程 koa2-startkit 生成 package.json $ npm init "},"nodejs/spawn-exec.html":{"url":"nodejs/spawn-exec.html","title":"child_process 模块中 spawn 和 exec 的区别","keywords":"","body":"child_process 模块中 spawn 和 exec 的区别 child_process.spaen会返回一个带有stdout和stderr流的对象。你可以通过stdout流来读取子进程返回给Node.js的数据。stdout拥有’data’,’end’以及一般流所具有的事件。当你想要子进程返回大量数据给Node时，比如说图像处理，读取二进制数据等等，你最好使用spawn方法。 child_process.spawn方法在子进程开始执行时，它就开始从一个流总将数据从子进程返回给Node。 options options.stdio 用于定义主线程与子线程之间怎么交互 Reference 官方文档 说说Node.js child_process模块中的spawn和exec方法 "},"nodejs/bluebird.html":{"url":"nodejs/bluebird.html","title":"bluebird","keywords":"","body":"bluebird 如果第三方的那些函数库是符合错误优化的规则的话,可以直接用 bluebird 批量转换 GitHub 官网 注意 As a notable exception in fs, fs.existsAsync doesn't work as expected, because Node's fs.exists doesn't call back with error as first argument. More at #418. One possible workaround is using fs.statAsync. 翻译 必须回调函数第一个参数是 error https://github.com/petkaantonov/bluebird/issues/418 "},"nodejs/why-nodejs.html":{"url":"nodejs/why-nodejs.html","title":"为什么选 node.js","keywords":"","body":"为什么选 node.js Node.js适用于哪些场景 优点 不再使用多进程、线程来处理多个web请求，而是使用多事件、队列来处理。这样就不存在资源瓶颈问题。 缺点 对计算密集型请求处理能力较弱.如图形处理、音频处理、编码、物理仿真、加密。 使用 Web Workers 模式来解决，开启一个子进程来处理计算密集型任务。 "},"nodejs/private-npm.html":{"url":"nodejs/private-npm.html","title":"私有 npm","keywords":"","body":"私有 npm GitHub cnpm 官网 安装 "},"nodejs/express.html":{"url":"nodejs/express.html","title":"express","keywords":"","body":"express Express 基于 Node.js 平台，快速、开放、极简的 web 开发框架 express 中文 第三方中间件 express Github https://segmentfault.com/a/1190000003766092 安装 $ npm install express --save Express 应用生成器 通过应用生成器工具 express 可以快速创建一个应用的骨架。 安装 $ npm install express-generator -g 使用 $ express myapp session & cookie express-session session 存储 redis存储 connect-redis 文件存储 session-file-store body body-parser Other serve-favicon 自定义 favicon.ico "},"nodejs/nodejs-github-front-end.html":{"url":"nodejs/nodejs-github-front-end.html","title":"基于 node.js 的 github 前端","keywords":"","body":"基于 node.js 的 github 前端 Github RESET Api 注册应用使用 OAuth tokens Register an application to generate OAuth tokens Github > settings > OAuth applications > Developer applications > Register a new application 认证 https://developer.github.com/v3/oauth/ Web 认证 https://github.com/login/oauth/authorize?client_id=8100247edc7338dbaf32&client_secret=61a228029766325f1649a019bb0c88b84838282a&redirect_uri=https://github.com/greedlab/greedhub-front-end&scope=user,repo&state=random_string 认证回调： access_token=e72e16c7e42f292c6912e7710c838347ae178b4a&scope=user%2Cgist&token_type=random_string 使用 access_token GET https://api.github.com/user?access_token=... 或 curl -H \"Authorization token:9446e3ecc32695747458\" https://api.github.com/user/user/starred 注意 文档中的 :username 全部用对应的用户名替换。 :org 全部用对应的组织名替换。大小写不敏感。 "},"nodejs/log4js.html":{"url":"nodejs/log4js.html","title":"Nodejs日志管理log4js","keywords":"","body":"Nodejs日志管理log4js https://github.com/nomiddlename/log4js-node 安装 $ npm install log4js Reference http://blog.fens.me/nodejs-log4js/ "},"nodejs/passport.html":{"url":"nodejs/passport.html","title":"passport.js","keywords":"","body":"passport.js node.js 账户认证 Reference GitHub Documentation passport.js学习笔记 "},"nodejs/nodemon.html":{"url":"nodejs/nodemon.html","title":"nodemon","keywords":"","body":"nodemon node.js 任务管理，开发环境用。 官网 GitHub 安装 $ npm install -g nodemon 使用 gulp-nodemon gulp 中使用 nodemon "},"nodejs/jest.html":{"url":"nodejs/jest.html","title":"Jest","keywords":"","body":"Jest GitHub Install $ npm i -D jest @types/jest "},"nodejs/crush.html":{"url":"nodejs/crush.html","title":"NodeJS服务崩溃的解决办法","keywords":"","body":"NodeJS服务崩溃的解决办法 使用uncaughtException process.on(＇uncaughtException＇, function (err) { //打印出错误 console.log(err); //打印出错误的调用栈方便调试 console.log(err.stack)； }); 使用 try/catch var http = require(＇http＇); http.createServer(function(req, res) { try { handler(req, res); } catch(e) { console.log(＇ ＇, e, ＇ ＇, e.stack); try { res.end(e.stack); } catch(e) { } } }).listen(8080, ＇127.0.0.1＇); console.log(＇Server running at http://127.0.0.1:8080/＇); var handler = function (req, res) { //Error Popuped var name = req.params.name; res.writeHead(200, {＇Content-Type＇: ＇text/plain＇}); res.end(＇Hello ＇ + name); }; 这种方案的好处是，可以将错误和调用栈直接输出到当前发生的网页上。 守护NodeJS进程和记录错误日志 使用shell启动脚本守护node reference http://www.weste.net/2014/10-20/99529.html "},"nodejs/Q-A.html":{"url":"nodejs/Q-A.html","title":"Q&A","keywords":"","body":"Q&A TypeError: Cannot convert object to primitive value 当 object 不是字符串时 console.log(\"string\" + object); 改成 console.log(object); 文件路径 浅析 NodeJs 的几种文件路径 只有在 require() 时才使用相对路径(./, ../) 的写法，其他地方一律使用绝对路径，如下： // 当前目录下 path.dirname(__filename) + '/test.js'; // 相邻目录下 path.resolve(__dirname, '../lib/common.js'); Not compatible with your operating system or architecture: fsevents Since fsevents is an API in OS X allows applications to register for notifications of changes to a given directory tree. Running: npm install --no-optional http://stackoverflow.com/questions/36725181/not-compatible-with-your-operating-system-or-architecture-fsevents1-0-11 "},"nodejs/npm.html":{"url":"nodejs/npm.html","title":"npm","keywords":"","body":"npm NodeJS包管理和分发工具,CommonJS 规范，require加载依赖 官网 文档 安装 https://www.npmjs.com/package/npm $ curl -L https://npmjs.org/install.sh | sh 更新 $ npm update npm -g 子命令 install 安装包 https://docs.npmjs.com/cli/install $ npm help install -g 存储到全局 --save 自动把模块和版本号添加到 package.json 的 dependencies 部分。开发环境和生产环境都可以用。eg：koa --save-dev 自动把模块和版本号添加到 package.json 的 devdependencies 部分。只能在调试模式下运行。eg：eslint view 查看node模块的 package.json 文件夹 https://docs.npmjs.com/cli/view $ npm help view init 创建package.json https://docs.npmjs.com/cli/init $ npm help init npm install 安装 package.json 中 dependencies 和 devDependencies 部分 npm install --production 只安装 package.json 中 dependencies 部分， 如果是 npm5 ，要先删 package-lock.json，否则还是按 package-lock.json 安装。 package.json 各参数说明 $ npm help 5 package.json npm ci npm shrinkwrap 使用 npm shrinkwrap 来管理项目依赖 生成 npm-shrinkwrap.json 文件，固定包版本 换源 默认源是 https://registry.npmjs.org/。换成淘宝的 https://registry.npm.taobao.org npm config set registry https://registry.npm.taobao.org // 配置后可通过下面方式来验证是否成功 npm config get registry nrm 方式换源 GitHub // 全局安装 $ npm install -g nrm // 查看有哪些镜像 $ nrm ls // 对比各个镜像的访问速度 $ nrm test // 使用淘宝的镜像 $ nrm use taobao 发布 npm 包 注册账号 网站注册 sign up 命令行注册和登录 npm-adduser $ npm adduser --registry=https://registry.npmjs.org/ --always-auth 然后输入用户名、密码、邮箱 查看登录状态 $ npm whoami 发布 publishing-npm-packages npm publish 会取 package.json version 的 tag 发布 "},"nodejs/pm2.html":{"url":"nodejs/pm2.html","title":"pm2","keywords":"","body":"pm2 node.js 任务管理，生产环境用。 GitHub 安装 $ npm install pm2 -g 启动 Start an app using all CPUs available + set a name $ pm2 start app.js -i 0 --name \"api\" --watch [paths] 文件变化重新启动 查看任务 $ pm2 list 自启动 使用pm2启动node ：# pm2 start /home/wwwroot/web.js --name --watch mkdir -p /var/lock/subsys dump这些进程列表：＃ pm2 save 生成自启动脚本：＃ pm2 startup centos 赋予权限：＃ chmod +x /etc/init.d/pm2-init.sh 添加服务： 添加服务 ＃ chkconfig --add pm2-init.sh 如果在 ubuntu 上提示不能用 chkconfig 就换下面的命令 # cd /etc/init.d # update-rc.d pm2-init.sh defaults 删除服务 # update-rc.d -f pm2-init.sh remove 日志管理 日志存储路径：~/.pm2/logs/ 查看所有日志 $ pm2 logs 查看某个任务的日志 $ pm2 logs [id|name] 与bunyan一起查看日志 Can I use \"pm2 logs\" to view access/out logs also? 查看错误日志 tail -n 2000 /USER/.pm2/logs/app-err-0.log 查看正常日志 tail -n 2000 /USER/.pm2/logs/app-err-0.log | bunyan 删除所有日志 $ pm2 flush "},"nodejs/nvm.html":{"url":"nodejs/nvm.html","title":"nvm","keywords":"","body":"nvm node 版本管理 GitHub 安装 nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash source ~/.bashrc 更新 nvm ( cd \"$NVM_DIR\" git fetch origin git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" origin` ) && . \"$NVM_DIR/nvm.sh\" 安装 node nvm install --lts node 临时切换 node nvm use node 永久切换 node nvm alias default node "},"go/":{"url":"go/","title":"Go","keywords":"","body":"Go 官网 "},"chat/third-real-time.html":{"url":"chat/third-real-time.html","title":"第三方实时聊天实现","keywords":"","body":"第三方实时聊天实现 方案 Urban Airship 太贵了 Parse 也贵 Push Woosh 可以免费https://www.pushwoosh.com/pricing/ 个推 融云 http://www.rongcloud.cn/showcase 服务器地址: api.cn.ronghub.com 状态码是数字，但是美国ping值太高。 官方说法服务器在AWS上，会自动选择服务器 总结 融云 "},"chat/node.js.html":{"url":"chat/node.js.html","title":"node.js","keywords":"","body":"node.js https://nodejs.org/en/download/ 需要python2.6 or 2.7 编译好的文件安装 wget https://nodejs.org/dist/v4.2.2/node-v4.2.2-linux-x64.tar.gz --no-check-certificate tar zxvf node-v4.2.2-linux-x64.tar.gz mv node-v4.2.2-linux-x64 node ./node/bin/npm --version 源码安装 wget https://nodejs.org/dist/v4.2.2/node-v4.2.2.tar.gz --no-check-certificate tar zxvf node-v4.2.2.tar.gz mv node-v4.2.2-linux-x64 node ./node/bin/npm --version Q Error: Python executable \"python2\" is v2.4.3, which is not supported by gyp. 版本选择 bluehost的python版本是Python 2.4.3,node-v4.2.2需要Python 2.6 or 2.7 "},"chat/socket.io.html":{"url":"chat/socket.io.html","title":"socket.io","keywords":"","body":"socket.io 服务器 http://socket.io/ 客户端 http://socket.io/docs/faq/ 安装 "},"chat/real-time.html":{"url":"chat/real-time.html","title":"实时聊天的实现","keywords":"","body":"实时聊天的实现 用 websocket 就可以了吧,如果不用 php 做后端的话，最简单的方案就是用 socket.io,或者架一个 mqtt 协议的服务器,现在http 的话新的方法就是基于 websocket 的,不用 http 的话可以考虑 mqtt 协议,http 长连接/websocket 方案用 swoole 或者 socket.io 都可以实现，mqtt 协议就找个 mqtt 服务器端来改，客户端有相应的 mqtt 库 php 用websocket。Swoole ， Workerman 可实现websocket,swoole需要编译，虚拟机上没法实现，Workerman需要php cli Workerman https://github.com/walkor/Workerman php ape http://ape-project.org/ C,编译不了 socketo https://github.com/ratchetphp/Ratchet php php+websocket php有可用的websocket库，不需要php-fpm。 目前比较成熟的有swoole（swoole.com），和workman（workman.net） swoole是c写的php扩展， 效率比nodejs还要高，workman是纯php实现，两者都号称可以实现并发百万TCP连接。 非php socket.io ,mqtt socket.io 服务器 基于 Node.js 实现 http://socket.io/ 客户端 自动使用 WebSocket、轮循 http://socket.io/docs/faq/ SockJS 只有js版 总结 socket.io "},"host-server/":{"url":"host-server/","title":"云主机与云存储","keywords":"","body":"云主机与云存储 又拍云 静态资源 Amazon EC2 – 虚拟服务器托管 服务 Amazon S3 - 云存储 存储静态资源 Amazon RDS - 关系数据库 Other http://www.zrblog.net/15310.html "},"host-server/hosthatch.html":{"url":"host-server/hosthatch.html","title":"hosthatch","keywords":"","body":"hosthatch https://www.hosthatch.com 价格: $8 / quarter 测试： http://www.zrblog.net/14431.html "},"host-server/host-node.js.html":{"url":"host-server/host-node.js.html","title":"node.js 虚拟主机","keywords":"","body":"node.js 虚拟主机 https://github.com/nodejs/node-v0.x-archive/wiki/Node-Hosting http://nodejs.eatj.com/ https://www.nitrous.io/ https://cloudno.de/ "},"host-server/hostus.html":{"url":"host-server/hostus.html","title":"hostus","keywords":"","body":"hostus https://my.hostus.us/ 购买地址: http://hostus.itbulu.com/19.html#more-19 香港，$2.95USD/MON "},"host-server/bandwagonhost.html":{"url":"host-server/bandwagonhost.html","title":"搬瓦工","keywords":"","body":"搬瓦工 官网 "},"host-server/openshift.html":{"url":"host-server/openshift.html","title":"openshift  搭建 node.js 服务","keywords":"","body":"openshift 搭建 node.js 服务 https://openshift.redhat.com rhc openshift 命令行管理工具 https://developers.openshift.com/managing-your-applications/client-tools.html 安装 $ rvm gemset use global $ gem install rhc 登录 $ rhc setup 查看app $ rhc apps Git URL: 为对应 app 的git 地址 代码管理 $ git clone git push 会自动重启服务。 更新 clone openshift 上的代码，并 merge github上的代码，然后 push,会自动重启 node.js 服务。 端口 ip 监听 https://developers.openshift.com/managing-your-applications/port-binding-routing.html server.listen 的端口应该为 8080，ip 为 'localhost',ip 必须要设，否则会与 haproxy 监听 8080 端口冲突。具体可以参考 openshift-cartridge-nodejs 访问 https://name-org.rhcloud.com/ 区域选择 The OpenShift Online Bronze and Silver plans are available in: North America (U.S. and Canada) Europe (EU member states, Iceland, Israel, Norway, Switzerland, and Russia) 免费版只能选 aws美国东部的。升级到 Bronze 或 Silver 计划才可以用包括aws亚洲在内的其它节点。 "},"util/svn-client-usage.html":{"url":"util/svn-client-usage.html","title":"SVN 客户端使用","keywords":"","body":"SVN 客户端使用 Subversion 与版本控制的在线主页 Version Control with Subversion 翻译 命令 svn 子命令 checkout (co) 从版本库取出一个工作副本 svn checkout file:///var/svn/repos/test mine merge 应用两组源文件的差别到工作副本路径 svn merge --reintegrate \\ http://svn.example.com/repos/calc/branches/my-calc-branch update (up) 更新你的工作副本 svn update add 添加文件, 目录或符号链。 svn add * --force commit (ci) 将修改从工作副本发送到版本库 svn commit -m \"added howto section.\" status (stat, st) svn status K 文件锁定在工作副本。 unlock 解锁工作副本路径或URL revert 取消所有的本地编辑 svn revert . "},"util/pay.html":{"url":"util/pay.html","title":"支付","keywords":"","body":"支付 银联支付 手机控件支付 app 内集成 网关支付 银联在线客户端支付 手机网页支付 手机网页 微信支付 公众号支付 微信内的 H5 扫码支付 用户扫二维码支付 APP支付 支付宝支付 App支付 手机网站支付 当面付 用户二维码支付 "},"util/markdown.html":{"url":"util/markdown.html","title":"markdown","keywords":"","body":"markdown 支持 Markdown 的网页 slides 工具总结 markdown转网页 Landslide : https://github.com/adamzap/landslide TOC Table of Content doctoc markdown-toc github-markdown-toc "},"util/search.html":{"url":"util/search.html","title":"搜索","keywords":"","body":"搜索 sphinx c++开发,简单高性能 Apache Lucene java开发,包括solr和elasticsearch Lucene更像是一个SDK。 有完整的API族以及对应的实现。你可以利用这些在自己的应用里实现高级查询（基于倒排索引技术的） solr Solr是一个有HTTP接口的基于Lucene的查询服务器 官网 Apache Solr Reference Guide Solr参考指南 数据同步 DIH DIH全量同步(全表数据)（一般做第一次数据同步） DIH增量同步(新增数据)（常用模式） 参考 solr系列3——solr数据同步(全量、增量) Data Import Request Handler Uploading Structured Data Store Data with the Data Import Handler 局部更新 Updating Parts of Documents ElasticSearch 基于Lucene这个非常成熟的索引方案 Elasticsearch 权威指南 Mastering Elasticsearch(中文版) 数据库同步到 ES 问题 用 river 同步到 ES MongoDB 数据自动同步到 ElasticSearch River elasticsearch-river-mongodb elasticsearch-jdbc Reference 使用 Apache Lucene 和 Solr 4 实现下一代搜索和分析 开源搜索引擎评估:lucene sphinx elasticsearch Elasticsearch与Solr Apache Solr vs Elasticsearch "},"util/api-test.html":{"url":"util/api-test.html","title":"创建客户端测试接口","keywords":"","body":"创建客户端测试接口 介绍一些可以迅速创建测试数据供客户端前期开发用的工具。 1、json-server https://github.com/typicode/json-server 只可以获取数据，不能从客户端进行删除、更新等操作。 安装 $ npm install -g json-server 创建数据 创建 db.json,该文件定义了所有的数据。eg: { \"posts\": [ { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" } ], \"comments\": [ { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 } ], \"profile\": { \"name\": \"typicode\" } } 启动服务 $ json-server --watch db.json 使用 http://localhost:3000/db 返回db.json定义的所有JSON http://localhost:3000/posts 返回db.json定义的posts 2、lowdb https://github.com/typicode/lowdb 可以进行获取、删除、更新等操作。 利用JavaScript工具 lodash 操作服务器上的数据. 3、jsonplaceholder https://github.com/typicode/jsonplaceholder 可以进行获取、删除、更新等操作。 利用 GET, POST, PUT, PATCH, DELETE 等来进行获取、添加、更新、删除等操作 默认的数据存储在/usr/local/lib/node_modules/jsonplaceholder/data.json 安装 $ npm install -g jsonplaceholder 启动 $ jsonplaceholder 使用 https://github.com/typicode/jsonplaceholder#how-to 总结 json-server "},"util/phabricator.html":{"url":"util/phabricator.html","title":"phabricator","keywords":"","body":"phabricator code review 工具 官网 安装 官方方式安装 hachque/phabricator yesnault/docker-phabricator 配置 设置域名 docker exec -it phabricator /opt/phabricator/bin/config set phabricator.base-uri 配置邮箱 Config > config > Mail Config > config > PHPMailer 以 QQ 企业邮箱为例 docker exec -it phabricator /opt/phabricator/bin/config set phpmailer.smtp-host 'smtp.exmail.qq.com' docker exec -it phabricator /opt/phabricator/bin/config set phpmailer.smtp-port 465 docker exec -it phabricator /opt/phabricator/bin/config set phpmailer.smtp-protocol ssl docker exec -it phabricator /opt/phabricator/bin/config set phpmailer.smtp-user docker exec -it phabricator /opt/phabricator/bin/config set phpmailer.smtp-password docker exec -it phabricator /opt/phabricator/bin/phd restart 设置时区 ;date.timezone 改成 date.timezone = Asia/Shanghai Config > Config > Core value 值设为 phabricator.timezone docker exec -it phabricator /opt/phabricator/bin/phd restart 使用 添加仓库 Diffusion > Import an Existing External Repository > Create a New Hosted Repository : Continue > 删除仓库 docker exec -it phabricator /opt/phabricator/bin/remove destroy rCTWANFANTIAN "},"util/vs-code.html":{"url":"util/vs-code.html","title":"Visual Studio Code","keywords":"","body":"Visual Studio Code 官网 插件 Markdown All in One: Markdown 支持 TOC Prettify JSON: JSON 格式化 AutoComplate shell: Shell 自动补全 shell-format: Shell 格式化 "},"util/let-us-encrypt.html":{"url":"util/let-us-encrypt.html","title":"Let's Encrypt","keywords":"","body":"Let's Encrypt 官方推荐 Let's Encrypt 用 certbot 实现 Let's Encrypt 官网 certbot 官网 certbot GitHub certbot 文档 ubuntu nginx 配置 Let's Encrypt certbot 官网 选择 nginx ubuntu版本,打开 Nginx on Ubuntu (other) 安装依赖 $ wget https://dl.eff.org/certbot-auto $ chmod a+x certbot-auto $ ./certbot-auto 模式选择 standalone 模式 这个模式虽然可以配置好服务器，但是以后Renew的时候，需要让服务停止一下，再启动 webroot 模式 这个模式需要指定服务根目录 --webroot-path 并在该目录下生成 .well-known 文件夹 nginx 模式 这个模式配置最简单，直接 ./certbot-auto --nginx 全部搞定，不过这是 alpha 版，使用前最好先备份 nginx 配置 nginx 模式 ./certbot-auto --nginx 配置路径 /var/lib/letsencrypt 和 /etc/letsencrypt/ webroot 模式 创建证书 $ ./certbot-auto certonly nginx启用443端口 新建一个443端口的server配置： server { listen 443 ssl; listen [::]:443 ssl ipv6only=on; ssl_certificate /etc/letsencrypt/live/your.domain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/your.domain.com/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/your.domain.com/chain.pem; // ... other settings ... } nginx -s reload 现在就可以用 https 方式访问了 自动更新证书 let's encrypt 证书有效期为 90 天，所以要定期更新，crontab -e 中添加 ./certbot-auto renew Reference Mozilla, Google, Apple 都已决定不再信任 WoSign 和 StartCom Let's Encrypt 给网站加 HTTPS 完全指南 "},"util/crypto.html":{"url":"util/crypto.html","title":"加密解密","keywords":"","body":"加密解密 在线加解密工具 "},"util/appium.html":{"url":"util/appium.html","title":"appium","keywords":"","body":"appium 官网 iOS 手机上装好 WebDriver 所有应用市场的包都测 fruitstrap 已不再维护，打包用 Fastlane Android 任何 Apk 包都可以测 安装 appium server npm install -g appium npm install -g appium-doctor appium client List of client libraries with Appium server support 查看 app 元素 app-inspector app-inspector 安装依赖 npm install macaca-cli -g # 检测必须全部通过 macaca doctor npm install app-inspector -g brew install usbmuxd brew install ios-webkit-debug-proxy 获取 Device ID 参考 Get the Device ID iOS 真机使用 先获取你的 Team ID 和 Bundle Identifier 再打开 XCTestWD，XCTestWD 工程安装位置：~/.nvm/versions/node/v8.11.0/lib/node_modules/app-inspector/node_modules/xctestwd/XCTestWD/XCTestWD.xcodeproj 做如下配置： XCTestWD > XCTestWD > General 配置 Team 和 Bundle Identifier XCTestWD > XCTestWDUITests > General 配置 Team XCTestWD > XCTestWDUnitTest > General 配置 Team 编译 XCTestWDUnitTest，如果没报错就可以运行 app-inspector -u DEVICE_ID 在真机上测试了 appium-desktop appium-desktop 多设备同时测试 启动多个不同端口的 appium 服务，每个端口对应\b一个设备. Appium +IOS 自动化测试多设备并行执行实现 References WebDriverAgent "},"util/atom.html":{"url":"util/atom.html","title":"Atom","keywords":"","body":"Atom Atom Markdown 默认 Markdown 预览 代码段 相关资料 markdown-preview-enhanced 插件 设置 socks 代理 Markdown 默认 Markdown 预览 ctrl-shift-M 代码段 alt-shift-S查看支持的所有代码段 img,table,b,i,s，l,code 相关资料 https://segmentfault.com/a/1190000003043577 markdown-preview-enhanced 更好的 markdown 插件 插件 安装插件 apm install markdown-preview-enhanced --verbose graphViz-preview-plus: 支持 graphViz 预览 language-dot: 支持 dot 语言 pretty-json: JSON 格式化 atom-beautify: shell 格式化 设置 socks 代理 参考 https://github.com/atom/apm#behind-a-firewall apm config set strict-ssl false apm config set http-proxy socks5://127.0.0.1:1087 apm config set https-proxy socks5://127.0.0.1:1087 apm config set http-proxy http://127.0.0.1:1087 apm config set https-proxy https://127.0.0.1:1087 http_proxy = socks5://127.0.0.1:1086 https_proxy = socks5://127.0.0.1:1086 "},"util/weixin-scheme.html":{"url":"util/weixin-scheme.html","title":"weixin scheme","keywords":"","body":"weixin scheme weixin://scanqrcode 扫码 "},"util/asciiflow.html":{"url":"util/asciiflow.html","title":"asciiflow","keywords":"","body":"asciiflow 在线可视化纯文本流程图绘制，中文支持不友好 References jprichardson/asciiflow lewish/asciiflow2 asciiflow.com asciiflow 中文支持 "},"util/ssl.html":{"url":"util/ssl.html","title":"ssl","keywords":"","body":"ssl 排行 10 best SSL certificate providers The Top 7 Most Reliable SSL Certificate Providers The Top 10 SSL Certificates of 2016 Top 10 SSL Certificate Providers of 2015 证书分类 扩展验证型(EV)SSL证书： 地上显示组织名，价格按域名数量计算 组织验证型(OV)SSL证书： 证书信息显示组织名，可以用于所有子域名 域名验证型（DV）SSL证书： 证书信息显示域名 公司主域名建议用 EV，其它的用 OV EV 版价格 symantec EV $995/年 globalsign EV 9880/年 networksolutions EV $399.50/yr comodo EV 单域名$99/年，3个域名$809.10/年 godaddy ¥2,005.00/年 geotrust EV $299/年 thawte EV $260.00 digicert EV $234/年 "},"util/fabric.html":{"url":"util/fabric.html","title":"fabric","keywords":"","body":"fabric 工具集 官网 官方文档 digits 短信验证 Digits Crashlytics 崩溃统计 文档 自定义日志 崩溃的时候可以看到自定义的日志 iOS 参考 Custom Logs Objective-C 用 CLS_LOG Swift 用 CLSLogv Android 参考 Custom Logging Crashlytics.log(msg) Crashlytics.log(int priority, String tag, String msg); retention 留存率 DAU (Daily Active Users) 日活用户 WAU (Week Active Users) 周活用户 MAU (Month Active Users) 月活用户 "},"util/plantuml.html":{"url":"util/plantuml.html","title":"PlantUML","keywords":"","body":"PlantUML 画时序图、类图、甘特图。。。工具 官网 "},"util/svn.html":{"url":"util/svn.html","title":"SVN","keywords":"","body":"SVN Subversion TortoiseSVN Subversion 与版本控制的在线主页 Version Control with Subversion 翻译 服务端 Install Apache Subversion Binary Packages yum install subversion yum install mod_dav_svn 创建 svn 用户 # useradd -m svn 为 svn 用户设置密码 # passwd svn 切换到 svn 用户 # su - svn 创建仓库 $ mkdir ~/test $ svnadmin create ~/test/ 配置 Built-in Authentication and Authorization ~/test/conf 下面三个是配置文件 svnserve.conf password-db 存放用户名密码的配置文件 eg:password-db = passwd authz-db 存放用户权限的配置文件 eg:authz-db = authz realm 仓库的验证身份域，默认为仓库的 uuid anon-access 未认证用户权限 none，read，write auth-access 认证用户权限 read，write 注意每行配置末尾不能有空格 passwd 存放用户名密码 authz 存放用户权 Path-Based Authorization $authenticated = rw 所有认证用户有读写权限 启动SVN服务 $ svnserve -d -r /home/svn 监听 3690 端口 结束 SVN 服务 $ ps -ef |grep svnserve $ kill -9 客户端 登录 svn $ svn co svn:///test Reference Linux(centOS6.5)下SVN的安装、配置及开机启动 "},"util/ietf.html":{"url":"util/ietf.html","title":"IETF","keywords":"","body":"IETF 国际互联网工程任务组（The Internet Engineering Task Force，简称 IETF） RFC Request For Comments (RFC），是一系列以编号排定的文件。文件收集了有关因特网相关资讯，以及UNIX和因特网社群的软件文件 DATA IETF RFC RFC 首页 rfc-index RFC 索引 txt 版文档地址：https://www.ietf.org/rfc/rfcNNNN.txt html 版文档地址: https://tools.ietf.org/html/rfcNNNN HTTP/1.1 文档 老版的 Hypertext Transfer Protocol -- HTTP/1.1 新版的 Message Syntax and Routing 语法和路由 Semantics and Content 语义和内容 Conditional Requests Range Requests Caching 缓存 Authentication 认证 其它 method PATCH PATCH Hypertext Transfer Protocol (HTTP) Status Code Registry 状态码 "},"util/Graphviz.html":{"url":"util/Graphviz.html","title":"Graphviz","keywords":"","body":"Graphviz 程序员画流程图利器 官网 官方文档 mac 安装 命令行工具 $ brew install graphviz Atom 插件插件 graphviz-preview dot 预览插件，ctrl-d language-dot dot 编辑插件 graphviz-preview-plus dot 预览插件，ctrl-shift-v 后缀用 .dot mac 安装 GUI 工具 只能查看，不能编辑 Install Graphviz on Mac OSX 安装 macports source ~/.bash_profile sudo port install graphviz-gui Web 显示 Graphviz 文件转成 svg 文件，再显示 GraphvizOnline 在线显示 Graphviz 语法 3种元素 图 graph 顶点 node 边 edge graph 分类 graph 无向图，线上无箭头 digraph 有向图，线上无箭头 subgraph 子图 属性 参考 Node, Edge and Graph Attributes shap 形状，Node Shapes eg：box，record rankdir 箭头方向，eg：LR、TB style 样式，eg：filled color 颜色 fillcolor image label other 子图的名称必须以 cluster 开头 布局 dot 默认布局方式，主要用于有向图 neato 基于spring-model(又称force-based)算法 twopi 径向布局 circo 圆环布局 fdp 用于无向图 Reference http://blog.csdn.net/zhangskd/article/details/8250470 使用graphviz绘制流程图（2015版） "},"util/openssl.html":{"url":"util/openssl.html","title":"OpenSSL","keywords":"","body":"OpenSSL Questions Q1 A CA file has been bootstrapped using certificates from the SystemRoots keychain. To add additional certificates (e.g. the certificates added in the System keychain), place .pem files in /usr/local/etc/openssl/certs and run /usr/local/opt/openssl/bin/c_rehash This formula is keg-only, which means it was not symlinked into /usr/local. Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries If you need to have this software first in your PATH run: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile For compilers to find this software you may need to set: LDFLAGS: -L/usr/local/opt/openssl/lib CPPFLAGS: -I/usr/local/opt/openssl/include For pkg-config to find this software you may need to set: PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig Answer: brew unlink openssl brew install --force openssl brew link openssl "},"util/other.html":{"url":"util/other.html","title":"其它工具","keywords":"","body":"其它工具 JSON在线编辑器: http://jsoneditoronline.org/ http://www.jsonohyeah.com/ 生成短链接 http://dwz.wailian.work/ 二维码生成 http://cli.im/text/ Dash http://xclient.info/s/dash.html 安装包解压密码 xclient.info 安装 Dash 打开 Dash Dash > Preference > Purchase > ..... > 选择 license.dash-license "},"util/free-ssl.html":{"url":"util/free-ssl.html","title":"免费 ssl","keywords":"","body":"免费 ssl Let's Encrypt 官网 GitHub 文档 startssl https://www.startssl.com/ Class 1 Domain Validation SSL Certificate 5 domains 1 year, unlimited 免费一年 sslforfree https://www.sslforfree.com CloudFlare https://www.cloudflare.com/ssl/ 沃通 https://buy.wosign.com/ "},"util/smarty.html":{"url":"util/smarty.html","title":"Smarty","keywords":"","body":"Smarty Smarty是一个PHP的模板引擎，提供让程序逻辑与页面显示（HTML/CSS）代码分离的功能。 也就是PHP代码是程序逻辑，与页面显示分开。 官网 官方文档 GitHub "},"util/lottie.html":{"url":"util/lottie.html","title":"Lottie","keywords":"","body":"Lottie 设计师会用 Adobe 旗下的 After Effects （简称 AE）来做个动画出来,之后 AE 上有一款插件叫做 Bodymovin，这个插件也比较屌，可以直接根据 AE 上的动画文件导出 json 文件,之后我们在项目中引用 Lottie 开源库，在布局文件中简单的加上这么一句就完美的实现了。 References 这个项目碉堡了 Android: https://github.com/airbnb/lottie-android iOS: https://github.com/airbnb/lottie-ios ReactNative: https://github.com/airbnb/lottie-react-native "},"util/mermaid.html":{"url":"util/mermaid.html","title":"mermaid","keywords":"","body":"mermaid Github 文档 在线编辑器 Atom安装mermaid插件 安装 $ npm install mermaid -g 使用 mermaid CLI http://knsv.github.io/mermaid/ 搜索mermaid CLI 先安装phantomjs $ npm install -g phantomjs@1.9 生成图片 $ mermaid test.mmd code http://knsv.github.io/mermaid/ 搜索Flowcharts - Basic Syntax graph 流程图 sequenceDiagram 时序图 Gant diagrams 甘特图 Test {% mermaid src=\"Resource/test.mmd\" %} {% endmermaid %} "},"util/arcanist.html":{"url":"util/arcanist.html","title":"arcanist","keywords":"","body":"arcanist arc 全称是 arcanist，百度给出的中文翻译是：巧匠。 arc 是Facebook的Phabricator系统中用户端的命令行工具，配合pha提交变更评审的。 使用 # 切换要开发的分支 git checkout develop # 创建临时分支 git checkout -b temp-branch # 修改代码 git add . --all git commit -m \"commit log\" # 创建 revision，等待 review arc diff develop # 如果有问题重新修改再 commit, arc diff # acceped 之后上传代码 arc land --onto develop # if 有冲突 git checkout develop git pull origin develop git checkout dev-android git rebase develop git status # 如果有冲突，处理冲突 git mergetool --tool=opendiff git rebase --continue # 提交代码，并删除临时分支 arc land --onto develop References git与phabricator Arcanist User Guide GitHub "},"util/Gnuplot.html":{"url":"util/Gnuplot.html","title":"Gnuplot","keywords":"","body":"Gnuplot 行的交互式绘图工具,画2维3维图 官网 http://www.gnuplot.info/ 文档 http://www.gnuplot.info/documentation.html 安装 $ brew install gnuplot Atom插件 language-gnuplot-atom 语法高亮 Script 执行脚本 文件后缀名用.plt，这样两个插件都支持 # "},"react-native/":{"url":"react-native/","title":"react-native","keywords":"","body":"react-native GitHub 文档 中文文档 开发环境 只能在 Mac 下开发，所以 Windows 需要用 VMWare 安装 mac OS. 新建工程 react-native-cli Use yarn when available new react-native - uses yarn To run your app on iOS: cd /Users/Bell/react-native/ytest react-native run-ios - or - Open /Users/Bell/react-native/ytest/ios/ytest.xcodeproj in Xcode Hit the Run button To run your app on Android: Have an Android emulator running (quickest way to get started), or a device connected cd /Users/Bell/react-native/ytest react-native run-android IDE 推荐用 WebStorm。 File->Settings->Languages&Frameworks->JavaScript JavaScript language version选择JSX Harmony Using External tools: ESLint autofix and React Native 热更新 CodePush 布局 FLex css3 新属性 框架 Flux 单向数据流动,即永远只有从模型到视图的数据流动 Redux 由 Flux 演变而来，后来受 Elm 启发，去掉了 Flux 的复杂性 Redux 中文文档 Issue ListView渲染问题 异常收集 sentry for react native bugsnag for react native Add Crashlytics to your React Native iOS app CLS_LOG 在崩溃的时候把 console 日志显示出来 react-native-fabric-crashlytics 利用 Crashlytics 记录 js 异常信息 生成 source map react-native bundle --platform ios --entry-file index.ios.js --dev false --bundle-output ./ios/main.jsbundle --assets-dest ./ios --sourcemap-output ./ios/sourcemap.js 源码分析 Android React Native与Android原生通信交互详情 React Native Android 从学车到补胎和成功发车经历 React Native Android 源码框架浅析（主流程及 Java 与 JS 双边通信） ReactNative Android源码分析 React Native通讯原理 iOS ReactNative iOS源码解析（一） ReactNative iOS源码解析（二） Talk about ReactNative Image Component "},"react-native/native-modules-advanced.html":{"url":"react-native/native-modules-advanced.html","title":"原生模块高级篇","keywords":"","body":"原生模块高级篇 原生模块高级篇 UI 模块直接加到父级组件上 UI 模块不是直接加到父级组件上 iOS Android 原生模块集成 CocoaPods UI 模块直接加到父级组件上 // TODO UI 模块不是直接加到父级组件上 iOS 参考 react native 的 Modal 组件，Modal 实现方式是加载的时候 present 一个 controller，所有 subview 都加到 controller.view 上，移除的时候 dismiss controller。 这种情况需要修改 view 的如下方法 didMoveToWindow 参考 RCTModalHostView.didMoveToWindow，self.window 不为空的时候自定义加载操作 didMoveToSuperview 参考 RCTModalHostView.didMoveToSuperview，self.superview 为空的时候自定义移除操作 insertReactSubview:atIndex: 自定义 subview 加载到 view removeReactSubview: 自定义 subview 从 view 移除 由于 UI 模块的加载和移除方式都已自定义，所以需要实现 RCTInvalidating 协议的 invalidate 方法，实现 UI 模块从从父组件移除的处理。实现过程如下： Manager.view 参考 RCTModalHostViewManager.view 把所有 view 缓存到一个 NSHashTable Manager.invalidate 参考 RCTModalHostViewManager.invalidate 调用所有 view 的 invalidate 方法 View.invalidate 参考 RCTModalHostView.invalidate 实现从父组件移除 由于自定义了加载过程，所以所有 subview 的手势不会传递到 reactRootView，JS 就监听不到 subview 的动作。这个时候需要用上 RCTTouchHandler ，使用方法参考 RCTModalHostView ： initWithBridge: 调用 _touchHandler = [[RCTTouchHandler alloc] initWithBridge:bridge]; 创建 _touchHandler insertReactSubview:atIndex 调用 [_touchHandler attachToView:subview]; subview 添加手势 removeReactSubview: 调用 [_touchHandler detachFromView:subview]; 移除 subview 的手势 Android // TODO 原生模块集成 CocoaPods target 名必须和 project 名一致，否则 link 的时候会报 Error: Cannot read property 'match' of undefined 参考 https://github.com/Microsoft/react-native-code-push/issues/1085#issuecomment-346389824 "},"react-native/native-modules.html":{"url":"react-native/native-modules.html","title":"原生模块基础篇","keywords":"","body":"原生模块基础篇 原生模块基础篇 创建原生库 手动创建原生库 创建 Example 工程 创建 iOS 原生模块 创建 Android 原生模块 Questions Link Link 方法一 Link 方法二 (推荐) Link 方法三 react-native-create-library 创建原生模块 安装 使用 Questions References react-native-create-bridge 创建原生模块 (不推荐) References iOS 原生模块 UI 库 Module 给Javascript发送事件 添加 cocoapods 依赖 注意事项 References Android 原生模块 普通模块 ViewManager 创建 UI 组件 Package 注册模块、UI 组件 发送事件到JavaScript 添加 Maven 依赖 References 创建原生库 可以手动一步一步创建原生库，也可以直接使用工具 手动创建原生库 创建 Example 工程 cd npm init mkdir ios mkdir android 创建 Example 工程 react-native init Example cd /Example npm install 创建 iOS 原生模块 cd /Example 创建原生模块 react-native new-library --name RNExampleModule 拷贝文件到 ios 目录 cp -a Libraries/RNExampleModule/*.{h,m,xcodeproj} ../ios/ cp Libraries/RNExampleModule/*.js ../ 删除临时文件 rm -rf Libraries/RNExampleModule 创建 Android 原生模块 cd /Example 打开 Example Android 工程 studio android 创建模块 File > New > New Module > 选择 Android Library > Next > Application/Library Name 输入模块名:Example Module， Module name 输入模块名:react-native-example-module， Package name 输入包名:im.shimo.baidumjt， Minimum SDK:API 16 > Finish build.gradle 做如下修改 由于 RN 用的老版本的 Gradle，不支持最新的语法。所以 build.gradle 中的 implementation api 要换成 compile， compileSdkVersion 26 buildToolsVersion \"26.0.2\" dependencies 添加 compile 'com.facebook.react:react-native:+' 创建基础的 Module 和 Package 文件。必须要有，否则 link 找不到模块。 拷贝 Android 模块到 android 目录 cp -a android/react-native-example-module/* ../android AndroidStudio 按下面步骤删除刚创建的模块： File > Project Structure > 选择 react-native-example-module，点上面的 - 号 删除临时文件 rm -rf android/react-native-example-module Questions Q: Could not find common.jar 修改 Gradle Scripts --->build.gradle(Project:项目名)--->allprojects｛｝如下： repositories { maven{url\"https://maven.google.com\"} jcenter() maven{url 'https://jitpack.io'} } Link 原生模块 link 到 Example 工程。 Link 方法一 适用于 npm5 以下 cd /Example package.json 的 dependencies 添加 \"react-native-example-module\": \"../\" npm install 安装原生库到 Example 工程 react-native link 然后在 node_modules/react-native-example-module/ 目录下写原生库代码 写好后再拷贝到工程目录 cp -a node_modules/react-native-example-module/ios/* ../ios/ cp -a node_modules/react-native-example-module/android/* ../android/ cp node_modules/react-native-example-module/*.js ../ Link 方法二 (推荐) 适用于 npm5 及以上 cd /Example npm i ../ react-native link 由于 Example 工程依赖的 react-native-example-module 用的软链接，在上级目录下，所以 Xcode 的 Header Search Paths 需要添加 $(SRCROOT)/../Example/node_modules/react-native/React non-recursive 之后就可以直接在 Example 工程中写原生模块了，相比方法一，不用移动代码。 [有可能会报下面的错]： error: bundling failed: \"Unable to resolve module react 是因为运行 npm i ../ 会创建从 ../ 到 node_modules/react-native-example-module/ 的软链接。react 查找路径有可能会出错，需要在 目录安装 react cd npm i --no-save react@16.2.0 Link 方法三 参考 manual-linking 手动添加依赖 Header Search Paths 添加 $(SRCROOT)/../../ios non-recursive 然后直接在 Example 中写原生库 react-native-create-library 创建原生模块 安装 npm install -g react-native-create-library 使用 以创建 react-native-key-command 模块为例 创建原生模块 react-native-create-library --package-identifier im.shimo.keycommand --platforms ios,android KeyCommand mv KeyCommand react-native-key-command 创建 Example 工程 cd react-native-key-command react-native init Example cd Example npm install 安装 react-native-key-command 到 Example 工程，参考 Link 方法二 (推荐) Questions 模块的 AndroidManifest.xml 会报 URI is not registered 错误 试了很多方法，都修不了，但是不影响使用 References react-native-create-library react-native-create-bridge 创建原生模块 (不推荐) 生成的原生模块直接在 RN 主工程里面，不是主工程通过 npm 方式引入。不推荐 References react-native-create-bridge iOS 原生模块 UI 库 类名就是 Javascript 中访问的名字 Module 定义个实现 RCTBridgeModule 协议的 Manager Manager 用宏 RCT_EXPORT_MODULE() 添加一个参数用来指定在Javascript中访问这个模块的名字 Manager 用宏 RCT_EXPORT_METHOD() 声明要给Javascript导出的方法 - (NSDictionary *)constantsToExport 导出常量 给Javascript发送事件 iOS 给Javascript发送事件 添加 cocoapods 依赖 先生成 xcodeproj 工程 pod try AFNetworking [注意] 并不是对所有 cocoapods 库都支持 pod try 再把依赖工程导入主工程，然后写 Module 注意事项 回调必须要以 on 开头 References 如何封装原生模块的高级向导 ReactNative之原生模块开发并发布——iOS篇 Android 原生模块 普通模块 为 js 提供方法 定义继承 ReactContextBaseJavaModule 的 Module 类 定义模块名 @Override public String getName() { return \"ToastAndroid\"; } 添加属性 @ReactProp 或 @ReactPropGroup 添加方法 @ReactMethod public void show(String message, int duration) { Toast.makeText(getReactApplicationContext(), message, duration).show(); } 方法中的参数和返回传不能用 Map，需要用 ReadableMap 或者 WritableMap： WritableMap 一般是用于从原生传给 RN 的数据。接口，对应实现 ReadableNativeMap ReadableMap 一般是用于 RN 传向原生的数据。接口，对应实现 WritableNativeMap 导出常量 /** * @return a map of constants this module exports to JS. Supports JSON types. */ public @Nullable Map getConstants() { return null; } ViewManager 创建 UI 组件 为 js 提供组件，管理组件，ReactShadowNode 管理组件属性 createViewInstance 创建视图 @ReactProp @ReactPropGroup 导出视图属性的设置方法 Package 注册模块、UI 组件 定义实际接口 ReactPackage 的 Package 类 createNativeModules 方法中添加 Module @Override public List createNativeModules( ReactApplicationContext reactContext) { List modules = new ArrayList<>(); modules.add(new ToastModule(reactContext)); return modules; } createViewManagers 方法添加 UI 组件 @Override public List createViewManagers( ReactApplicationContext reactContext) { return Arrays.asList( new ReactImageManager() ); } ReactShadowNode 添加修改布局的方法 MainApplication.java 中添加 Package protected List getPackages() { return Arrays.asList( new MainReactPackage(), new AnExampleReactPackage()); // 发送事件到JavaScript Android 发送事件到JavaScript RN JS 层通过 NativeEventEmitter 接收原生事件 添加 Maven 依赖 build.gradle 中添加 Maven 依赖，再写 Module ViewManager Package 就可以了 References ReactNative之原生模块开发并发布——android篇 React-Native的Native UI Components整理 React Native 封装Android UI组件 "},"react-native/status-bar.html":{"url":"react-native/status-bar.html","title":"修改状态栏","keywords":"","body":"修改状态栏 StatusBar react native 自带的 StatusBar 设置侵透模式只支持 21 以下 深色模式只支持 23 以上，而且在 小米上无效 "},"react-native/debug.html":{"url":"react-native/debug.html","title":"调试","keywords":"","body":"调试 React Native调试技巧与心得 打开 http://localhost:8081/debugger-ui 开始调试 工具 reactotron react-native-debugger 打印日志 iOS Debug 环境只打印在浏览器 console，Release 环境可以打印到 Xcode Console Android 可以直接在 Android Studio 的 logcat 查看 React Native 远程调试实现原理 RN $ npm star node node_modules/react-native/local-cli/cli.js start react-native/local-cli/server/runServer.js 启动 WebSocket 服务 react-native/local-cli/server/util/debugger-ui/index.html connectToDebuggerProxy 创建调试 WebSocket 服务 const ws = new WebSocket('ws://' + window.location.host + '/debugger-proxy?role=debugger&name=Chrome'); RN rxjs/src/observable/dom/WebSocketSubject.ts 启动 ws://localhost:8081 websocket 服务 RCTWebSocketExecutor iOS 连接 DevSupport 模块 RCTInspectorDevServerHelper 的 + (void)connectForContext:withBundleURL 方法 http://localhost:8081/index.ios.bundle?platform=ios&dev=true&minify=false Inspector 模块 RCTInspectorPackagerConnection 的 - (void)connect 方法， 创建 RCTSRWebSocket 连接 ws://127.0.0.1:9101/devtools/page/4 RCTWebSocketExecutor setUp http://localhost:8081/debugger-proxy?role=client /launch-js-devtools -- http://localhost:8081/debugger-proxy?role=client RCT_ENABLE_INSPECTOR "},"react-native/network.html":{"url":"react-native/network.html","title":"React Native Network 实现过程","keywords":"","body":"React Native Network 实现过程 Network XMLHttpRequest RCTNetworking.mm 实现原生的网络请求 RCTNetworking.ios.js 实现 JS 调用的 RCTNetworking XMLHttpRequest.js 实现 JS 调用的 XMLHttpRequest fetch whatwg-fetch.js 使用 XMLHttpRequest 实现 fetch fetch.js 申明 fetch 模块 module.exports = {fetch, Headers, Request, Response}; setUpXHR.js 把 fetch 注册到 JS 全局环境 polyfillGlobal('fetch', () => require('fetch').fetch); "},"react-native/build-from-source.html":{"url":"react-native/build-from-source.html","title":"使用源码编译","keywords":"","body":"使用源码编译 Android fort react-native，然后 checkout fork 后仓库的代码。运行如下的命令 # 安装 npm 依赖 npm i # 编译 ./gradlew :ReactAndroid:build -x test -x lint # 生成 maven 包到 android 目录 ./gradlew :ReactAndroid:installArchives -x test -x lint 把 android 从 .gitignore 去掉，再 push 到仓库 参考 shimo-react-native/react-native Questions react native 指向了 0.20.1 版 因为本地库 $rootDir/../node_modules/react-native/android 没有找到 react-native jar 包，所以使用了 jCenter 上的最新包，也就是 0.20.1 版。 "},"react-native/js-bridge.html":{"url":"react-native/js-bridge.html","title":"RN JS Bridge 过程","keywords":"","body":"RN JS Bridge 过程 RN JS Bridge 过程 JS 端 iOS 端 JS > Native 注册 JS 调用的 Native 方法 JS 调用 Native 方法 Native > JS 注册 Native 调用的 JS 方法 Native 调用 JS 方法 JS 端 BatchedBridge iOS 端 JS > Native 注册 JS 调用的 Native 方法 满足 RCTBridgeModule 协议的类得到 RCTMethodInfo RCTMethodInfo > RCTModuleMethod RCTModuleData 包含 moduleName 和 NSArray> *methods JS 调用 Native 方法 Native > JS 注册 Native 调用的 JS 方法 EventEmitter.js emit(eventType: string){} Native 调用 JS 方法 [_bridge enqueueJSCall:@\"RCTDeviceEventEmitter\" method:@\"emit\" args:body ? @[eventName, body] : @[eventName] completion:NULL]; "},"react-native/appium.html":{"url":"react-native/appium.html","title":"react native 使用 appium","keywords":"","body":"react native 使用 appium react native 使用 appium Appium React Native iOS Android 神策： iOS Android 结论 References Appium 参考 Find Elements Appium 通过 AccessibilityId 找到元素 List elementsOne = (MobileElement) driver.findElementsByAccessibilityId(\"SomeAccessibilityID\"); Accessibility ID: iOS 对应 accessibilityIdentifier Android 对应 ContentDescription React Native 使用 RN View 的 testID 或者 accessibilityLabel iOS accessibilityLabel 对应 accessibilityLabel testID 对应 accessibilityIdentifier RCTViewManager.m: RCT_REMAP_VIEW_PROPERTY(accessibilityLabel, reactAccessibilityElement.accessibilityLabel, NSString) RCT_REMAP_VIEW_PROPERTY(testID, reactAccessibilityElement.accessibilityIdentifier, NSString) Android accessibilityLabel 对应 ContentDescription testID 对应 Tag BaseViewManager.java: private static final String PROP_ACCESSIBILITY_LABEL = \"accessibilityLabel\"; public static final String PROP_TEST_ID = \"testID\"; @ReactProp(name = PROP_ACCESSIBILITY_LABEL) public void setAccessibilityLabel(T view, String accessibilityLabel) { view.setContentDescription(accessibilityLabel); } @ReactProp(name = PROP_TEST_ID) public void setTestId(T view, String testId) { view.setTag(R.id.react_test_id, testId); // temporarily set the tag and keyed tags to avoid end to end test regressions view.setTag(testId); } 神策： iOS $element_content 对应 accessibilityLabel [properties setValue:[uiView.accessibilityLabel stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] forKey:@\"$element_content\"]; Android $element_content 对应 getText 结论 Platform System React Native JS testID accessibilityLabel React Native iOS accessibilityIdentifier accessibilityLabel React Native Android Tag ContentDescription Appium iOS AccessibilityId - Appium Android - AccessibilityId 所以 Appium 在 React Native 中使用 AccessibilityId，必须同时设置 React Native 的 testID 和 accessibilityLabel 为同一值 References Is there any UI testing framework for React Native apps? Finding elements by Accessibility ID appium App 测试 Selenium Web 测试 Cavy react native 测试，react 方式获取 ref https://github.com/facebook/react-native/pull/9942 appium 支持 react native 的讨论 Appium + React Native Quickstart "},"react-native/image.html":{"url":"react-native/image.html","title":"Image 分析","keywords":"","body":"Image 分析 Android ReactImageView "},"react-native/usage.html":{"url":"react-native/usage.html","title":"使用","keywords":"","body":"使用 props 和 state props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state。 Modal react native 自带的 Modal iOS present 原理：取 Modal 父组件所属的 ViewController present ModalViewController。 "},"react-native/pasteboard.html":{"url":"react-native/pasteboard.html","title":"# Android","keywords":"","body":"Android ClipboardManager clipboard = getClipboardService(); // 不管粘贴板内容有没有变，内存地址都变化 ClipData clipData = clipboard.getPrimaryClip(); // 粘贴板内容复制时间，每次复制都不一样，可以当唯一 ID // API 26 支持 long timestamp = clipData.getDescription().getTimestamp(); ClipData.Item firstItem = clipboard.getPrimaryClip().getItemAt(0); // 粘贴板字符串 firstItem.getText() References Copy and Paste Android 剪贴板详解 iOS // 不管粘贴板内容有没有变，内存地址都不变 UIPasteboard *clipboard = [UIPasteboard generalPasteboard]; // 粘贴板字符串 NSString string = clipboard.string; // 粘贴板计算，每复制一次次数加1，可以当唯一 ID NSInteger changeCount = clipboard.changeCount; "},"react-native/pull-to-refresh.html":{"url":"react-native/pull-to-refresh.html","title":"下拉刷新","keywords":"","body":"下拉刷新 React Native 之封装Android 的ViewGroup "},"react-native/component-to-native.html":{"url":"react-native/component-to-native.html","title":"RN Compoent 转 Native","keywords":"","body":"RN Compoent 转 Native RN Compoent 转 Native RN AppContainer AppRegistry registerComponent runApplication unmountApplicationComponentAtRootTag iOS RCTBridge RCTRootView 过程 Android ReactRootView 原生直接调用 RN 的 JS 方法 References RN AppContainer ? AppRegistry registerComponent /** 注册组件 从组件的 props 获取 runApplication 传过来的参数。 @param appKey 组件 Key @param componentProvider 组件 Class */ static registerComponent(appKey, componentProvider, section?) 原生可能通过 appKey 得到相应原生 View runApplication /* 启动 appKey 对应的组件 @param appKey 组件 Key @param appParameters 传给组件的参数 */ static runApplication(appKey, appParameters) 原生的 RCTRootView 在加载成功后会调用 unmountApplicationComponentAtRootTag // 注销已经启动的组件 static unmountApplicationComponentAtRootTag(rootTag) 原生的 RCTRootContentView 在注销时会调用 iOS RCTBridge 实现部分大部分在 RCTCxxBridge /** 初始化 RCTBridge 这里会初始化所有原生模块。 @param delegate 获取 bundleURL 的代理 @param launchOptionslaunchOptions 启动参数 */ - (instancetype)initWithDelegate:(id)delegate launchOptions:(NSDictionary *)launchOptions; /** 初始化 RCTBridge 【弃用】 这里会初始化所有原生模块。 @param bundleURL bundle 包 @param launchOptionslaunchOptions 启动参数 */ - (instancetype)initWithBundleURL:(NSURL *)bundleURL moduleProvider:(RCTBridgeModuleListProvider)block launchOptions:(NSDictionary *)launchOptions; /** 异步调用原生模块提供的方法 通过回调获取结果 */ - (void)enqueueJSCall:(NSString *)module method:(NSString *)method args:(NSArray *)args completion:(dispatch_block_t)completion; /** 同步执行原生模块里的方法 直接返回结果 */ - (JSValue *)callFunctionOnModule:(NSString *)module method:(NSString *)method arguments:(NSArray *)arguments error:(NSError **)error; RCTRootView // 对应 AppRegistry.registerComponent 的 appKey @property (nonatomic, copy, readonly) NSString *moduleName; // 初始化参数，最终会传给 AppRegistry.registerComponent 注册的组件 @property (nonatomic, copy, readwrite) NSDictionary *appProperties; // JS 加载阶段的 placeholder view，默认为 nil，可以\b设值 @property (nonatomic, strong) UIView *loadingView; // 隐藏 loadingView 的延时，默认 0.25 @property (nonatomic, assign) NSTimeInterval loadingViewFadeDelay; // 隐藏 loadingView 的持续时间，默认 0.25 @property (nonatomic, assign) NSTimeInterval loadingViewFadeDuration; /** 创建有多个 RootView 的工程时用下面的初始化方法 @param initialProperties 初始化参数，最终会传给 AppRegistry.registerComponent 注册的组件 */ - (instancetype)initWithBridge:(RCTBridge *)bridge moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties /** 创建只有一个 RootView 的工程时用下面的初始化方法 */ - (instancetype)initWithBundleURL:(NSURL *)bundleURL moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties launchOptions:(NSDictionary *)launchOptions RCTRootView 加载过程： RCTJavaScriptDidLoadNotification JS Bundle 下载成功 RCTBridgeDidDownloadScriptNotification JS 加载成功 RCTDidInitializeModuleNotification 每个原生模块加载成功 所有原生模块加载成功就可以当成功处理。 过程 RN AppRegistry.registerComponent 注册多个 Component 初始化唯一的 RCTBridge 初始\b化多个包含 RCTRootView 的 ViewController Android ReactRootView private void defaultJSEntryPoint() { // ... // 调用 JS 的 AppRegistry.runApplication 方法 catalystInstance.getJSModule(AppRegistry.class).runApplication(jsAppModuleName, appParams); } 原生直接调用 RN 的 JS 方法 RN 注册 Class.method 方法 const method = () => { // do some thing } BatchedBridge.registerCallableModule('Class', { method }); iOS 调用 RN 注册的 Class.method 方法 [bridge enqueueJSCall:@\"Class\" method:@\"method\" args:nil completion:nil]; Android 调用 RN 注册的 Class.method \b参考 https://github.com/facebook/react-native/blob/59aada873e13bf0b1f5e3a10cfe9a5a45c28f9fb/ReactAndroid/src/main/java/com/facebook/react/ReactRootView.java#L492 String jsAppModuleName = getJSModuleName(); catalystInstance.getJSModule(Class.class).method(jsAppModuleName, null); References AppRegistry "},"react-native/key-command.html":{"url":"react-native/key-command.html","title":"key command","keywords":"","body":"key command RCTKeyCommand "},"react-native/inderview.html":{"url":"react-native/inderview.html","title":"面试","keywords":"","body":"面试 fresco 配置 原生与 RN 间如何通信。 References React 常用面试题目与分析 "},"react-native/native-to-js.html":{"url":"react-native/native-to-js.html","title":"原生与 JS 交互","keywords":"","body":"原生与 JS 交互 事件 NativeEventEmitter "},"react-native/touch-event-and-gesture.html":{"url":"react-native/touch-event-and-gesture.html","title":"触摸事件和手势","keywords":"","body":"触摸事件和手势 触摸事件和手势 JS Android TouchEvent PanResponder iOS 关于sendInputEventWithName事件名自定义 References JS Event.target 点击的组件 reactTag Event.currentTarget 响应的组件 reactTag var { getInstanceFromNode, getFiberCurrentPropsFromNode } = require('ReactNativeComponentTree'); // 获取按钮 node var currentTargetNode = getInstanceFromNode(e.currentTarget); // 获取按钮 props var currentTargetProps = getFiberCurrentPropsFromNode(currentTargetNode.stateNode); Android TouchEvent public static TouchEvent obtain( int viewTag, TouchEventType touchEventType, MotionEvent motionEventToCopy, long gestureStartTime, float viewX, float viewY, TouchEventCoalescingKeyHelper touchEventCoalescingKeyHelper) viewTag 视图 ID touchEventType 触屏事件类型 motionEventToCopy 系统的 MotionEvent gestureStartTime 手势开始时间 viewX 当前X坐标 viewY 当前Y坐标 dispatchEvent 发送 TouchEvent 接收 TouchEvent BackHandler.addEventListener('hardwareBackPress', this._handleBackAction); PanResponder iOS 关于sendInputEventWithName事件名自定义 RCTDirectEventBlock:直接事件,这种事件类型作为不影响UI的一些事件，比如“图片加载失败”。 RCTBubblingEventBlock:冒泡事件,就和操作DOM一样，影响UI的事件，比如“点击按钮事件”。 References React-Native系列Android——Touch事件原理及状态效果 React Native 触摸事件处理详解 "},"react-native/upgrade-60.html":{"url":"react-native/upgrade-60.html","title":"升级 react native 到 0.60","keywords":"","body":"升级 react native 到 0.60 更新 react-native-cli 到 2.0 以上版本 npm install -g react-native-cli 自动更新 react-native upgrade 0.60.5 可能会出错，如果出错请参考 React Native upgrade guide 手动更新 React Native 去掉 NetInfo，改用 react-native-netinfo 去掉 Webview，改用 react-native-webview 去掉 ListView，可以用 deprecated-react-native-listview 去掉 SwipeableListView，可以用 deprecated-react-native-swipeablelistview iOS 依赖换成用 CocoaPods 管理 Build input file double-conversion cannot be found 参考 https://github.com/facebook/react-native/issues/21168#issuecomment-422431294 $ cd node_modules/react-native/scripts && ./ios-install-third-party.sh && cd ../../../ $ cd node_modules/react-native/third-party/glog-0.3.5/ && ../../scripts/ios-configure-glog.sh && cd ../../../../ Android AndroidX References Upgrading to new React Native versions Announcing React Native 0.60 React Native upgrade guide "},"react-native/native-modules-analyze.html":{"url":"react-native/native-modules-analyze.html","title":"原生模块分析","keywords":"","body":"原生模块分析 iOS 如何实现 RCTBridgeModule.h 中定义了 #define RCT_EXPORT_MODULE(js_name) \\ RCT_EXTERN void RCTRegisterModule(Class); \\ + (NSString *)moduleName { return @#js_name; } \\ + (void)load { RCTRegisterModule(self); } 模块 load 时调用 RCTRegisterModule(self) 注册模块 "},"react-native/comment.html":{"url":"react-native/comment.html","title":"组件","keywords":"","body":"组件 TextInput // 当文本框内容变化时调用此回调函数。 onChange function // 当文本框内容变化时调用此回调函数。改变后的文字内容会作为参数传递。 onChangeText function "},"react-native/upgrade-47.html":{"url":"react-native/upgrade-47.html","title":"升级 react native 到 0.47 遇到的问题","keywords":"","body":"升级 react native 到 0.47 遇到的问题 react-native upgrade Command /bin/sh failed with exit code 1 退出重新打开 Xcode 'boost/iterator/iterator_adaptor.hpp' file not found 参考 https://github.com/facebook/react-native/issues/14423 1. 从 https://sourceforge.net/projects/boost/files/boost/1.63.0/ 下载 boost_1_63_0.tar.gz 到 ~/.rncache/boost_1_63_0.tar.gz，如果存在就替换它 2. rm -rf node_modules 3. command + shift + K 4. command + B "},"react-native/yoga.html":{"url":"react-native/yoga.html","title":"Yoga 布局","keywords":"","body":"Yoga 布局 react native 使用 Yoga 实现跨平台布局，Yoga 基于 C，采用了 实现了Flexbox规范 GitHub "},"react-native/native-to-rn.html":{"url":"react-native/native-to-rn.html","title":"Native 调用 RN 组件","keywords":"","body":"Native 调用 RN 组件 实现过程 JS 注册所有组件 AppRegistry.registerComponent('name', () => Component); iOS 根据注册的组件生成 RCTRootView RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@\"name\" initialProperties:nil launchOptions:launchOptions]; 这样 Native 可以在任何地方使用任何 RN 组件 具体过程 JS Redux > JSCore > Native 利用原生模块实现 Native 与 RN 互相调用 RN 调原生 原生模块自定义的方法 RN 可以直接调用 原生调RN 方法一 iOS 利用 bridge 的 enqueueJSCall 方法 iOS in RCTBridge.h /** * This method is used to call functions in the JavaScript application context. * It is primarily intended for use by modules that require two-way communication * with the JavaScript code. Safe to call from any thread. */ - (void)enqueueJSCall:(NSString *)moduleDotMethod args:(NSArray *)args; - (void)enqueueJSCall:(NSString *)module method:(NSString *)method args:(NSArray *)args completion:(dispatch_block_t)completion; Android: 参考 https://stackoverflow.com/a/46035341/5266652 To call a JavaScript method from Java, do something like this: ReactInstanceManager reactInstanceManager = reactNativeHost.getReactInstanceManager(); ReactContext reactContext = reactInstanceManager.getCurrentReactContext(); CatalystInstance catalystInstance = reactContext.getCatalystInstance(); WritableNativeArray params = new WritableNativeArray(); params.pushString(\"Parameter 1\"); params.pushString(\"Parameter 3\"); catalystInstance.callFunction(\"JavaScriptVisibleToJava\", \"nameOfJsMethod\", params); The JavaScript method you want to call must be defined and made visible to Java: import BatchedBridge from \"react-native/Libraries/BatchedBridge/BatchedBridge\"; export class ExposedToJava { nameOfJsMethod(message) { alert(message); } } const exposedToJava = new ExposedToJava(); BatchedBridge.registerCallableModule(\"JavaScriptVisibleToJava\", exposedToJava); 方法二 直接使用事件 缺点，没有回调 "},"react-native/questions.html":{"url":"react-native/questions.html","title":"问题","keywords":"","body":"问题 cannot be cast to com.facebook.react.uimanager.ViewGroupmanager A: ViewManager 换成 ViewGroupManager 调试模式下 setTimeout 不会执行 A：RN Bug com.squareup.SocketRocket.NetworkThread (9): EXC_BAD_ACCESS (code=EXC_I386_GPFLT) 参考 https://react-native.canny.io/feature-requests/p/crash-in-rctsrwebsocketm URL 后面加上 &dev=false 或者合 https://github.com/facebook/react-native/commit/b00c77af8066cf74f05ccaca2b08c8952e1ae8a6 "},"react-native/font.html":{"url":"react-native/font.html","title":"字体","keywords":"","body":"字体 References React Native Custom Fonts iOS-动态下载所需的字体 动态下载苹果提供的多种中文字体 Downloadable Fonts Fonts in XML "},"react-native/layout.html":{"url":"react-native/layout.html","title":"界面布局","keywords":"","body":"界面布局 iOS RCTShadowView Android "},"python/":{"url":"python/","title":"Python","keywords":"","body":"Python 官网 Mac 自带 brew install python3 "},"python/pip.html":{"url":"python/pip.html","title":"pip","keywords":"","body":"pip python 依赖工具 文档 安装 参考 Installation wget https://bootstrap.pypa.io/get-pip.py python get-pip.py Questions Q1 InvalidSchema: Missing dependencies for SOCKS support. A1: 不能用 SOCKS 代理 ，关掉代理 Q2 OSError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/pip' A2: 无权限创建 无权限创建 文件夹，运行 sudo chmod a+w /Library/Python/2.7/site-packages "},"technology/":{"url":"technology/","title":"技术","keywords":"","body":"技术 node http://2014.jsconf.cn/slides/herman-taobaoweb/index.html#/69 reference 淘宝UED-midway https://github.com/lifesinger/blog/issues RESTful API 设计指南 "},"technology/fonte-end-back-end-separate.html":{"url":"technology/fonte-end-back-end-separate.html","title":"前后端分离","keywords":"","body":"前后端分离 基于NodeJS的全栈式开发 Web 研发模式演变 淘宝UED-前端技术 前后端分离的思考与实践1-6 结构图 ModelProxy--轻量级的接口配置建模框架 主要思路就是,后端提供 RESETfull api,前端通过 node.js 获取 JSON 数据，再输出 html 文件到浏览器。界面相关的逻辑都在 node.js 层实现。 框架 express 请求数据 request 多终端适配 基于前后端分离的多终端适配 User Agent 特征库和探测工具 ua-parser-js Router 根据 User Agent 选择对应的 Controller,然后用同一套 Model,渲染不同的 View. 模板引擎 artTemplate 日志 node-bunyan winston log4js-node morgan express默认 cookie & session cookie-parser express默认 express-session session-file-store 调试 debug express默认 "},"technology/compile.html":{"url":"technology/compile.html","title":"C 编译器的工作过程","keywords":"","body":"C 编译器的工作过程 编译器的工作过程 配置（configure）> 编译（Compilation） > 连接（Linking） 编译 源码转成二进制的机器码，生成后缀名为.lib和.a的文件 连接 把外部函数的代码（通常是后缀名为.lib和.a的文件），添加到可执行文件中 静态连接（static linking） 把外部函数库，拷贝到可执行文件中 动态连接（dynamic linking） 外部函数库不进入安装包 Linux平台是后缀名为.so的文件 Windows平台是.dll文件 Mac平台是.dylib文件 "},"technology/oop.html":{"url":"technology/oop.html","title":"面向对象编程","keywords":"","body":"面向对象编程 wiki 面向对象六大原则 面向对象程序设计（英语：Object-oriented programming，缩写：OOP） 特征 分享非面向对象程序前身语言 变量 程序 类与对象 类(Class) 对象(Object) 动态配置与消息传递机制 动态配置（dynamic dispatch）是指方法会随着实例动态的改变 消息传递机制（Message Passing）是指一个对象通过接受消息、处理消息、传出消息或使用其他类的方法来实现一定功能 封装性（Encapsulation） 继承（Inheritance） 多态（Polymorphism） 抽象性（Abstraction 原则 优化代码的第一步——单一职责原则 单一职责原则的英文名称是Single Responsibility Principle，简称SRP。它的定义是：就一个类而言，应该仅有一个引起它变化的原因。简单来说，一个类中应该是一组相关性很高的函数、数据的封装。 让程序更稳定、更灵活——开闭原则 开闭原则的英文全称是Open Close Principle，简称OCP。开闭原则的定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是，对于修改是封闭的。 构建扩展性更好的系统——里氏替换原则 里氏替换原则英文全称是Liskov Substitution Principle，简称LSP。只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常 让项目拥有变化的能力——依赖倒置原则 依赖倒置原则英文全称是Dependence Inversion Principle，简称DIP。 高层模块不应该依赖低层模块，两者都应该依赖其抽象； 抽象不应该依赖细节； 细节应该依赖抽象。 系统有更高的灵活性——接口隔离原则 接口隔离原则英文全称是InterfaceSegregation Principles，简称ISP。它的定义是：客户端不应该依赖它不需要的接口。 更好的可扩展性——迪米特原则 迪米特原则英文全称为Law of Demeter，简称LOD，也称为最少知识原则（Least Knowledge Principle）。一个对象应该对其他对象有最少的了解。 Bob大叔（Robert C Martin）在21世纪早期将单一职责、开闭原则、里氏替换、接口隔离以及依赖倒置（也称为依赖反转）5个原则定义为SOLID原则，指代了面向对象编程的5个基本原则。 在应用开发过程中，最难的不是完成应用的开发工作，而是在后续的升级、维护过程中让应用系统能够拥抱变化。拥抱变化也就意味着在满足需求且不破坏系统稳定性的前提下保持高可扩展性、高内聚、低耦合，在经历了各版本的变更之后依然保持清晰、灵活、稳定的系统架构。当然，这是一个比较理想的情况，但我们必须要朝着这个方向去努力，那么遵循面向对象六大原则就是我们走向灵活软件之路所迈出的第一步。 "},"technology/cookie.html":{"url":"technology/cookie.html","title":"cookie","keywords":"","body":"cookie HTTP cookies Document.cookie Questions Q1：本地前端调试远程接口，跨域无法读 cookie /etc/hosts 添加与接口地址顶级域名相同的二级域名对应 127.0.0.1，接口 cookie domain 设为 . "},"technology/auto-generate-summary.html":{"url":"technology/auto-generate-summary.html","title":"自动生成 SUMMARY.md","keywords":"","body":"自动生成 SUMMARY.md greed-summary https://github.com/greedlab/greed-summary 安装 $ gem install greed-summary 使用 $ greed-summary gitbook-summary https://github.com/imfly/gitbook-summary 安装 npm install -g gitbook-summary 使用 $ book sm g "},"technology/video.html":{"url":"technology/video.html","title":"视频技术","keywords":"","body":"视频技术 直播和点播分别是什么意思？ 点播：视频源已经事先存储于服务器之上的音视频文件，观众随时可以观看，类似优酷土豆、爱奇艺和腾讯视频。 推流：主播将本地视频源和音频源推送到服务器，在有些场景中也被称为“RTMP发布”。 直播：即直接观看主播实时推送过来的音视频数据，观众和视频源之间的时间延迟一般不会太长。 流媒体协议 RTSP RTSP（Real Time Streaming Protocol） 是一种双向实时数据传输协议，它允许客户端向服务器端发送请求，如回放、快进、倒退等操作。 RTMP RTMP(Real Time Messaging Protocol) 实时消息传送协议.是Adobe Systems公司为Flash播放器和服务器之间音频、视频和数据传输 开发的开放协议。 MMS MMS (Microsoft Media Server Protocol)，中文“微软媒体服务器协议”，用来访问并流式接收 Windows Media 服务器中 .asf 文件的一种协议。 HLS HLS(HTTP Live Streaming) 是苹果公司(Apple Inc.)实现的基于HTTP的流媒体传输协议，可实现流媒体的直播和点播 生产实际使用协议 其实行业内目前是点播采用HTTP flv基本就可以搞定了，还可以加上一些私有的头验证等。 而直播的话，大部分还是采用RTMP或者私有协议，原因是延时会比较小，RTMP本身也是为了直播设计的。 直播协议 RTMP、 HLS 推流协议 RTMP 点播格式 MP4、HLS和FLV 网页播放 原生 webview 播放 如果仅需要在移动设备的WebView上播放，我们可以选择使用html中嵌入hls播放。如下html能够在所有Safari或者安卓3.0以上的WebView上播放。这样就不需要使用第三方的播放器。 VideoJS 播放 如果我们要让我们的网页支持在所有浏览器上播放，我们就需要使用第三方的播放器。VideoJs是一个较好的播放器库，完全免费，不像JWPlayer一样需要付费才能使用一些高级功能。下面是一个播放的例子。你可以将source标签下的src换成你自己的直播流地址。需要注意的是rtmp流的type是rtmp/flv（flv 跟推流的时候FFmpegFrameRecorder设置的format有关）, hls 的type是application/x-mpegURL。 康康的直播间 To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video Reference 视频直播解决方案-搭建你自己的直播平台 在各端实现Rtmp和hls视频流的播放 视频播放相关的网络协议有哪些？ nginx-rtmp-module 支持 RTMP 和 HLS nginx-vod-module vod "},"technology/json.html":{"url":"technology/json.html","title":"JSON","keywords":"","body":"JSON Introducing JSON "},"technology/cross-origin.html":{"url":"technology/cross-origin.html","title":"跨域","keywords":"","body":"跨域 同源策略， 即JavaScript或Cookie只能访问同域下的内容 解决跨域方法 JSONP Jsonp(JSON with Padding) 是 json 的一种\"使用模式\"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。 缺点 只能是get形式，承载的信息量有限 CORS 跨域资源共享，Cross-Origin Resource Sharing HTTP访问控制(CORS) 缺点 老版本浏览器不支持 node.js 实现 cors koa-cors "},"technology/upload-file.html":{"url":"technology/upload-file.html","title":"上传文件","keywords":"","body":"上传文件 Multipart/form-data POST文件上传 rfc2388 curl 上传文件 参考 http://charlee.li/upload-with-curl.html 参考 $ man curl 如果使用了-F参数，curl就会以 multipart/form-data 的方式发送POST请求。 -F key=@file 上传文件。key=value 上传字符串 curl -F 'file=@\"localfile\";filename=\"nameinpost\"' url.com node.js 上传文件服务 multer koa-multer ajax 上传文件 参考 http://yunzhu.iteye.com/blog/2177923 使用FormData对象 "},"technology/Ajax.html":{"url":"technology/Ajax.html","title":"Ajax","keywords":"","body":"Ajax 缺点 移动端下的白屏 SEO 蜘蛛只能抓取a标签中的href 蜘蛛不会执行JavaScript 蜘蛛只能抓到get请求的页面 不会抓到post请求的页面 SEO 现在解决方案已经很多了，所以基本不是什么问题，基本上就是检测如果当爬虫来的时候url会被改变，然后nginx给转到另外一个静态生成的页面那里去。所以不会太大问题吧 跨域 JSONP 或者 CORS 实现， 带Cookie的跨域Ajax请求 客户端 $.ajax({ url : 'http://remote.domain.com/corsrequest', data : data, dataType: 'json', type : 'POST', xhrFields: { withCredentials: true }, crossDomain: true, contentType: \"application/json\", ... 通过设置 withCredentials: true ，发送Ajax时，Request header中便会带上 Cookie 信息。 服务端 app.use(cors({credentials: true})); Access-Control-Allow-Credentials 设为 true Reference 鱼和熊掌兼得--既实现AJAX又实现SEO "},"technology/api-doc.html":{"url":"technology/api-doc.html","title":"API 文档","keywords":"","body":"API 文档 RAP 文档只有请求参数和返回数据 Mock api-blueprint "},"technology/programming-ideas.html":{"url":"technology/programming-ideas.html","title":"编程思想","keywords":"","body":"编程思想 编程思想 面向过程 面向对象 链式编程思想 响应式编程思想 函数式编程思想 Redux Actions 操作 Reducers 处理 store 存储 References 最快让你上手ReactiveCocoa之基础篇 "},"technology/hybrid-app.html":{"url":"technology/hybrid-app.html","title":"混合 App","keywords":"","body":"混合 App Web 与 原生交互 混合 App 通过 JS 与原生交互 缺点 UIWebView JS 调 OC OC 调 UIWebView JS WKWebview JS 调 OC OC 调 WKWebview JS Android 第三方实现 通过 URL 与原生交互 优点 缺点 Android iOS UIWebView iOS WKWebView 通过 XHR/Ajax 与原生交互 优点 缺点 Android References iOS References Cordova 使用方法 UI 库 存储 热更新 第三方引擎 iOS Android 基于chrome webkit的crosswalk WebView X5内核的WebView References Other References 通过 JS 与原生交互 缺点 同步，会阻塞线程 UIWebView JS 调 OC UIWebView JavaScriptCore OC 调 UIWebView JS stringByEvaluatingJavaScriptFromString WKWebview JS 调 OC window.webkit.messageHandlers..postMessage() OC 调 WKWebview JS [_webView evaluateJavaScript:source completionHandler:nil]; callWithArguments Android 4.2 以下 addJavascriptInterface 有安全隐患 参考 JS与WebView交互存在的一些问题 Android WebView调用JS Android 4.4 中 WebView 使用注意事项 第三方实现 Android JsBridge 自定义 window.WebViewJavascriptBridge 方式实现 iOS WebViewJavascriptBridge iframe 中 https://__bridge_loaded__ 实现 JsBridge 和 WebViewJavascriptBridge 实现的原理: Web > 原生： 原生监听 URL > Web 请求对应 URL，并定义唯一ID，监听对应ID的响应 > 原生收到 URL 后，做相应响应发起对应唯一ID的 URL 请求 > Web 响应回调 原生 > Web: Web 监听 URL > 原生 请求对应 URL，并定义唯一ID，监听对应ID的响应 > Web 收到请求后，做相应响应发起对应唯一ID的 URL 回调 > 原生 响应回调 通过 URL 与原生交互 优点 相比 JS 调 原生，全平台统一 无回调，没有阻塞线程问题 缺点 只适用于 Web 调 原生 所有跳转都会判断是否满足要求 不支持链接会 404 没有回调 Android 在该方法替换返回数据 @Override publicboolean shouldOverrideUrlLoading(WebView view,String url) iOS UIWebView - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType; iOS WKWebView - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler; 通过 XHR/Ajax 与原生交互 最好用自定义 scheme 的方式处理 优点 相比 URL 会引起页面刷新 相比 URL 有回调 相比 JS 异步、接口统一 缺点 只适用于 Web 调 原生 Android 没有办法再shouldOverrinding中拦截并用webView.loadUrl(String url,HashMap headers)方法添加请求头 一个临时的办法解决： 首先需要在url中加特殊标记/协议, 如在onWebViewResource方法中拦截对应的请求，然后将要添加的请求头，以get形式拼接到url末尾 在shouldInterceptRequest()方法中,可以拦截到所有的网页中资源请求，比如加载JS，图片以及Ajax请求等等 References Android WebView常见问题及解决方案汇总 Android中WebView中拦截所有请求并替换URL iOS 使用 NSURLProtocol 实现 参考 iOS WebView使用Ajax与iOS的交互 NSURLProtocol-WebKitSupport 让 WKWebView 支持 NSURLProtocol References android webview中js异步调用native接口实现 Cordova 使用方法 Cross-platform(CLI) workflow : CLI是一个High-Level的工具，可以允许你在多个平台上只建立一次工程。 Platform-centered workflow : 以Native为中心，使用WebView的形式嵌入。 UI 库 使用基于 VUE 的 UI 库 Vux Mint UI framework7-vue Onsen UI for Vue 2 可以结合一起用，取长补短 使用 基于 AngularJS 的 UI 库 Ionic Ionic Github 存储 数据少时用 localstorage，数据多时用 SQLite cordova Storage ionic SQLite Cordova-sqlite-storage 热更新 cordova-hot-code-push 热更新插件 ordova-hot-code-push-cli cordova-hot-code-push 命令行工具, 热更新服务器 cordova-app-loader 热更新插件-只更新修改部分 这种方式热更新不会被苹果拒 第三方引擎 iOS 苹果不让用 Android 4.4 以下 WebView 用的 WebKit 内核，性能很差 基于chrome webkit的crosswalk WebView 性能最好，但是太大 X5内核的WebView 官网 不过我建议使用腾讯的X5内核，我项目目前在使用，腾讯浏览服务，你不用把整个内核集成到你的APP去，而是如果你的手机有安装手机QQ或者微信，它就会自行调用他们的内核，另外现在还提供下载内核的功能。项目使用以来没有出现什么大问题，平稳使用中。 18.请问下x5中js调用android怎么实现？ 跟系统内核下一样，都借助 addjavainterface 实现 References Android WebView的几种选择对比 Other cordova-plugin-wkwebview-engine 微信JS-SDK说明文档 References 用Cordova封装hybrid app的性能能接受吗 Crosswalk comes to Ionic "},"technology/incremental-update.html":{"url":"technology/incremental-update.html","title":"增量更新方案","keywords":"","body":"增量更新方案 通过最后修改时间dateline来判断是否已更新。如果有更新就重新获取 服务端如何获取dateline 所有表添加最后修改时间字段dateline,每次修改或添加项的时候都要对dateline写入最后修改时间。如果有关联表，获取id的dateline的时候取表及需要的关联表dateline的最大值。 获取列表 列表里的数据不可删除且不可修改 每项加个dateline，客户端请求的时候带上最新的dateline，服务端返回dateline之后新增加的项 列表里的数据可变 客户端需要两张表，一张只有id和dateline的列表表(listTable)，当然也可以包含title等简单字段在未加载详情时展示用。另一张包含所有数据的详情表(listDetailTable)。先从服务器获取列表里所有项的id和dateline并存储在listTable，这里不做增量。然后对listTable每一项和listDetailTable对比，如果listDetailTable中没有listTable中id对应的项或者dateline不一致就获取对应id的详情并存储到listDetailTable，否则不做任何处理。这样做有个明显的缺点，就是请求次数过多。可以修改下获取数据详情的接口，客户端带上多个id，服务端返回多个id的详情。 获取详情 客户端有张详情表(detailTable)，包含id和dateline在内的所有数据。获取id对应详情的时候，客户端先通过id和dateline向服务器请求数据，服务端对比dateline，如果不一致就返回所有数据，否则则返回一个标致位表示没有更新。 相关资料 http://blog.cnbang.net/tech/2258/ GreedLab原创 "},"technology/cors.html":{"url":"technology/cors.html","title":"CORS","keywords":"","body":"CORS 跨域资源共享 CORS 详解 问题 Q1: 如何实现多域名跨域 Access-Control-Allow-Origin 只能有一个值，* 或者无通配符域名 Access-Control-Allow-Origin 为 * 时 Access-Control-Allow-Credentials 只能为 false 不能带 cookie 如果请求的 origin 允许访问，把 Access-Control-Allow-Origin 设为该 origin "},"technology/design-patterns.html":{"url":"technology/design-patterns.html","title":"设计模式","keywords":"","body":"设计模式 设计模式：可复用面向对象软件的基础 "},"technology/algorithm.html":{"url":"technology/algorithm.html","title":"算法","keywords":"","body":"算法 书籍 《算法》 《算法导论》 "},"technology/web_proxy.html":{"url":"technology/web_proxy.html","title":"web proxy","keywords":"","body":"web proxy Glype 下载地址 https://www.glype.com/download.php php-proxy-app https://github.com/Athlon1600/php-proxy-app 安装 安装composer https://packagist.org/ curl -sS https://getcomposer.org/installer | php 安装php-proxy-app composer create-project athlon1600/php-proxy-app:dev-master www/php-proxy-app "},"technology/float.html":{"url":"technology/float.html","title":"符点精度问题","keywords":"","body":"符点精度问题 IEEE 754 浮点数的二进制表示 负数: 补码 = 反码 + 1 小数十进制转二进制: 乘二取整 "},"dev-ops/":{"url":"dev-ops/","title":"运维","keywords":"","body":"运维 Linux命令大全 profile .bash_profile .bashrc 区别 /etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置. ~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该 文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件. ~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该 该文件被读取. ~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是\\\"父子\\\"关系. .bash_profile 与 .bashrc 的区别 .bash_profile login shells .bashrc non-login shells login shell 与 non-login shell 的区别 当你直接在机器login界面登陆、使用ssh登陆或者su切换用户登陆时，.bash_profile 会被调用来初始化shell环境 Note：.bash_profile文件默认调用.bashrc文件 .bash_profile中有如下内容 if [ -f ~/.bashrc ]; then . ~/.bashrc fi 当你不登陆系统而使用ssh直接在远端执行命令，.bashrc 会被调用 当你已经登陆系统后，每打开一个新的Terminal时，.bashrc 都会被再次调用。 "},"dev-ops/auto-launch.html":{"url":"dev-ops/auto-launch.html","title":"Centos 自启动","keywords":"","body":"Centos 自启动 方法一 /etc/rc.d/rc.local 方法二 /etc/rc.d/rc.sysinit 方法三 chkconfig References CentOS 程序开机自启动方法总结 "},"dev-ops/docker-mac.html":{"url":"dev-ops/docker-mac.html","title":"Docker For Mac","keywords":"","body":"Docker For Mac Install 方法一 参考 https://docs.docker.com/docker-for-mac/install/ 方法二 brew brew cask install docker "},"dev-ops/host-info.html":{"url":"dev-ops/host-info.html","title":"查看主机信息","keywords":"","body":"查看主机信息 查看内核操作系统版本 # uname -a Linux cp-43.webhostbox.net 2.6.32-531.23.3.lve1.3.6.el5h.x86_64 #1 SMP Mon Sep 29 18:16:21 CEST 2014 x86_64 x86_64 x86_64 GNU/Linux # cat /proc/version Linux version 2.6.32-531.23.3.lve1.3.6.el5h.x86_64 (mockbuild@build.cloudlinux.com) (gcc version 4.1.2 20080704 (Red Hat 4.1.2-54)) #1 SMP Mon Sep 29 18:16:21 CEST 2014 # getconf LONG_BIT 64 查看glibc版本 ﻿ rpm -qi glibc rpm -qa | grep glibc ls -l /lib/libc.so.6 # ls -l /lib/libc.so.* lrwxrwxrwx 1 root root 11 08-18 00:01 /lib/libc.so.6 -> libc-2.5.so* # ls -l /lib64/libc.so.* lrwxrwxrwx 1 root root 11 08-18 00:01 /lib64/libc.so.6 -> libc-2.5.so* "},"dev-ops/network.html":{"url":"dev-ops/network.html","title":"网络相关命令","keywords":"","body":"网络相关命令 netperf 网络性能测试 # server service netperf start # client # 测试tcp吞吐 netperf -t TCP_STREAM -H ip_of_server -l 10 iperf 测试带宽 # server iperf -s # client iperf -c ip_of_server netcat # server nc -l -p 22222 | pv References netperf 与网络性能测量 通过netcat或iperf测试网络带宽 "},"dev-ops/ftp-server.html":{"url":"dev-ops/ftp-server.html","title":"centos启用ftp功能","keywords":"","body":"centos启用ftp功能 安装 $ yum -y install vsftpd 自启动 chkconfig vsftpd on 启动 service vsftpd start 停止 service vsftpd stop 配置 /etc/vsftpd/vsftpd.conf /etc/pam.d/vsftpd # useradd vsftpd -s /sbin/nologin # useradd overlord -s /sbin/nologin 禁用selinux http://unix.stackexchange.com/questions/79743/what-are-the-settings-to-correct-vsftpd-500-oops-cannot-change-directory-erro 基于虚拟用户的配置 取消匿名登陆 anonymous_enable=NO 用户 默认有 ftp 用户对应 /var/ftp 根目录 Questions 500 OOPS: could not read chroot() list file:/etc/vsftpd/chroot_list 修改 /etc/vsftpd/vsftpd.conf #chroot_list_enable=YES #chroot_list_file=/etc/vsftpd.chroot_list Reference 我见过最好的vsftpd配置教程 http://os.51cto.com/art/201408/448630.htm http://www.pythontab.com/html/2014/linuxkaiyuan_0722/832.html "},"dev-ops/user-group.html":{"url":"dev-ops/user-group.html","title":"用户和群组管理","keywords":"","body":"用户和群组管理 http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html 创建用户 # useradd -m user # passwd user 删除用户 # userdel user 创建群组 # groupadd group 给已有的用户增加工作组 # gpasswd -a user group 或 # usermod -a -G group user 查看用户所在群组 $ groups 或 # groups user 配置文件 /etc/passwd 注：用户（user）的配置文件； /etc/shadow 注：用户（user）影子口令文件； /etc/group 注：用户组（group）配置文件； /etc/gshadow 注：用户组（group）的影子文件； "},"dev-ops/ddns.html":{"url":"dev-ops/ddns.html","title":"动态DNS","keywords":"","body":"动态DNS 英语：Dynamic DNS，简称DDNS 在互联网的管理层面来说，动态DNS更新是指创建一个DNS系统，能够自动更新传统的DNS记录，而不需要手动编辑。 在客户端来说，动态DNS提供了一个轻量化机制，让本地DNS数据库可以即时的更新。 它能把互联网域名指往一个可能经常改变的IP地址，让经常改变位置及配置的设备，能够持续性的更新IP地址。 "},"dev-ops/ssh.html":{"url":"dev-ops/ssh.html","title":"SSH","keywords":"","body":"SSH SSH 互信 ssh-keygen -t rsa cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys chmod 755 ~/.ssh chmod 600 ~/.ssh/authorized_keys 配置 SSH 不自动关闭 打开 /etc/ssh/sshd_config 找到 ClientAliveInterval 参数，如果没有就自己加一行 数值是秒，比如你设置为540，就是9分钟. ClientAliveInterval 540 对于 ClientAliveCountMax 指如果发现客户端没有相应，则判断一次超时，这个参数设置允许超时的次数。比如10 ClientAliveInterval 540 ClientAliveCountMax 10; 则代表允许超时 5400秒 = 90分钟 service sshd restart ssh-agent 在 Mac OS X 上，当系统重新启动后，ssh-agent 再次启动时会 “忘记” 这个密钥。不过您可以通过以下命令将您的 SSH 密钥导入到密钥链中： ssh-add -K 您的密钥 References SSH keys (简体中文)) "},"dev-ops/docker-dockerfile.html":{"url":"dev-ops/docker-dockerfile.html","title":"Dockerfile 使用","keywords":"","body":"Dockerfile 使用 编译镜像 docker build -t 查看镜像 docker images 修改 tag docker tag Example: docker tag ca1b6b825289 registry.cn-test.aliyuncs.com/xxxxxxx:v1.0 创建容器 docker run -d -p : 查看容器 docker ps -a "},"dev-ops/iptables.html":{"url":"dev-ops/iptables.html","title":"iptables","keywords":"","body":"iptables Linux防火墙 查看 # iptables -L 开启与关闭 重启系统生效 开启 # chkconfig iptables on 关闭 # chkconfig iptables off 即时生效，重启后失效 开启 # service iptables start 关闭 # service iptables stop 配置文件 /etc/sysconfig/iptables 添加端口 iptables -A INPUT -p tcp -m tcp --dport 3001 -j ACCEPT service iptables restart "},"dev-ops/jmx-exporter.html":{"url":"dev-ops/jmx-exporter.html","title":"JMX Exporter","keywords":"","body":"JMX Exporter GitHub 集成步骤 https://mvnrepository.com/artifact/io.prometheus.jmx/jmx_prometheus_javaagent/0.12.0 下载 jmx_prometheus_javaagent-0.12.0.jar 参考 https://github.com/prometheus/jmx_exporter/blob/master/example_configs/tomcat.yml 配置 jmx_exporter.yml 配置 JAVA_OPTS -javaagent:/your/path/to/jmx_prometheus_javaagent.jar=2112:/your/path/to/jmx_exporter.yml 运行 java 程序，通过 2112 端口查看 JVM 信息 References 使用Prometheus+Grafana监控JVM 在k8s集群中，利用prometheus的jmx_exporter进行tomcat的JVM性能监控，并用grafana作前端展示 "},"dev-ops/k8s.html":{"url":"dev-ops/k8s.html","title":"Kubernetes","keywords":"","body":"Kubernetes Kubernetes（常简称为K8s）是用于自动部署、扩展和管理容器化（containerized）应用程序的开源系统。它旨在提供“跨主机集群的自动部署、扩展以及运行应用程序容器的平台”。[4] 它支持一系列容器工具, 包括Docker等。 kubectl kubectl 用它来操作 Kubernetes 命令行工具。 安装 参考 https://kubernetes.io/docs/tasks/tools/install-kubectl/ $ brew install kubernetes-cli 配置 kubeconfig 文件存储到 $HOME/.kube 显示和查找资源 kubectl [command] [TYPE] [NAME] [flags] # Get commands with basic output $ kubectl get services # 列出所有 namespace 中的所有 service $ kubectl get pods --all-namespaces # 列出所有 namespace 中的所有 pod $ kubectl get pods -o wide # 列出所有 pod 并显示详细信息 $ kubectl get deployment my-dep # 列出指定 deployment $ kubectl get pods --include-uninitialized # 列出该 namespace 中的所有 pod 包括未初始化的 # 使用详细输出来描述命令 $ kubectl describe nodes my-node $ kubectl describe pods my-pod $ kubectl get services --sort-by=.metadata.name # List Services Sorted by Name # 根据重启次数排序列出 pod $ kubectl get pods --sort-by='.status.containerStatuses[0].restartCount' # 获取所有具有 app=cassandra 的 pod 中的 version 标签 $ kubectl get pods --selector=app=cassandra rc -o \\ jsonpath='{.items[*].metadata.labels.version}' # 获取所有节点的 ExternalIP $ kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type==\"ExternalIP\")].address}' # 列出属于某个 PC 的 Pod 的名字 # “jq”命令用于转换复杂的 jsonpath，参考 https://stedolan.github.io/jq/ $ sel=${$(kubectl get rc my-rc --output=json | jq -j '.spec.selector | to_entries | .[] | \"\\(.key)=\\(.value),\"')%?} $ echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name}) # 查看哪些节点已就绪 $ JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}' \\ && kubectl get nodes -o jsonpath=\"$JSONPATH\" | grep \"Ready=True\" # 列出当前 Pod 中使用的 Secret $ kubectl get pods -o json | jq '.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name' | grep -v null | sort | uniq 与运行中的 Pod 交互 $ kubectl logs my-pod # dump 输出 pod 的日志（stdout） $ kubectl logs my-pod -c my-container # dump 输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用） $ kubectl logs -f my-pod # 流式输出 pod 的日志（stdout） $ kubectl logs -f my-pod -c my-container # 流式输出 pod 中容器的日志（stdout，pod 中有多个容器的情况下使用） $ kubectl run -i --tty busybox --image=busybox -- sh # 交互式 shell 的方式运行 pod $ kubectl attach my-pod -i # 连接到运行中的容器 $ kubectl port-forward my-pod 5000:6000 # 转发 pod 中的 6000 端口到本地的 5000 端口 $ kubectl exec my-pod -- ls / # 在已存在的容器中执行命令（只有一个容器的情况下） $ kubectl exec my-pod -c my-container -- ls / # 在已存在的容器中执行命令（pod 中有多个容器的情况下） $ kubectl top pod POD_NAME --containers # 显示指定 pod 和容器的指标度量 查看指定 service 或 pod 信息 # 列出所有 services $ kubectl get services # 查看指定 service 详情 $ kubectl get describe services Labels: run=my-service Selector: app=my-service,enable=true Type: ClusterIP IP: XX.XX.X.XX Port: grpc 50051/TCP Port: http 9001/TCP # 列出 my-service 的所有 pods $ kubectl get pods --selector=\"app=my-service,enable=true\" --output=wide port-forward 参考 Use Port Forwarding to Access Applications in a Cluster 进行端口映射 kubectl port-forward : 代理到 Pod $ kubectl port-forward my-pod 5000:6000 # 转发 pod 中的 6000 端口到本地的 5000 端口 代理到 Service $ kubectl port-forward svc/my-service 5000:6000 # 转发 service 中的 6000 端口到本地的 5000 端口 -n namespace 指定 namespace References Kubectl GitHub Kubectl 文档 kubectl 命令技巧大全 Other Kubernetes Millicores 参考 https://www.noqcks.io/notes/2016/12/14/kubernetes-understanding-millicores/ Kubernetes has a new metric called Millicores that is used to measure CPU usage. It is a CPU core split into 1000 units (milli = 1000). If you have 4 cores, then the CPU capacity of the node is 4000m. References Kubernetes Wikipedia Kubernetes GitHub Kubernetes 官方中文文档 "},"dev-ops/gitlab-install.html":{"url":"dev-ops/gitlab-install.html","title":"centos docker 方式安装 gitlab","keywords":"","body":"centos docker 方式安装 gitlab docker-gitlab GitHub gitlab 源码 所有安装都在 git 用户下 创建 git 用户 # useradd git # passwd git git 用户添加 sudo 权限 # sudoedit /etc/sudoers root ALL=(ALL) ALL git ALL=(ALL) ALL 切换到 git 用户 # su - git 安装 docker $ wget -qO- https://get.docker.com/ | sh 安装docker-gitlab $ docker pull sameersbn/gitlab:8.8.4 启动 docker run --name gitlab-postgresql -d \\ --env 'DB_NAME=gitlabhq_production' \\ --env 'DB_USER=gitlab' --env 'DB_PASS=password' \\ --env 'DB_EXTENSION=pg_trgm' \\ --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \\ sameersbn/postgresql:9.4-22 Step 2. Launch a redis container docker run --name gitlab-redis -d \\ --volume /srv/docker/gitlab/redis:/var/lib/redis \\ sameersbn/redis:latest Step 3. Launch the gitlab container docker run --name gitlab -d \\ --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \\ --publish 10022:22 --publish 10080:80 \\ --env 'GITLAB_PORT=10080' --env 'GITLAB_SSH_PORT=10022' \\ --env 'GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string' \\ --volume /srv/docker/gitlab/gitlab:/home/git/data \\ sameersbn/gitlab:8.8.4 日志路径 docker exec -it gitlab ls /var/log/gitlab 配置 docker exec -it gitlab cat config/gitlab.yml 查看服务 docker exec -it gitlab service gitlab status "},"dev-ops/kibana.html":{"url":"dev-ops/kibana.html","title":"kibana","keywords":"","body":"kibana lucene 查询语法 "},"dev-ops/gitlab-cli.html":{"url":"dev-ops/gitlab-cli.html","title":"Gitlab CLI","keywords":"","body":"Gitlab CLI Gitlab API 中的 Project ID 是工程名 URL encode / 转成 %2F git push 里提示创建 merge request gitlab > Settings > General > Merge request > 勾选 Show link to create/view merge request when pushing from the command line "},"dev-ops/curl.html":{"url":"dev-ops/curl.html","title":"curl","keywords":"","body":"curl 下载文件 -O 下载文件并以原名保存到当前目录中 -o 指定下载后文件的名字 -C 断点续传 eg： $ curl https://progit2.s3.amazonaws.com/zh/2015-12-02-9d8a9/progit-zh.936.pdf -O -C 0 GET 请求 $ curl example.com/form.cgi?data=xxx POST 请求 $ curl -X POST --data \"data=xxx\" example.com/form.cgi 其它参数 --user-agent --cookie --header "},"dev-ops/background-task.html":{"url":"dev-ops/background-task.html","title":"后台任务","keywords":"","body":"后台任务 fg、bg、jobs、&、nohup、ctrl+z、ctrl+c 命令 & 加在一个命令的最后，可以把这个命令放到后台执行，关闭当前的终端任务结束，如： $ watch -n 10 sh test.sh & #每10s在后台执行一次test.sh脚本 nohup 如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&做不到），这时候需要nohup。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端jobs已经无法看到后台跑得程序了。 EG： $ nohup jenkins > ~/jenkins/jenkins.log g 2>&1 & 此时利用ps（进程查看命令） $ ps -aux | grep \"jenkins\" ctrl + z 可以将一个正在前台执行的命令放到后台，并且处于暂停状态。 jobs 查看当前有多少在后台运行的命令 jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。 fg 将后台中的命令调至前台继续运行。如果后台中有多个命令，可以用fg %jobnumber（是命令编号，不是进程号）将选中的命令调出。 bg 将一个在后台暂停的命令，变成在后台继续执行。如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出。 kill 法子1：通过jobs命令查看job号（假设为num），然后执行kill %num 法子2：通过ps命令查看job的进程号（PID，假设为pid），然后执行kill pid 前台进程的终止：Ctrl+c a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分 进程的终止： 后台进程的终止： "},"dev-ops/batch-delete.html":{"url":"dev-ops/batch-delete.html","title":"批量删除","keywords":"","body":"批量删除 find . -name \".git\" -exec rm -rf \"{}\" \\; "},"dev-ops/modify-string.html":{"url":"dev-ops/modify-string.html","title":"Mac 批量修改字符串","keywords":"","body":"Mac 批量修改字符串 列出所有.m文件 $ find ./ -name *.m vi中批量替换 :g#sourceString#s##targetString#g sed命令下批量替换文件内容 格式: sed \"s/查找字段/替换字段/g\" $ sed -i \"\" \"s/sourceString/targetString/g\" test.m -i: 直接修改原文 批量替换 #bin/sh target_files=`find ./ -name *.m` for target_file in ${target_files} do echo ${target_file} sed -i \"\" \"s/sourceString/targetString/g\" ${target_file} done "},"dev-ops/rsync.html":{"url":"dev-ops/rsync.html","title":"rsync","keywords":"","body":"rsync 同步文件 rsync [OPTION]... [SRC]... [USER@]HOST::DEST 参数 -a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。 -v, --verbose 详细模式输出。 -r, --recursive 对子目录以递归模式处理。 -z, --compress 传递的时候先压缩 --delete 删除那些DST中SRC没有的文件。 --delete-excluded 同样删除接收端那些被该选项指定排除的文件。 --exclude=PATTERN 指定排除不需要传输的文件模式。 --include=PATTERN 指定不排除而需要传输的文件模式。 Reference rsync命令 "},"dev-ops/port.html":{"url":"dev-ops/port.html","title":"# 端口相关命令","keywords":"","body":"端口相关命令 查看端口占用情况的命令 lsof -i 查看某一端口的占用情况 lsof -i:21 结束占用端口的进程 killall pure-ftpd 也可使用命令： netstat -apn|grep 找到进程号以后，再使用以下命令查看详细信息： ps -aux|grep "},"dev-ops/logrotate.html":{"url":"dev-ops/logrotate.html","title":"Logrotate 管理日志","keywords":"","body":"Logrotate 管理日志 命令路径：/usr/sbin/logrotate 配置路径：/etc/logrotate.conf /etc/logrotate.d/* Reference 被遗忘的Logrotate Linux的日志文件管理工具——logrotate logrotate "},"dev-ops/docker.html":{"url":"dev-ops/docker.html","title":"docker","keywords":"","body":"docker 官网 Docker 中文指南 docker 镜像 centos 上安装 启动 停止 安装 docker-compose docker 命令 查看正在运行的容器 删除所有容器 查看存在的镜像 docker常用命令总结 查询容器、镜像、日志 删除容器与镜像 启动停止容器 免 sudo 使用 docker 容器 在容器内使用命令 镜像 官方镜像 alauda 镜像 daocloud 镜像 centos 上安装 How To Install Docker on CentOS 6 # rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm # yum update -y # yum -y install docker-io Install Docker on CentOS 启动 # service docker start 停止 # service docker stop 安装 docker-compose https://docs.docker.com/compose/install/ $ curl -L https://github.com/docker/compose/releases/download/1.7.1/run.sh > /usr/local/bin/docker-compose $ chmod +x /usr/local/bin/docker-compose docker 命令 查看正在运行的容器 docker ps -a 删除所有容器 docker rm -f $(docker ps -a -q) 查看存在的镜像 $ docker images docker 常用命令总结 docker pull #从官网拉取镜像 docker search #搜索在线可用镜像名 docker build Dockerfile #编译镜像 查询容器、镜像、日志 docker top #显示容器内运行的进程 docker images #查询所有的镜像，默认是最近创建的排在最上。 docker ps #查看正在运行的容器 docker ps -l #查看最后退出的容器的ID docker ps -a #查看所有的容器，包括退出的。 docker logs {容器ID|容器名称} #查询某个容器的所有操作记录。 docker logs -f {容器ID|容器名称} #实时查看容易的操作记录。 删除容器与镜像 docker rm$(docker ps -a -q) #删除所有容器 docker rm #删除单个容器 docker rmi #删除单个镜像 docker rmi$(docker images | grep none | awk '{print $3}' | sort -r) #删除所有镜像 创建容器 docker run [OPTIONS] IMAGE [COMMAND] [ARG...] -p: 指定端口映射，格式为：主机(宿主)端口:容器端口 启动停止容器 docker stop #停止某个容器 docker start #启动某个容器 docker kill #杀掉某个容器 免 sudo 使用 docker http://www.tuicool.com/articles/QrqamyN 如果还没有 docker group 就添加一个： sudo groupadd docker 将用户加入该 group 内。然后退出并重新登录就生效啦。 sudo gpasswd -a ${USER} docker 重启 docker 服务 sudo service docker restart 切换当前会话到新 group 或者重启 X 会话 newgrp - docker OR pkill X 注意，最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效，所以 docker images 执行时同样有错。 容器 docker ps -a 可以查看所有在运行容器 ID. 容器的本地存储路径为 /var/lib/docker/containers/ 容器 mnt 路径为 /var/lib/docker/devicemapper/mnt/ 在容器内使用命令 docker exec -it bash 窗口与本机之间拷贝文件 # 拷贝到本机 docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH| # 拷贝到容器 docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH "},"dev-ops/tar.html":{"url":"dev-ops/tar.html","title":"tar","keywords":"","body":"tar 范例一：将整个 /etc 目录下的档案全部打包成为 /tmp/etc.tar [root@linux ~]# tar -cvf /tmp/etc.tar /etc 范例二：查阅上述 /tmp/etc.tar.gz 档案内有哪些档案？ [root@linux ~]# tar -tzvf /tmp/etc.tar.gz 范例三：将 /tmp/etc.tar.gz 档案解压缩在 /usr/local/src 底下 [root@linux ~]# cd /usr/local/src [root@linux src]# tar -xzvf /tmp/etc.tar.gz "},"dev-ops/sudo.html":{"url":"dev-ops/sudo.html","title":"为普通用户添加 sudo 权限","keywords":"","body":"为普通用户添加 sudo 权限 # sudoedit /etc/sudoers 找到 root ALL=(ALL) ALL这一行，在后面再加上一行就可以了（不用引号）： “username ALL=(ALL) ALL” "},"shell/":{"url":"shell/","title":"Shell","keywords":"","body":"Shell Shell 教程 bc 命令行计算器 "},"shell/stat.html":{"url":"shell/stat.html","title":"stat 查看文件信息","keywords":"","body":"stat 查看文件信息 查看信息 查看简单信息 $ stat 查看详细信息 $ stat -x 查看最后修改(Modify)时间 $ stat -t %D-%T |awk '{print $10}' "},"shell/parameters.html":{"url":"shell/parameters.html","title":"shell命令行传入参数处理","keywords":"","body":"shell命令行传入参数处理 getopt 独立的可执行文件 功能复杂 getopts getopts是由bash内置的 功能简单 相关资料 http://www.jb51.net/article/48686.htm "},"shell/string.html":{"url":"shell/string.html","title":"shell 中字符串处理","keywords":"","body":"shell 中字符串处理 ${}，## 和 %% 处理字符串 假设我们定义了一个变量为： file=/dir1/dir2/dir3/my.file.txt 可以用${ }分别替换得到不同的值： ${file#*/}：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt ${file##*/}：删掉最后一个 / 及其左边的字符串：my.file.txt ${file#*.}：删掉第一个 . 及其左边的字符串：file.txt ${file##*.}：删掉最后一个 . 及其左边的字符串：txt ${file%/*}：删掉最后一个 / 及其右边的字符串：/dir1/dir2/dir3 ${file%%/*}：删掉第一个 / 及其右边的字符串：(空值) ${file%.*}：删掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file ${file%%.*}：删掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my 记忆的方法为： # 是去掉左边，*在左边（键盘上#在 $ 的左边） % 是去掉右边，*在右边（键盘上% 在$ 的右边） * 是通配符，# 中 *在左边，% 中*在右边，可以不要 单一符号是最小匹配；两个符号是最大匹配 ${file:0:5}：提取最左边的 5 个字节：/dir1 ${file:5:5}：提取第 5 个字节右边的连续5个字节：/dir2 也可以对变量值里的字符串作替换： ${file/dir/path}：将第一个 dir 替换为 path：/path1/dir2/dir3/my.file.txt ${file//dir/path}：将全部dir 替换为 path：/path1/path2/path3/my.file.txt 利用 ${ } 还可针对不同的变数状态赋值(沒设定、空值、非空值)： ${file-my.file.txt} ：假如 $file 沒有设定，則使用 my.file.txt 作传回值。(空值及非空值時不作处理) ${file:-my.file.txt} ：假如 $file 沒有設定或為空值，則使用 my.file.txt 作傳回值。 (非空值時不作处理) ${file+my.file.txt} ：假如 $file 設為空值或非空值，均使用 my.file.txt 作傳回值。(沒設定時不作处理) ${file:+my.file.txt} ：若 $file 為非空值，則使用 my.file.txt 作傳回值。 (沒設定及空值時不作处理) ${file=my.file.txt} ：若 $file 沒設定，則使用 my.file.txt 作傳回值，同時將 $file 賦值為 my.file.txt 。 (空值及非空值時不作处理) ${file:=my.file.txt} ：若 $file 沒設定或為空值，則使用 my.file.txt 作傳回值，同時將 $file 賦值為 my.file.txt 。 (非空值時不作处理) ${file?my.file.txt} ：若 $file 沒設定，則將 my.file.txt 輸出至 STDERR。 (空值及非空值時不作处理) ${file:?my.file.txt} ：若 $file 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (非空值時不作处理) ${#var} 可计算出变量值的长度：${#file} 可得到 27 ，因为 /dir1/dir2/dir3/my.file.txt 是27个字节 References http://blog.csdn.net/shmilyringpull/article/details/7631106 "},"shell/exit.html":{"url":"shell/exit.html","title":"exit","keywords":"","body":"exit 0表示成功（Zero - Success） 非0表示失败（Non-Zero - Failure） 2表示用法不当（Incorrect Usage） 127表示命令没有找到（Command Not Found） 126表示不是可执行的（Not an executable） =128 信号产生 相关资料 http://blog.163.com/bobile45@126/blog/static/96061992201311712658570/ "},"shell/mail.html":{"url":"shell/mail.html","title":"mail命令使用","keywords":"","body":"mail命令使用 可以发送或查看邮件 发送邮件 发送给系统用户 $ echo \"content\" | mail -s \"subject\" user 或 $ mail -s \"subject\" user 发送给指定email NON 查看收件箱 运行mail进入mail命令行 help 查看mail命令行下的帮助 h 列出未读邮件列表 > 表示当前所在的邮件。U表示未读 t 查看当前邮件 n 查看下一封邮件 d d删除当前邮件 d2删除第二封邮件 d 1-100 删除第1到100封邮件 q 保存操作并退出 x 不保存操作并退出 "},"shell/other.html":{"url":"shell/other.html","title":"杂七杂八","keywords":"","body":"杂七杂八 脚本当前目录 $(cd \"$(dirname \"$0\")\"; pwd) find 查看当前目录下除了Pods和Example的所有.h .m文件 $ find . -name *.[h,m] ! -path \"./Pods/*\" ! -path \"./Example/*\" 配合egrep KEYWORDS=\"TODO|FIXME|\\?\\?\\?:|\\!\\!\\!:\" find . -name *.[h,m] ! -path \"./Pods/*\" ! -path \"./Example/*\" | xargs egrep --with-filename --line-number --only-matching ${KEYWORDS} 判断是不是整数 http://mywiki.wooledge.org/BashFAQ/054 sed sed 简明教程 awk "},"shell/operator.html":{"url":"shell/operator.html","title":"运算符的使用方法","keywords":"","body":"运算符的使用方法 &&运算符 command1 && command2 command1执行成功后执行command2 ||运算符 command1 || command2 command1执行失败后执行command2 相关资料 http://blog.csdn.net/a627088424/article/details/20360107 "},"shell/vi.html":{"url":"shell/vi.html","title":"vi","keywords":"","body":"vi 字符串替换 替换第一个 :%s#origin#new# 替换全局 :%s#origin#new#g :%s#WFT-social#WFT-pay#g :%s#http://de.isrv.us/deyi_ios#http://wftgit.greedlab.com:10080/wft-ios#g "},"ci/jenkins.html":{"url":"ci/jenkins.html","title":"Jenkins","keywords":"","body":"Jenkins 官网 http://jenkins-ci.org/ 文档 https://wiki.jenkins-ci.org/display/JENKINS/Use+Jenkins Jenkins centos 安装 yum 方式安装 Start/Stop docker 方式安装 mac 安装 方法一： 方法二： 启动 账户 开启用户注册 注册用户 设置权限 环境变量 插件 添加 git ssh 证书 新建job 源码管理 构建 注意 Poll SCM 关闭 Reference centos 安装 yum 方式安装 https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key sudo yum install jenkins Start/Stop sudo service jenkins start/stop/restart sudo chkconfig jenkins on docker 方式安装 https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+with+Docker docker pull jenkins:latest docker run -d --name jenkins -p 8080:8080 -v /srv/docker/jenkins -t jenkins:latest mac 安装 方法一： mac最新版下载 http://mirrors.jenkins-ci.org/osx-stable/latest 方法二： $ brew install jenkins Mac 环境自启动 # 停止 Jenkins $ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist # 开启 Jenkins $ sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist 启动 $ nohup jenkins > ~/.jenkins/run.log 2>&1 & 登录 http://localhost:8080/ 访问jenkins. 账户 开启用户注册 系统管理 > Configure Global Security（全局安全配置） > 启用安全 > jenkins 专有用户数据库 > 允许用户注册。 任何用户可以做任何事(没有任何限制) 保存 注册用户 系统管理 > 管理用户 > 新建用户 设置权限 系统管理 > Configure Global Security（全局安全配置） > 项目矩阵授权策略 环境变量 系统管理->节点管理,选择节点，配置从节点 Node Properties - PATH - $PATH:/usr/local/bin 插件 系统管理 > 插件管理 > 高级 > 右下角：立即获取 Gitlab Hook Plugin GitLab Plugin Xcode插件 Xcode integration 签名证书管理插件 Credentials Plugin 签名证书管理插件 Keychains and Provisioning Profiles Management 脚本插件 Post-Build Script Plug-in 邮件插件 Email Extersion Plugin CocoaPods Jenkins Integration fir.im插件 JDK 插件 JDK Parameter Build Name Setter Plugin 修改构建名字 Description Setter Plugin 修改构建说明 Xcode插件,签名证书管理插件 可以不用装，Jenkins会默认使用本机的。Xcode插件,CocoaPods,fir.im插件的功能都可以直接用shell 脚本实现 添加 git ssh 证书 Jenkins > Credentials > System > Global credentials (unrestricted) > Add Credentials 然后输入以下信息 Kind: SSH Username with private key Scope: Global Username: gitlab 的用户名 Private Key > Enter directly : 输入私钥 ID： 唯一 ID Description：介绍 新建job 构建一个自由风格的软件项目。 源码管理 源码管理 > Git Repositories > Repository URL 输入ssh方式的git地址 Credentials 选择之前添加的 git ssh 证书 Additional Behaviours Add Clean before checkout 构建 添加构建步骤 > Xcode 注意 工程的scheme必须设置成Shared才能在Jenkins上编译 Poll SCM 定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作。 https://stackoverflow.com/a/9921495/6283925 关闭 jobs查看后台任务号，kill NUM结束任务 Reference http://www.cnblogs.com/zz0412/p/jenkins_jj_14.html http://www.jianshu.com/p/c69deb29720d http://www.jianshu.com/p/a17167274463 "},"ci/travis-update-gh-pages.html":{"url":"ci/travis-update-gh-pages.html","title":"travis-ci自动更新gh-pages分支","keywords":"","body":"travis-ci自动更新gh-pages分支 用https方式push 生成token https://github.com/settings/tokens > 勾上public_repo > Generate token Travis添加GITHUB_API_KEY的环境变量 方法一 https://travis-ci.org///settings 添加GITHUB_API_KEY=, \"Display value in build log\" 设置为 \"Off\". 方法二 进入仓库根目录下运行 travis encrypt -a GITHUB_API_KEY GITHUB_API_KEY会自动加到.travis.yml .travis.yml after_success: - \"./scripts/deploy.sh\" deploy.sh 方法一 git push -f 方式直接替换仓库文件 cd ${BLOG_DIRECTORY}/_book git init git config user.email \"bell@greedlab.com\" git config user.name \"Bell\" git add . git commit -m \"Deploy to GitHub Pages by travis\" git push -f -q https://GreedBell:${GITHUB_API_KEY}@${GITHUB_REF} HEAD:gh-pages > /dev/null 2>&1 方法二 git remote add upstream 方式添加远程仓库，更新仓库 cd ${BLOG_DIRECTORY}/_book git init git config user.email \"bell@greedlab.com\" git config user.name \"Bell\" git remote add upstream https://GreedBell:${GITHUB_API_KEY}@${GITHUB_REF} git fetch upstream git reset upstream/gh-pages git add . git commit -m \"Deploy to GitHub Pages by travis\" git push -q upstream HEAD:gh-pages Reference https://github.com/steveklabnik/automatically_update_github_pages_with_travis_example https://gist.github.com/domenic/ec8b0fc8ab45f39403dd http://stackoverflow.com/questions/23277391/how-to-publish-to-github-pages-from-travis-ci https://medium.com/@nthgergo/publishing-gh-pages-with-travis-ci-53a8270e87db "},"ci/jenkins-advanced-useage.html":{"url":"ci/jenkins-advanced-useage.html","title":"Jenkins 高级使用","keywords":"","body":"Jenkins 高级使用 Jenkins 高级使用 ssh 远程 安装插件 配置 SSH 使用 SSH Keychains 管理 curl 修改 build 信息 Jenkins 命令行 任务类型 构建一个自由风格的软件项目 Pipeline 流水线|管道 MultiBranch Pipeline Pipeline Jenkinsfile Git References ssh 远程 安装插件 https://plugins.jenkins.io/ 安装 SSH 插件。 配置 SSH Jenkins > 系统管理 > 系统设置 > SSH remote hosts 使用 SSH 构建 > 添加构建步骤 > Execute shell script on remote host using ssh Keychains 管理 参考 Keychains and Provisioning Profiles Plugin 允许访问密码： Keychains > 登录 > 密码 > 选择需要设置的密码 双击 > 访问控制 > 允许所有的应用程序访问此项目 > 存储更改 Release Code Signing 改为手动： Xcode > Project > Build Settings > Code Signing Style > Release > Manual Xcode > Project > Build Settings > Code Signing Identity > Release > iOS Distribution curl 修改 build 信息 # 获取 build 信息 curl -s --user \"$USER:$PASSWORD\" --data-urlencode \"tree=description\" \\ \"$jenkins_url/job/$job_name/$build_number/api/json # 修改 if curl -u $USER:$PASSWORD --data-urlencode \"description=$new_description\" \\ --data-urlencode \"Submit=Submit\" \\ \"$jenkins_url/job/$job_name/$build_number/submitDescription\" then echo \"Description successfully changed on Build #$build_number in Jenkins job $job_name\" else echo \"WARNING: Description was not set. Manually change the descripiton of the build\" echo \" for Build #$build_number in Jenkins job $job_name\" fi Jenkins 命令行 http://localhost:8080/cli 任务类型 构建一个自由风格的软件项目 Pipeline 流水线|管道 Declarative Pipeline 相对简单，而且不需要学习groovy语法，对于日常的一般任务完全够用， Scripted Pipeline 可通过Groovy语言的强大特性做任何你想做的事情。 可以在 Jenkinsfile 中 clone 多个 repo 实现一个任务多仓库功能 MultiBranch Pipeline MultiBranch Pipeline可以理解为是针对某个工程所有分支代码的pipeline集合，jenkins会自动发现源代码中的jenkinsfile配置文件生成对应的分支job。 而MultiBranch Pipeline要求jenkinsfile配置文件存放在源代码的方式，也是符合Pipeline as Code的理念。虽然这也会给一些没有代码提交权限的devops工程师带来困扰。 Pipeline Pipeline Plugin Pipeline 通过编写 Jenkinsfile 自动执行任务 Jenkinsfile Using a Jenkinsfile Git Jenkinsfile 中实现 git clone 功能： 使用 checkout 命令参考 Pipeline: SCM Step checkout([ $class: 'GitSCM', branches: [[name: 'refs/heads/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', timeout: 120]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '6463627-ab54-4e42-bc29-123458', url: 'https://github.com/AtlasBID/CalibrationResults.git']] ]) 或者使用 git 命令参考 Pipeline Git plugin，只能使用 url，branch，changelog，credentialsId，poll 这几个参数 git( url: 'git@git.shimo.im:shimo/baboon.git', branch: \"$master\" ) References Automatically install Android dependencies in CI "},"ci/jenkins-q-a.html":{"url":"ci/jenkins-q-a.html","title":"Jenkins Q&A","keywords":"","body":"Jenkins Q&A No valid crumb was included in the request Q1 Gitlab web hook 的时候提示 No valid crumb was included in the request A: https://github.com/jenkinsci/jenkins/commit/37111bf12e5038fcd240bbefb3aa9474e45585c2 https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API http://doc.gitlab.com/ee/integration/jenkins.html Jenkins 的 Post 请求必须带 crumb。或者关闭 jenkins 的 防止跨站点请求 Jenkins > 系统管理 > Configure Global Security > 取消勾选 防止跨站点请求伪造 Q2 unknown error -1=ffffffffffffffff 参考 https://www.jianshu.com/p/b03e59560d31，codesign命令需要进行签名的时候，会访问keychain来获取打包脚本中对应的证书。通过ssh这种方式访问的时候，是没有访问权限的。需要运行如下命令来获得访问权限： $ security list-keychains \"/Users/Shared/Jenkins/Library/Keychains/login.keychain-db\" \"/Library/Keychains/System.keychain\" $ security unlock -p ~/Library/Keychains/login.keychain-db 补充：由于这个解锁并不是永久的，所以每次在执行打包脚本时，必须先执行解锁命令后执行打包脚本。 Q3 Xcode couldn't find any iOS App Development provisioning profiles matching Xcode 可以自动选择描述文件进行签名，Jenkins 命令行没法实现，需要把 code sign 改成手动模式。或者可以切换到 jenkins 用户，Xcode 打开工程 > target > general > Signing 自动管理签名 Q4 ERROR: Timeout after 10 minutes Git clone 超时，解决办法参考 https://stackoverflow.com/a/22661553 Edit your job configuration, and under git plugin section: * Click \"Add\" * Click \"Advanced clone behaviours\" * Set the number of minutes you want in \"Timeout (in minutes) for clone and fetch operation\" I recommend checking also the \"shallow clone\" option. It fetches only the last state of the repository (without the history), so it's much faster. "},"ci/travis.html":{"url":"ci/travis.html","title":"travis","keywords":"","body":"travis https://github.com/travis-ci/travis-ci CLI安装 https://github.com/travis-ci/travis.rb $ gem install travis 登录 $ travis login 验证.travis.yml合法性 $ travis lint 加密 https://docs.travis-ci.com/user/encryption-keys/ 添加环境变量 https://docs.travis-ci.com/user/environment-variables/ 添加git push权限 http://scurker.com/automated-deploys-with-travis/ https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/ 生成SSH Key $ cd ~/.ssh $ ssh-keygen -t rsa -C \"bell@greedlab.com\" Generating public/private rsa key pair. Enter file in which to save the key (/Users/bell/.ssh/id_rsa): ssh_key Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ssh_key. Your public key has been saved in ssh_key.pub. 进入仓库本地目录 公钥加到仓库 把ssh_key.pub添加到GreedBell/blog > Settings > Deploy keys > add deploy key 加密私钥 $ travis encrypt-file ~/.ssh/ssh_key --add -r GreedBell/blog 修改.travis.yml 把-out ssh_key改为-out ~/.ssh/id_rsa 修改id_rsa权限 - chmod 600 ~/.ssh/id_rsa 设置用户 git config user.email \"bell@greedlab.com\" git config user.name \"Bell\" "},"ci/gitlab-ci.html":{"url":"ci/gitlab-ci.html","title":"centos 安装 gitlab ci","keywords":"","body":"centos 安装 gitlab ci 用 git 用户安装 https://gitlab.com/gitlab-org/gitlab-ci-multi-runner 安装 gitlab-ci-runner https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/linux-repository.md curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash yum install -y gitlab-ci-multi-runner docker 方式安装 gitlab-ci-runner https://github.com/outcoldman/docker-gitlab-ci-multi-runner-ruby .gitlab-ci.yml http://192.168.1.11/help/ci/yaml/README.md "},"ci/drone.html":{"url":"ci/drone.html","title":"Drone","keywords":"","body":"Drone GitHub "},"big-front/":{"url":"big-front/","title":"大前端","keywords":"","body":"大前端 "},"big-front/native-js-android.html":{"url":"big-front/native-js-android.html","title":"Android 原生与 JS 互相调用","keywords":"","body":"Android 原生与 JS 互相调用 V8 React Native app/build.gradle: apply from: \"../../node_modules/react-native/react.gradle\" react.gradle: def cliPath = config.cliPath ?: \"node_modules/react-native/local-cli/cli.js\" def bundleAssetName = config.bundleAssetName ?: \"index.android.bundle\" def entryFile = config.entryFile ?: \"index.android.js\" def bundleCommand = config.bundleCommand ?: \"bundle\" def jsBundleFile = file(\"$jsBundleDir/$bundleAssetName\") if (Os.isFamily(Os.FAMILY_WINDOWS)) { commandLine(\"cmd\", \"/c\", *nodeExecutableAndArgs, cliPath, bundleCommand, \"--platform\", \"android\", \"--dev\", \"${devEnabled}\", \"--reset-cache\", \"--entry-file\", entryFile, \"--bundle-output\", jsBundleFile, \"--assets-dest\", resourcesDir, *extraArgs) } else { commandLine(*nodeExecutableAndArgs, cliPath, bundleCommand, \"--platform\", \"android\", \"--dev\", \"${devEnabled}\", \"--reset-cache\", \"--entry-file\", entryFile, \"--bundle-output\", jsBundleFile, \"--assets-dest\", resourcesDir, *extraArgs) } 打包生成 assets/index.android.bundle in Activity.java @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mReactRootView = new ReactRootView(this); mReactInstanceManager = ReactInstanceManager.builder() .setApplication(getApplication()) .setBundleAssetName(\"index.android.bundle\") .setJSMainModuleName(\"index.android\") .addPackage(new MainReactPackage()) .setUseDeveloperSupport(BuildConfig.DEBUG) .setInitialLifecycleState(LifecycleState.RESUMED) .build(); mReactRootView.startReactApplication(mReactInstanceManager, \"Basic\", null); setContentView(mReactRootView); } ReactInstanceManager.java: 创建和管理 CatalyInstance 的实例 CatalystInstanceImpl.runJSBundle() 加载 JS Bundle JavaScriptExecutor JS执行器，将JS的调用传给C++层 in CatalystInstanceImpl.cpp void CatalystInstanceImpl::jniLoadScriptFromAssets( ) { } in Instance.cpp nativeToJsBridge_->loadApplication(std::move(bundleRegistry), std::move(string), std::move(sourceURL)); in NativeToJsBridge.cpp executor->loadApplicationScript(std::move(*startupScript), std::move(startupScriptSourceURL)); in JSCExecutor.cpp void JSCExecutor::loadApplicationScript(std::unique_ptr script, std::string sourceURL) { ... //使用Webkit JSC去解释执行JS evaluateSourceCode(m_context, bcSourceCode, jsSourceURL); flush(); } in JSIExecutor.cpp in JSCRuntime.cpp #include in #include JavaScriptCore RN 使用了 webkit/Source/JavaScriptCore/API/ References react-native 启动流程原理解析 ReactNative源码篇：启动流程 ReactNative源码分析-加载JSBundle "},"big-front/native-to-js-ios.html":{"url":"big-front/native-to-js-ios.html","title":"iOS 原生与 JS 互相调用","keywords":"","body":"iOS 原生与 JS 互相调用 iOS 原生与 JS 互相调用 Java​Script​Core 原生调用 JS 函数 JS 调用原生 block 调试 Other References React Native 与 Java​Script​Core RCTBridge Java​Script​Core JSContext 是 JavaScript 的运行上下文，他主要作用是执行js代码和注册native方法接口 JSValue 是 JSContext 执行后的返回结果，他可以是任何js类型（比如基本数据类型和函数类型，对象类型等），并且都有对象的方法转换为native对象。 JSManagedValue 是JSValue的封装，用它可以解决js和原声代码之间循环引用的问题 JSVirtualMachine 管理JS运行时和管理js暴露的native对象的内存 JSExport 是一个协议，通过实现它可以完成把一个native对象暴漏给js 原生调用 JS 函数 JSValue *tripleFunction = context[@\"triple\"]; JSValue *result = [tripleFunction callWithArguments:@[@5] ]; NSLog(@\"Five tripled: %d\", [result toInt32]); JS 调用原生 block context[@\"simplifyString\"] = ^(NSString *input) { NSMutableString *mutableString = [input mutableCopy]; CFStringTransform((__bridge CFMutableStringRef)mutableString, NULL, kCFStringTransformToLatin, NO); CFStringTransform((__bridge CFMutableStringRef)mutableString, NULL, kCFStringTransformStripCombiningMarks, NO); return mutableString; }; NSLog(@\"%@\", [context evaluateScript:@\"simplifyString('안녕하새요!')\"]); 调试 https://github.com/bang590/JSPatch/wiki/JS-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95 Debugging JavaScriptCore using Safari Web Inspector Other JavaScriptCore API是线程安全的，比如：我们能够在任意线程创建一个JSValue对象，或者执行script（evaluate scripts），所有其他的线程尝试使用相同的虚拟机都将进行等待。为了执行JavaScript多线程的并发，为每一个线程使用一个独立的 JSVirtualMachine。 References Java​Script​Core - nshipster 实现一个 JavaScriptCore 的 debugger —— iOS 篇 JavaScriptCore全面解析 （上篇） JavaScriptCore全面解析 （下篇） React Native 与 Java​Script​Core in RCTCxxBridge.m - (JSValue *)callFunctionOnModule:(NSString *)module method:(NSString *)method arguments:(NSArray *)arguments error:(NSError **)error; in JSCWrapper.h of jschelper #include JSC_WRAPPER_METHOD(JSEvaluateScript); in JSBase.h JS_EXPORT JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef* exception); RCTBridge "},"vue/":{"url":"vue/","title":"Vue.js","keywords":"","body":"Vue.js GitHub 官网 官方文档 webpack-simple Vue 使用 webpack 简单例子 vue-webpack-boilerplate Vue 使用 webpack 例子 vue-webpack-boilerplate 文档 vue-cli Vue 命令行工具 vue-devtools Vue 开发工具 vue-router Vue 路由 vuex 状态管理 vue-server-renderer 服务端渲染 element-ui 后台组件库 vue-strap 桌面 UI 组件 vux 移动端UI组件库 vue-resource 网络请求 axios 网络请求 https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4#.4mzjlwaij 安装 # 全局安装 vue-cli $ npm install --global vue-cli # 创建一个基于 webpack 模板的新项目 $ vue init webpack my-project # 安装依赖，走你 $ cd my-project $ npm install $ npm run dev IDE WebStorm 安装 VUE 插件 styles 在Vue工作流中使用CSS Modules Vue-loader在v9.8.0之后加入了对CSS Modules的支持。 语法 v-bind 类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件： v-bind: 可缩写为 : 计算属性 Methods Watched-Property 计算属性: 只有在它的相关依赖发生改变时才会重新取值,更好的方式是 method: 每当重新渲染的时候，method 调用总会执行函数,只有纯粹的数据逻辑，而不是去处理 DOM 事件细节 watch: 通常更好的办法是使用计算属性而不是一个命令式的 $watch 回调 事件修饰符: 处理 DOM 事件细节 v-if vs v-show v-if 是真实的条件渲染，因为它会确保条件块在切换当中适当地销毁与重建条件块内的事件监听器和子组件。 v-show 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。 v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变则使用 v-if 较好。 组件 Vue 组件的 API 来自三部分 Props 允许外部环境传递数据给组件 Events 允许组件触发外部环境的副作用 Slots 允许外部环境将额外的内容组合在组件中。 组件需要的一切都是通过上下文传递，包括： props: 提供props 的对象 children: VNode 子节点的数组 slots: slots 对象 data: 传递给组件的 data 对象 parent: 对父组件的引用 过渡效果概述 v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。 v-enter-active: 定义进入过渡的结束状态。在元素被插入时生效，在 transition/animation 完成之后移除。 v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。 v-leave-active: 定义离开过渡的结束状态。在离开过渡被触发时生效，在 transition/animation 完成之后移除。 References 随心DevOps前端之三：使用element-UI构建vuejs通用模板（顶部、左侧导航） 10 Best Vue.js based UI Frameworks for Building Mobile Apps "},"vue/vue-router.html":{"url":"vue/vue-router.html","title":"vue-router","keywords":"","body":"vue-router Vue 路由 GitHub 文档 安装 npm install --save vue-router "},"vue/vue-devtools.html":{"url":"vue/vue-devtools.html","title":"vue-devtools","keywords":"","body":"vue-devtools chrome 插件，利于调试 GitHub chrome 插件 "},"vue/vue-loader.html":{"url":"vue/vue-loader.html","title":"vue-loader","keywords":"","body":"vue-loader webpack 构建 vue 插件。 文档说明了 .vue 文件该怎么写，以及 webpack 该怎么配置 GitHub 文档 "},"vue/vue-env.html":{"url":"vue/vue-env.html","title":"vue 环境搭建","keywords":"","body":"vue 环境搭建 安装 vue-cli npm install -g vue-cli 创建工程 vue init webpack wft-material-front 工程文档: https://vuejs-templates.github.io/webpack 运行工程 cd wft-material-front npm install npm run dev 添加 vue-router npm install --save vue-router "},"vue/element-ui.html":{"url":"vue/element-ui.html","title":"element-ui","keywords":"","body":"element-ui GitHub 官网 语法 trigger 属性用于设置何时触发 hover 鼠标放在上面的时候 click 点击的时候 focus 选中的时候 manual 手动 blur 在 Input 失去焦点时 "},"vue/vuex.html":{"url":"vue/vuex.html","title":"vuex","keywords":"","body":"vuex Vue 状态管理. 如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。但是，如果您需要构建是一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。 GitHub 官方文档 安装 npm install --save vuex "},"other/":{"url":"other/","title":"Other","keywords":"","body":"Other "},"other/qq-protocol.html":{"url":"other/qq-protocol.html","title":"QQ 协议","keywords":"","body":"QQ 协议 酷Q在之前使用的是webqq的协议，但随着webqq的协议的死亡，现在是smartqq了。但目前最新版的酷Q使用的是安卓qq协议 协议 酷Q是怎样获取QQ聊天消息的？ AndroidQQProtocol qq-protocol.md 酷Q CoolQ HTTP API 插件 Open API QQ API调用说明 API列表 群开放开发者接口文档 "},"other/company.html":{"url":"other/company.html","title":"Company","keywords":"","body":"Company Department 后端 前端 客户端 无线端 移动端 大前端 大无线 "},"other/ads.html":{"url":"other/ads.html","title":"广告联盟","keywords":"","body":"广告联盟 免备案广告联盟 Google Adsense 审核要求高 propellerads 黄色信息 "},"java/":{"url":"java/","title":"Java","keywords":"","body":"Java 教程 编码规范 Google Java Style Guide Google Java编程风格指南 《Google Java Style Guide》翻译 Google Java编程风格规范 Style guides for Google-originated open-source projects java-code-styles 书籍推荐 《Effective java 中文版（第2版）》 java 78 条值得注意的地方 《Java编程思想(第4版)》 《JAVA 2核心技术卷II：高级特性(原书第7版)》 《Java Web开发详解--XML+XSLT+Servlet+JSP深入剖析与实例应用》 在线教程 IBM Java 编程入门 java分三个方向 J2ME,嵌入式设备，安卓就是目前最大的J2ME平台，不过其使用的不是JVM，而是谷歌自己开发的虚拟机 J2SE，桌面编程，基本没落，需要JVM支持 J2EE，web方向的编程 Java修饰符 类 类内部 本包 子类 外部包 public √ √ √ √ protected √ √ √ × no modifier √ √ × × private √ × × × 方法 类内部 本包 子类 外部包 public √ √ √ √ protected √ √ √ × no modifier √ √ × × private √ × × × no modifier = package-private，不加修饰语 Java变量 局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。 继承关键字 extends 关键字 extends 只能继承一个类 implements 关键字 可以同时继承多个接口（接口跟接口之间采用逗号分隔） final static Java关键字final、static使用总结 final final 类不能被继承，没有子类，final类中的方法默认是final的。 final 方法不能被子类的方法覆盖，但可以被继承。 final 成员变量表示常量，只能被赋值一次，赋值后值不再改变。 final 不能用于修饰构造方法。 注意：父类的private成员方法是不能被子类方法覆盖的，因此private类型的方法默认是final类型的。 static static 表示不要实例化就可以使用 被static修饰的成员变量和成员方法独立于该类的任何对象。 用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 Java 集合框架 参考 Java - 集合框架完全解析 Collection接口：处理对象集合的根接口 List：允许重复的有序集合 ArrayList：用数组存储元素，这个数组可以动态创建 LinkedList：链表中存储元素 Set：不包含重复的元素 HashSet LinkedHashSet TreeSet Queue：先进先出的数据结构，元素在队列末尾添加，在队列头部删除。 Map接口：存储键值对映射的容器类 HashMap：基于哈希表的Map接口的非同步实现 数组与链表的区别： 数组固定的长度顺序存储。如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少或不插入和删除元素，就应该用数组。 链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。 所以如果除了在末尾外不能在其他位置插入或者删除元素，那么ArrayList效率更高，如果需要经常插入或者删除元素，就选择LinkedList。 Map 参考 Initialize a HashMap in Java size 为 0 或 1 不可变 // size 为 0 Collections.emptyMap(); // size 为 0 Collections.singletonMap(\"Key\", \"value\"); 其它情况 使用 Guava，ImmutableMap.of 有长度限制 // 不可变 Map ImmutableMap.of(\"Title\", \"My New Article\", \"Title2\", \"Second Article\"); // 可变 Map Maps.newHashMap(ImmutableMap.of(\"Title\", \"My New Article\", \"Title2\", \"Second Article\")) List JSON to java bean jsonschema2pojo sodhanalibrary 嵌套类 静态成员类：非内部类，最好当作普通类 非静态成员类：内部类， 匿名类：内部类， 局部类：内部类， 泛型 通配符的使用 Java 泛型总结（三）：通配符的使用 上边界限定通配符 class Fruit {} class Apple extends Fruit {} // 使用通配符 flist 可以放 Fruit 和其子类。 List flist = new ArrayList(); // 这行会报 Compile Error: can’t add any type of object: 错 // 使用通配符失去了向这个 List 添加任何对象的能力 flist.add(new Apple()); 下边界限定通配符 生产者用 消费者用 public class Collections { public static void copy(List dest, List src) { for (int i=0; i 无边界通配符 List list 表示 list 是持有某种特定类型的 List，但是不知道具体是哪种类型。那么我们可以向其中添加对象吗？当然不可以，因为并不知道实际是哪种类型，所以不能添加任何类型，这是不安全的。 引用 Java中存在四种引用，它们由强到弱依次是：强引用、软引用、弱引用、虚引用。下面我们简单介绍下除弱引用外的其他三种引用： 强引用（Strong Reference）：通常我们通过new来创建一个新对象时返回的引用就是一个强引用，若一个对象通过一系列强引用可到达，它就是强可达的(strongly reachable)，那么它就不被回收 软引用（Soft Reference）：软引用和弱引用的区别在于，若一个对象是弱引用可达，无论当前内存是否充足它都会被回收，而软引用可达的对象在内存不充足时才会被回收，因此软引用要比弱引用“强”一些 弱引用(Weak Reference)：弱引用对象的存在不会阻止它所指向的对象变被垃圾回收器回收。弱引用最常见的用途是实现规范映射(canonicalizing mappings，比如哈希表）。 虚引用（Phantom Reference）：虚引用是Java中最弱的引用，那么它弱到什么程度呢？它是如此脆弱以至于我们通过虚引用甚至无法获取到被引用的对象，虚引用存在的唯一作用就是当它指向的对象被回收后，虚引用本身会被加入到引用队列中，用作记录它指向的对象已被销毁。 注解 深入理解Java注解类型(@Annotation) 深入浅出Java注解 注解的作用 格式检查：告诉编译器信息，比如被@Override标记的方法如果不是父类的某个方法，IDE会报错； 减少配置：运行时动态处理，得到注解信息，实现代替配置文件的功能； 减少重复工作：比如第三方框架xUtils，通过注解@ViewInject减少对findViewById的调用，类似的还有（JUnit、ActiveAndroid等）； 注解的申明 // @Target(ElementType.METHOD) 申请注解只能用在 方法 @Target(ElementType.METHOD) // @Retention(RetentionPolicy.RUNTIME) 表示该注解生存期是运行时 @Retention(RetentionPolicy.RUNTIME) // @interface Test 声明了 Test 注解 public @interface Test { } 重载与重写 override 重写、覆盖，替换父类的方法 overload 重载，方法名相同，但是参数类型或数量不同 常量、注解和枚举 纯常量场景：常量只是作为全局配置数据使用； 分组常量场景：归属于同一分组的常量； 分组且存在对应关系的常量场景：常量归属于同一分组，且另一方面常量之间存在对应关系。 参考 优先使用注解，慎用枚举 枚举性能很差，所以优先使用枚举 JavaDoc Javadoc Tool How to Write Doc Comments for the Javadoc Tool IOC 控制反转 DI 依赖注入（Dependency Injection） 依赖注入(DI)和控制反转(IOC)是从不同的角度的描述的同一件事情，就是指通过引入IOC容器，利用依赖关系注入的方式，实现对象之间的解耦 AOP 面向切面编程 "},"java/junit.html":{"url":"java/junit.html","title":"JUnit","keywords":"","body":"JUnit References https://vther.github.io/test-junit/ "},"java/java-servlet.html":{"url":"java/java-servlet.html","title":"Java Servlet","keywords":"","body":"Java Servlet Java Servlet完全教程 Servlet 简介 Servlet 单例多线程 Servlet如何处理多个请求访问？ Servlet容器默认是采用单实例多线程的方式处理多个请求的： 1.当web服务器启动的时候（或客户端发送请求到服务器时），Servlet就被加载并实例化(只存在一个Servlet实例)； 2.容器初始化化Servlet主要就是读取配置文件（例如tomcat,可以通过servlet.xml的设置线程池中线程数目，初始化线程池通过web.xml,初始化每个参数值等等。 3.当请求到达时，Servlet容器通过调度线程(Dispatchaer Thread) 调度它管理下线程池中等待执行的线程（Worker Thread）给请求者； 4.线程执行Servlet的service方法； 5.请求结束，放回线程池，等待被调用； （注意：避免使用实例变量（成员变量），因为如果存在成员变量，可能发生多线程同时访问该资源时，都来操作它，照成数据的不一致，因此产生线程安全问题） References Java面试题：Servlet是线程安全的吗？ "},"java/high-concurrence.html":{"url":"java/high-concurrence.html","title":"高并发","keywords":"","body":"高并发 进程-线程-协程 区别 Process(进程): 一个 Tomcat 实例是一个进程。一个 JVM 对应一个进程 Thread(线程): Tomcat BIO 模式的每个请求是一个线程。每个请求可以创建多个线程同时处理多个业务 Coroutine(协程): Fiber 或者 GreenThread 任务 Runnable: 无返回的任务 Callable: 有返回的任务 Future: 保存异步处理结果 FutureTask 构造方法一：public FutureTask(Runnable runnable, V result) Future.get() 得到 FutureTask 构建方法里的 result 构造方法二：public FutureTask(Callable callable) Future.get() 得到 Callable 的返回值 线程 中断线程 守护线程 守护线程 t.setDaemon(true) 守护线程的唯一作用就是为其他线程提供服务。java虚拟机退出时Daemon线程中的finally代码块并不一定会执行 线程同步 synchronized Lock Lock ReentrantLock 重入锁 线程间通信 synchronied 关键字等待/通知机制 条件对象的等待/通知机制 Java 并发编程 java.util.concurrent Executor 框架 异步转同步 使用wait和notify方法 使用条件锁 Future CountDownLatch: 需要知道有多少个任务 CyclicBarrier: 需要知道有多少个任务 Phaser: 可动态 register Future CompletableFuture Java8 CompletableFuture: 相当于 \bOC 的 dispatch_queue，JS 的 Promise ForJoinPool 同步器 生产者消费者 BlockingQueue Disruptor Disruptor 使用 CAS 实现无锁设计 References Java 实现生产者 – 消费者模型 高性能队列——Disruptor ThreadLocal 使用场景 实现单个线程单例以及单个线程上下文信息存储，比如交易id等 实现线程安全，非线程安全的对象使用ThreadLocal之后就会变得线程安全，因为每个线程都会有一个对应的实例 承载一些线程相关的数据，避免在方法中来回传递参数 书籍 《Java并发编程的艺术》 《实战Java高并发程序设计》 《Java性能权威指南》 书籍下载 https://github.com/DeppWang/Java-Books https://github.com/guanpengchn/awesome-books References 《Java核心技术 卷 \bⅠ》 第 14 \b章 并发 通过实例理解 JDK8 的 CompletableFuture "},"java/collection.html":{"url":"java/collection.html","title":"集合","keywords":"","body":"集合 参考 Java - 集合框架完全解析 Collection接口：处理对象集合的根接口 List：允许重复的有序集合 ArrayList：用数组存储元素，这个数组可以动态创建 LinkedList：链表中存储元素 Set：不包含重复的元素 HashSet LinkedHashSet TreeSet Queue：先进先出的数据结构，元素在队列末尾添加，在队列头部删除。 Map接口：存储键值对映射的容器类 HashMap：基于哈希表的Map接口的非同步实现 TreeMap: 基于红黑树的 Map，key 排序 数组与链表的区别： 数组固定的长度顺序存储。如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少或不插入和删除元素，就应该用数组。 链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。 所以如果除了在末尾外不能在其他位置插入或者删除元素，那么ArrayList效率更高，如果需要经常插入或者删除元素，就选择LinkedList。 Map TreeMap TreeMap是一个有序的key-value集合，基于红黑树（Red-Black tree）的 NavigableMap实现。 TreeMap是根据key进行排序的，它的排序和定位需要依赖比较器或覆写Comparable接口，也因此不需要key覆写hashCode方法和equals方法，就可以排除掉重复的key，而HashMap的key则需要通过覆写hashCode方法和equals方法来确保没有重复的key。 TreeMap的查询、插入、删除效率均没有HashMap高，一般只有要对key排序时才使用TreeMap。 TreeMap的key不能为null，而HashMap的key可以为null。 TreeMap不是同步的。如果多个线程同时访问一个映射，并且其中至少一个线程从结构上修改了该映射，则其必须 外部同步。 References java集合系列——Map之TreeMap介绍（九）Queue BlockingQueue 放入数据： offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳, 　　　　则返回true,否则返回false.（本方法不阻塞当前执行方法的线程） offer(E o, long timeout, TimeUnit unit),可以设定等待的时间，如果在指定的时间内，还不能往队列中 　　　　加入BlockingQueue，则返回失败。 put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断 　　　　直到BlockingQueue里面有空间再继续. 获取数据： poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间, 　　　　取不到时返回null; poll(long timeout, TimeUnit unit)：从BlockingQueue取出一个队首的对象，如果在指定时间内， 　　　　队列一旦有数据可取，则立即返回队列中的数据。否则知道时间超时还没有数据可取，返回失败。 take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到 　　　　BlockingQueue有新的数据被加入; drainTo():一次性从BlockingQueue获取所有可用的数据对象（还可以指定获取数据的个数）， 　　　　通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁。 LinkedBlockingQueue 线程安全的阻塞队列，实现了先进先出等特性，是作为生产者消费者的首选 ConcurrentLinkedQueue 线程安全的非阻塞队列．Queue中元素按FIFO原则进行排序．采用CAS操作，来保证元素的一致性。 "},"java/chaining-optionals.html":{"url":"java/chaining-optionals.html","title":"Chaining Optionals","keywords":"","body":"Chaining Optionals "},"java/zip.html":{"url":"java/zip.html","title":"zip","keywords":"","body":"zip zip ZIP压缩算法详细分析及解压实例解释 java zip ZipOutputStream 压缩多个文件 public void zipFolder(String sourceFileFolder, String zipFilePath) throws Exception { FileOutputStream fos = new FileOutputStream(zipFilePath); ZipOutputStream zipOut = new ZipOutputStream(fos); for (File fileToZip : new File(sourceFileFolder).listFiles()) { FileInputStream fis = new FileInputStream(fileToZip); ZipEntry zipEntry = new ZipEntry(fileToZip.getName()); zipOut.putNextEntry(zipEntry); byte[] bytes = new byte[1024]; int length; while ((length = fis.read(bytes)) >= 0) { zipOut.write(bytes, 0, length); } fis.close(); } zipOut.close(); fos.close(); } Apache Commons Compress ZipArchiveOutputStream References Zipping and Unzipping in Java Apache Commons Compress "},"java/check-style.html":{"url":"java/check-style.html","title":"CheckStyle","keywords":"","body":"CheckStyle GitHub 官网 配置文档 CheckStyle 检查规则中文翻译 CheckStyle 配置 从 Checkstyle configuration for 'Google Java Style' 下载 Google Java Style Guide 的 CheckStyle 配置文件，并做一些修改后存储到 ~/shimo-ot-check-style.xml IDEA 安装 CheckStyle-IDEA 插件 安装插件 IntelliJ IDEA > Preferences > Plugins: 搜索 CheckStyle-IDEA > Install 配置插件 IntelliJ IDEA > Preferences > CheckStyle > Configuration File > + > ~/shimo-ot-check-style.xml > OK Gradle 集成 CheckStyle The Checkstyle Plugin How to add Checkstyle and FindBugs plugins in a gradle based project 修改 build.gradle 如下： apply plugin: 'checkstyle' checkstyle { toolVersion '7.8.1' configFile file(\"config/checkstyle/checkstyle.xml\") } checkstyleMain { source ='src/main/java' } checkstyleTest { source ='src/test/java' } 运行 ./gradlew check 命令时会运行 checkstyleMain 和 checkstyleTest 两个任务 git commit 自动运行 CheckStyle "},"java/lombok.html":{"url":"java/lombok.html","title":"Lombok","keywords":"","body":"Lombok GitHub 官网 安装 Gradle 参考 https://projectlombok.org/setup/gradle repositories { mavenCentral() } dependencies { compileOnly 'org.projectlombok:lombok:1.18.8' annotationProcessor 'org.projectlombok:lombok:1.18.8' } IDEA 插件 参考 https://projectlombok.org/setup/intellij 安装插件 Go to File > Settings > Plugins Click on Browse repositories... Search for Lombok Plugin Click on Install plugin Restart IntelliJ IDEA 参考 Setting up Lombok with Eclipse and Intellij 配置插件 需要 Settings > Build > Compiler > Annotation Processors 开启 Annotation Processing "},"java/jvm.html":{"url":"java/jvm.html","title":"JVM","keywords":"","body":"JVM 运行时数据区域 程序计数器 Java 虚拟机栈 本地方法栈 Java 堆 方法区 运行时常量池 直接内存。 NIO 直接使用物理内存 Java 堆 新生代 Eden 空间 From Survivor 空间 To Survivor 空间 老年代 GC 垃圾回收策略 垃圾收集算法 标记 - 清除算法（Mark-Sweep） -- 老年代 复制算法（Copying） -- 新生代 标记 - 整理算法（Mark-Compact） -- 老年代 分代收集算法（Generational Collection） 垃圾收集器 Serial 集体器 ParNew（Parallel New Generation） 收集器 Parallel Scavenge 收集器 Serial Old 收集器 Parallel Old 收集器 CMS（Concurrent Mark Sweep）收集器 G1（Garbage - First）收集器 MinorGC Eden 空间不够时，进行 MinorGC 虚拟机在进行 minorGC 之前会判断老年代最大的可用连续空间是否大于新生代的所有对象总空间 1、如果大于的话，直接执行 minorGC 2、如果小于，判断是否开启 HandlerPromotionFailure，没有开启直接 FullGC 3、如果开启了HanlerPromotionFailure, JVM 会判断老年代的最大连续内存空间是否大于历次晋升平均值的大小，如果小于直接执行 FullGC 4、如果大于的话，执行 minorGC FullGC 老年代空间不足 如果创建一个大对象，Eden区域当中放不下这个大对象，会直接保存在老年代当中，如果老年代空间也不足，就会触发Full GC。为了避免这种情况，最好就是不要创建太大的对象。 持久代空间不足 如果有持久代空间的话，系统当中需要加载的类，调用的方法很多，同时持久代当中没有足够的空间，就出触发一次Full GC YGC出现promotion failure promotion failure发生在Young GC, 如果Survivor区当中存活对象的年龄达到了设定值，会就将Survivor区当中的对象拷贝到老年代，如果老年代的空间不足，就会发生promotion failure， 接下去就会发生Full GC. 统计YGC发生时晋升到老年代的平均总大小大于老年代的空闲空间 在发生YGC是会判断，是否安全，这里的安全指的是，当前老年代空间可以容纳YGC晋升的对象的平均大小，如果不安全，就不会执行YGC,转而执行FullGC。 显示调用System.gc 这里调用了 System.gc 并不一定会立马就触发FullGC 控制参数 -Xms设置堆的最小空间大小。 -Xmx设置堆的最大空间大小。 -XX:NewSize设置新生代最小空间大小。 -XX:MaxNewSize设置新生代最大空间大小。 -XX:PermSize设置永久代最小空间大小。 -XX:MaxPermSize设置永久代最大空间大小。 -Xss设置每个线程的堆栈大小。 "},"java/profiler.html":{"url":"java/profiler.html","title":"Profiler","keywords":"","body":"Profiler 性能分析器 JDK 监控和故障处理工具 jps 显示指定系统内所有的 HotSpot 虚拟机进程 jstat 收集 HotSpot 虚拟机各方面的运行数据 jinfo 显示虚拟机配置信息 jmap 生成虚拟机的内存转储快照（heapdump 文件） jhat 用于分析 headpdump 文件，可以用更强大的 VisualVM 替代 jstack 显示虚拟机的线程快照 JConsole jconsole VisualVM 自带的 jvisualvm Debug 断点的时候无法抽样，可以用 sleep() 代替。 JProfiler dump 先获取进度 ID # ps -ef | grep java root 1 0 1 19:32 ? 00:00:31 /usr/local/java/jre/bin/java heap dump： JDK 自带工具 jmap jmap -dump:format=b,file=heap.hprof 1 thread dump： JDK 自带工具 jstack jstack 1 > thread.txt remote jstatd jstatd - Virtual Machine jstat Daemon jstack 内存 dump 到本地 jstack > memory.dump JetBrains JVM Debugger Memory View plugin IntelliJ IDEA 自带的 JVM 调试器 References Top 5 Java Profilers Revealed: Real world data with VisualVM, JProfiler, Java Mission Control, YourKit and Custom tooling. "},"java/disruptor.html":{"url":"java/disruptor.html","title":"Disruptor","keywords":"","body":"Disruptor GitHub Examples Document 使用 CAS 实现无锁设计 核心概念 参考 Core Concepts 基本概念 Ring Buffer 缓冲区，事件存储和更新。 Sequence 事件的序号 Sequencer 此接口有两个实现类 SingleProducerSequencer、MultiProducerSequencer ，它们定义在生产者和消费者之间快速、正确地传递数据的并发算法。 Sequence Barrier 由Sequencer生成，并且包含了已经发布的Sequence的引用，这些的Sequence源于Sequencer和一些独立的消费者的Sequence。它包含了决定是否有供消费者来消费的Event的逻辑。 Wait Strategy 等待下一个事件的策略 Event 生产者和消费者之间进行交换的数据的事件 EventHandler 相关的概念 所有生产者和消费者串行或并行处理 每个 Event EventHandler 事件消费者 实现事件处理的逻辑 EventProcessor 事件处理器 BatchEventProcessor 包含了 event loop 有效的实现，并且将回调到一个 EventHandler 接口的实现对象。 Producer 事件消费者 调用 RingBuffer::publish，把 sequence 标记为可执行 WorkHandler 相关的概念 每个 Event 只会被一个生产者和消费者使用 WorkHandler Work 消费者 WorkProcessor 确保每个 sequence 只被一个 processor 消费，在同一个 WorkPool 中的处理多个 WorkProcessor， 不会消费同样的 sequence。 WorkerPool WorkProcessor 池，其中 WorkProcessor 将消费 Sequence，所有任务可以在实现 WorkHandler 接口的 worker 之间移交。 第一个 Event 只会被生成一次、消费一次 LifecycleAware 当 BatchEventProcessor 启动和停止时，实现这个接口用于接收通知。 ExceptionHandler 生产者模式 SingleProducerSequencer 适用于只有一个 Producer，非线程安全 MultiProducerSequencer 适用于只有多个 Producer，线程安全，使用 CAS 做了线程安全处理 RingBuffer Size 生产者插入数据到 RingBuffer 的时候，如果 RingBuffer 已满，就等待 RingBuffer 空间 WaitStrategy 等待策略 BlockingWaitStrategy 是最低效的策略，但其对CPU的消耗最小并且在各种不同部署环境中能提供更加一致的性能表现； SleepingWaitStrategy 的性能表现跟 BlockingWaitStrategy 差不多，对 CPU 的消耗也类似，但其对生产者线程的影响最小，适合用于异步日志类似的场景； （spin， then yield，然后sleep(LockSupport.parkNanos(1L))在性能和CPU占用率之间做了平衡。） YieldingWaitStrategy 适合用于低延迟的系统。在要求极高性能且事件处理线数小于 CPU 逻辑核心数的场景中，推荐使用此策略；例如，CPU开启超线程的特性。 （使用spin, Thread.yield()方式） BusySpinWaitStrategy 这种策略有最高的性能，但也有最高的部署边境限制。这种等待策略应该只用于事件处理者线程小于CPU物理核心数。 References JAVA并发编程 之 LMAX Disruptor使用实例（高效解决生产者与消费者问题） "},"java/spot-bugs.html":{"url":"java/spot-bugs.html","title":"spotbugs","keywords":"","body":"spotbugs 参考 The FindBugs Plugin，FindBugs 将不支持 java9、Gradle 6.0，使用 SpotBugs 替代 安装 参考 official Gradle Plugin page 插入 plugins { id \"com.github.spotbugs\" version \"1.6.9\" } 到 build.gradle [注意] 文章编辑日只有 1.6.9 版本可以使用，更高版本会报 Could not create an instance of type com.github.spotbugs.internal.spotbugs.SpotBugsExecutor. 错误 配置 参考 configure-gradle-plugin spotbugs { toolVersion = \"3.1.12\" sourceSets = [sourceSets.main] ignoreFailures = true reportsDir = file(\"$project.buildDir/spotbugsReports\") effort = \"max\" reportLevel = \"high\" visitors = [\"FindSqlInjection\", \"SwitchFallthrough\"] omitVisitors = [\"FindNonShortCircuit\"] includeFilter = file(\"$rootProject.projectDir/config/spotbugs/includeFilter.xml\") excludeFilter = file(\"$rootProject.projectDir/config/spotbugs/excludeFilter.xml\") } 进行配置 Filter Chapter 8. Filter Files 安装 IDEA 插件 IntelliJ IDEA > Preferences > Plugins > Marketplace > 搜索 FindBugs-IDEA > Install FindBugs-IDEA 插件支持 SpotBugs 使用 生成报告 只检查 spotbugs main $ ./gradlew spotbugsMain 检查所有的 $ ./gradlew check 报告文件目录： build/spotbugsReports/main.xml IDEA 查看报告 IDEA 下方 FindBugs-IDEA > 导入按钮（Import previous saved Bug Collection > 选择刚刚生成的报告文件 References GitHub 官方文档 official Gradle Plugin page "},"java/high-precision-calculation.html":{"url":"java/high-precision-calculation.html","title":"高精度计算","keywords":"","body":"高精度计算 涉及货币等对精度敏感的数据使用 用 BigDecimal "},"java/queue.html":{"url":"java/queue.html","title":"Queue","keywords":"","body":"Queue 队列 Collection Set List Queue: 队列 Deque: 双端队列，在 Queue 接口的基础上增加了一些针对双端添加和删除元素的方法。 AbstractQueue: 非阻塞队列 PriorityQueue: 类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位。 ConcurrentLinkedQueue: 是基于链接节点的、线程安全的队列。并发访问不需要同步。 BlockingQueue: 阻塞队列 > ArrayBlockingQueue ：一个由数组支持的有界队列。 LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。 PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。 DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。 SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。 References java队列——queue详细分析 Java集合（七） Queue详解 "},"java/http-client.html":{"url":"java/http-client.html","title":"HttpClient","keywords":"","body":"HttpClient 同步 & 异步 HttpAsyncClients 利用 NIO 实现异步非阻塞 IO HttpClients 利用 BIO 实现同步阻塞 IO 连接池 PoolingHttpClientConnectionManager BIO PoolingNHttpClientConnectionManager NIO 每个 host 建立连接后 keep alive，之后所有该 host 的请求使用同一个连接 多线程 参考 Chapter 2. Connection management 2.4. Multithreaded request execution 需要在建立请求时使用多线程 上传文件 BIO MultipartEntity NIO MultipartEntity is inherently blocking. It can only generate its content by writing it out to an OutputStream through #writeTo() method. It does not support #getContent() method, which makes it impossible to use with a non-blocking I/O model without buffering. You can wrap the MultipartEntity instance with BufferedHttpEntity in order to make it compatible with the HttpAsyncClient's non-blocking I/O model. EntityAsyncContentProducer BufferedHttpEntity References https://github.com/mfornos/glaze-http/blob/master/glaze-core/src/main/java/glaze/client/async/DefaultAsyncClient.java#L283 References HttpClient 中的三个超时详解 "},"java/run.html":{"url":"java/run.html","title":"运行","keywords":"","body":"运行 "},"java/format.html":{"url":"java/format.html","title":"Format","keywords":"","body":"Format java.text.Format 子类 DateFormat 日期 MessageFormat 消息 NumberFormat 数字 方法 format(Object obj, StringBuffer toAppendTo, FieldPosition pos) formatToCharacterIterator(Object obj) parseObject(String source, ParsePosition pos) FieldPosition NumberFormat _FIELD 常量 FRACTION_FIELD 分数域 INTEGER_FIELD 整数域 Format.Field 常量 CURRENCY 货币 DECIMAL_SEPARATOR 小数点 ParsePosition 解析过程中跟踪当前位置 NumberFormat 数字格式化 getPercentInstance 百分比 getCurrencyInstance 货币 DateFormat 日期时间格式化 getDateInstance getTimeInstance getDateTimeInstance "},"java/pmd.html":{"url":"java/pmd.html","title":"PMD","keywords":"","body":"PMD 安装 gradle gradle 配置参考 Gradle 插件 pmdMain pmdTest pmdSourceSet 任务配置 pmd 任务配置 apply plugin: 'pmd' pmd { toolVersion = \"6.16.0\" ruleSets = [] // Remove built-in rule sets，必须有，否则 ruleSet.xml 有些规划无法生效 ruleSetFiles file(\"${project.rootDir}/config/pmd/ruleset.xml\") } pmdMain { source = 'src/main/java' excludes = [ \"**/*.kt\", \"**/package/example/*.java\", \"**/FileExample.java\" ] } pmdTest { source = 'src/test/java' excludes = [\"**/*.kt\"] } 规则 参考文档 PMD 官方文档 Shimo PMD Rules 安装 IDEA 插件 安装： IntelliJ IDEA > Preferences > Plugins > Marketplace > 搜索 PMDPlugin > Install 垃圾。不支持 exclude 文件，也不能查看 gradle 生成的文件。 使用 生成报告 只检查 pmd main $ ./gradlew pmdMain 检查所有的 $ ./gradlew check 报告文件目录： build/reports/pmd/main.html References GitHub Documentation "},"java/coroutine.html":{"url":"java/coroutine.html","title":"Java 协程（coroutine）","keywords":"","body":"Java 协程（coroutine） Java 编写程序都运行在在 Java 虚拟机(JVM)中，在 JVM 的内部，程序的多任务是通过线程来实现的。 多线程： java web kilim 很久没维护 Quasar vert.x 说明 单线程控制权交替 协程的好处是减少上下文的切换，用户态线程 你敢开1w个协程跑，你开1w个线程试试，光上下文切换就是一比不小的开销 他底层一般还是多线程之类在调度 IO密集型应用: 多进程->多线程->事件驱动->协程 CPU密集型应用:多进程-->多线程 使用 Java and Kotlin 使用 Quasar 实现协程 Kotlin 协程 Java 的 Future 注意 协程需要 NIO，不能用 BIO，否则会阻塞线程 阻塞 I\\O: 网络请求等待，读写文件 CPU: 计算 异步工具库 Netty: 是异步网络通信库 AsynchronousFileChannel: 异步文件 I/O Vert.x3： 封装了Netty4，封装了AsynchronousFileChannel，而且Vert.x官方也出了一个相对应的封装了Quasar的库vertx-sync References 漫画：什么是协程？ 次时代Java编程(一) Java里的协程 "},"java/reflection.html":{"url":"java/reflection.html","title":"反射","keywords":"","body":"反射 Java反射机制可以让我们在编译期（Compile Time）之外的运行期（Runtime）获得任何一个类的字节码。包括接口、变量、方法等信息。还可以让我们在运行期实例化对象，通过调用get/set方法获取变量的值。 使用Java反射API的时候可以绕过Java默认的访问控制检查，比如可以直接获取到对象的私有域的值或是调用私有方法。只需要在获取到Constructor、Field和Method类的对象之后，调用setAccessible方法并设为true即可。有了这种机制，就可以很方便的在运行时刻获取到程序的内部状态。 代理模式：代理对象和被代理对象一般实现相同的接口，调用者与代理对象进行交互 动态代理：允许开发人员在运行时刻动态的创建出代理类及其对象。 Questions public final class getDeclaredFields() 获取不到所有 field References Java 反射机制 https://www.zhihu.com/question/47054187 "},"java/quasar.html":{"url":"java/quasar.html","title":"Quasar","keywords":"","body":"Quasar Github 在调度方面，Quasar中默认使用了JDK7以上才有的ForkJoinPool，它的优势就在于空闲的线程会去从其他线程任务队列尾部”偷取”任务来自己处理，因此也叫work-stealing功能。这个功能可以大大的利用CPU资源，不让线程白白空闲着。 "},"java/find-bugs.html":{"url":"java/find-bugs.html","title":"FindBugs","keywords":"","body":"FindBugs FindBugs 对 java 进行质量检查。 Since FindBugs is unmaintained and does not support bytecode compiled for Java 9 and above, the FindBugs plugin has been deprecated and is scheduled to be removed in Gradle 6.0. Please consider using the SpotBugs plugin instead. FindBugs 将不支持 java 9，Gradle 6.0 中将不支持，建议使用 SpotBugs References The FindBugs Plugin FindBugsExtension "},"java/visual-vm.html":{"url":"java/visual-vm.html","title":"VisualVM","keywords":"","body":"VisualVM 线程状态 NEW: 新建 RUNNABLE: 可运行 BLOCKED: 阻塞: synchronized 或者 Object.wait() WAITING: 无限期等待: Object.wait(),Thread.join(),LockSupport.park() TIMED_WAITING: 限期等待 TERMINATED: 结束 VisualVM 状态 运行: RUNNABLE 休眠: TIMED_WAITING (sleeping) 等待: WAITING (on object monitor): 状态是在等待一段时间 或者 唤醒动作的发生，进入“等待”状态是主动的 驻留: WAITING (parking)、TIMED_WAITING (parking): 监视: BLOCKED (on object monitor): "},"java/assert-exception.html":{"url":"java/assert-exception.html","title":"断言与异常","keywords":"","body":"断言与异常 断言是用来检查非法情况而不是错误情况的，用来帮开发者快速定位问题的位置。 异常处理用于对程序发生异常情况的处理，增强程序的健壮性和容错性。 assert assert 特性 assert默认是不启用的 assert抛出的异常AssertionError是继承自Error的 使用 assert 的三种情况 在私有方法中放置assert作为输入参数的校验 流程控制中不可能达到的区域 建立程序探针 References 断言（Assert）与异常（Exception） "},"kotlin/":{"url":"kotlin/","title":"kotlin","keywords":"","body":"kotlin 官网 Kotlin 语言中文站 Kotlin 语言中文站教程 Kotlin 官方维护的 awesome 语法 const VS val public VS open Lint ktlint kotlin native iOS 参考 Creating an iOS framework with Kotlin kotlin 生成 Example.framework Example.framework.dSYM 文件 Xcode 工程配置： Example.framework Example.framework.dSYM 拖到工程 Framework Search Path 添加 Example.framework 所在路径 Build Phases > + > New Copy Files Phase > + > 选择 Example.framework Example.framework.dSYM 这样 framework 报错的时候会有可读的错误日志。 xcode-kotlin Xcode 支持调试 kotlin 的插件 DroidconKotlin Xcode 支持调试 kotlin 的例子 "},"php/":{"url":"php/","title":"PHP","keywords":"","body":"PHP 官网 官方手册 PHP-FPM 一些说明 CGI 协议 CGI是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。 Fastcgi 协议 Fastcgi是用来提高CGI程序性能的。 php-cgi PHP的解释器。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理 PHP-FPM 实现了 Fastcgi 协议 调度 php-cgi 进程的程序 php-cli 命令行方式执行 php $ php test.php PHP 语法 variables PHP 中全局变量在函数中使用时必须声明为 global object extends 继承 类(class) 或者 接口(interface)，只可继承一个类，但可以继承多个接口 implements 实现 接口(interface) Heredoc $str = foo. Now, I am printing some {$foo->bar[1]}. This should print a capital 'A': \\x41 EOT; Heredoc 结构就象是没有使用双引号的双引号字符串，这就是说在 heredoc 结构中单引号不用被转义,不可以用在任意的静态数据环境中 Nowdoc public $var = Nowdoc 结构是类似于单引号字符串的,可以用在任意的静态数据环境中，最典型的示例是用来初始化类的属性或常量 public,private,protected的区别 public:权限是最大的，可以内部调用，实例调用等。 protected: 受保护类型，用于本类和继承类调用。 private: 私有类型，只有在本类中使用。 回调 http://oomusou.io/php/php-closure/ 匿名函数 没有指定名称的函数 Closure 也叫闭包, 用 匿名函数 做参数 Callback 伪类型,利用 Closure 实现回调 Callable Callable 官方文档 is_callable 伪类型,替代 Callback，支持以下四种格式 method string closure [Class,method string] [object,method string] 调用 callable call_user_func($callable); call_user_func_array($callable, [par1,par2]); /** * The callable types and normalizations are given in the table below: * * Callable | Normalization | Type * ---------------------------------+---------------------------------+-------------- * function (...) use (...) {...} | function (...) use (...) {...} | 'closure' * $object | $object | 'invocable' * \"function\" | \"function\" | 'function' * \"class::method\" | [\"class\", \"method\"] | 'static' * [\"class\", \"parent::method\"] | [\"parent of class\", \"method\"] | 'static' * [\"class\", \"self::method\"] | [\"class\", \"method\"] | 'static' * [\"class\", \"method\"] | [\"class\", \"method\"] | 'static' * [$object, \"parent::method\"] | [$object, \"parent::method\"] | 'object' * [$object, \"self::method\"] | [$object, \"method\"] | 'object' * [$object, \"method\"] | [$object, \"method\"] | 'object' * ---------------------------------+---------------------------------+-------------- * other callable | idem | 'unknown' * ---------------------------------+---------------------------------+-------------- * not a callable | null | false * * If the \"strict\" parameter is set to true, additional checks are * performed, in particular: * - when a callable string of the form \"class::method\" or a callable array * of the form [\"class\", \"method\"] is given, the method must be a static one, * - when a callable array of the form [$object, \"method\"] is given, the * method must be a non-static one. * */ 打印 echo 输出一个或者多个字符串或变量值 print()用于输出一个或多个字符串或变量值的信息。它只能打印出简单类型变量的值(如int,string)，不能打印数组和对象。 var_export()函数用于输出或返回一个变量的字符串表示。 var_dump()函数用于显示关于一个或多个表达式的结构信息，包括表达式的类型与值。 other 指令分隔符 文件末尾的 PHP 代码段结束标记可以不要，有些情况下当使用 include 或者 require 时省略掉会更好些，这样不期望的空白符就不会出现在文件末尾，之后仍然可以输出响应标头。在使用输出缓冲时也很便利，就不会看到由包含文件生成的不期望的空白符。 require require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING），脚本会继续运行。 加密 密码散列安全 password_hash 创建密码的哈希 password_verify 验证密码是否和哈希匹配 类型比较 PHP 类型比较表 比较运算符 Reference 在2016 年做PHP 开发是一种什么样的体验？（一） - V2EX "},"php/xdebug.html":{"url":"php/xdebug.html","title":"Xdebug","keywords":"","body":"Xdebug 官网 官方文档 PHP调试工具-Xdebug XDebug Helper for Google Chrome Remote Debugging 安装 mac 环境 brew install php56-xdebug php xdebug 相关的配置被存储在 /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini centos 环境 # pecl install xdebug Build process completed successfully Installing '/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so' install ok: channel://pecl.php.net/xdebug-2.5.0 configuration option \"php_ini\" is not set to php.ini location You should add \"zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\" to php.ini 配置 php.ini zend_extension=xdebug.so ;允许远程IDE调试 xdebug.remote_enable = 1 ;与许远程IDE连接方式 xdebug.remote_handler = \"dbgp\" ;远程调试时此处填写IDE所在客户机ip地址(允许调试的客户端IP) xdebug.remote_host=localhost ;多人进行远程调试，将尝试连接到发出HTTP请求的客户端,开启后 remote_host 失效 ;xdebug.remote_connect_back=1 ;xdebug服务器回调客户端的端口，默认 9000，如果本机开着php并运行在9000端口上，应该换一个端口 xdebug.remote_port = 9001 xdebug.idekey = PHPSTROM ;远程调试日志 xdebug.remote_log=\"/var/log/xdebug/remote.log\" 重启 PHP /etc/init.d/php-fpm restart PhpStorm 配置 Preferences > Languages & Frameworks > PHP > DEBUG: Xdebug : Debug port 设为 9001 Preferences > Languages & Frameworks > PHP > DEBUG > DBGp proxy： IDE key 设为 PHPSTORM,Host 设为 需要调试的服务的 Host，Port 设为 需要调试的服务的端口 Preferences > Languages & Frameworks > PHP > Servers >: 添加远程服务地址，勾上 Use path mappings,指定本文件对应远程文件路径。 两种方法 方法一. Run > Edit Configurations > + > PHP Remote Debug: 1. 设置 Name，2. 选择刚创建的 Server, 3. ide key 设为 PHPSTORM 方法二. Run > Edit Configurations > + > PHP Web Application: 1. 设置 Name，2. 选择刚创建的 Server, 3. Start URL 设为 / Run > Start Listening for PHP Debug Connections 开始监听 PhpStorm 中添加断点 浏览器打开需要调试的站点 并带上 XDEBUG_SESSION_START= eg: http://wftmaterialapibell.greedlab.com/?XDEBUG_SESSION_START=1112 curl 使用 xdebug curl -i -X POST -d '{\"some\":\"data\"}' http://your-local-domain -b XDEBUG_SESSION=PHPSTORM "},"php/Illuminate-Database.html":{"url":"php/Illuminate-Database.html","title":"Illuminate Database","keywords":"","body":"Illuminate Database GitHub 文档 中文文档 运行原生 SQL 语句 Connection 连接数据库和操作数据库 Illuminate\\Database\\Connection Scope 范围，相当于 sql 语句中加 where 约束 Query Scopes Illuminate\\Database\\Eloquent\\Scope Model 模型 Eloquent: Mutators Eloquent: Serialization \\Illuminate\\Database\\Eloquent\\Model SoftDeletes 如果需要软删除功能，Model 添加 /** * 使用软删除 */ use SoftDeletes; /** * 以时间的方式存储的字段. * * @var array */ protected $dates = ['deleted_at']; /** * 用时间戳形式存储时间. * * @var string */ protected $dateFormat = 'U'; Builder 拼装 sql 语句并执行 \\Illuminate\\Database\\Query\\Builder getModel() 获取模型 Collection Builder select 的结果 \\Illuminate\\Database\\Eloquent\\Collection Eloquent: Collections 错误 MassAssignmentException Mass Assignment laravel保护我们不能直接插入记录。比如，在一些特殊情况下我们需要直接利用表单的信息填充数据库记录，但是如果我们并没有在表单中添加密码字段，而黑客产生了密码字段连同我们的其他字段一起送回服务器，这将产生修改密码的危险，所以我们必须明确的告诉laravel我们的模型那些字段是可以直接填充的。 protected $fillable = [ 'title', 'body', 'published_at' ]; 表示，title, body, published_at 是可以直接填充的。 "},"php/laravel-api-auth-analyze.html":{"url":"php/laravel-api-auth-analyze.html","title":"laravel api 认证过程分析","keywords":"","body":"laravel api 认证过程分析 参考 API Authentication (Passport) API 授权 (Passport) Laravel 5.3 中使用 Laravel Passport 构建后端授权认证 API $ composer require laravel/passport phpseclib/phpseclib suggests installing ext-libsodium (SSH2/SFTP can make use of some algorithms provided by the libsodium-php extension.) phpseclib/phpseclib suggests installing ext-mcrypt (Install the Mcrypt extension in order to speed up a few other cryptographic operations.) phpseclib/phpseclib suggests installing ext-gmp (Install the GMP (GNU Multiple Precision) extension in order to speed up arbitrary precision integer arithmetic operations.) lcobucci/jwt suggests installing mdanter/ecc (Required to use Elliptic Curves based algorithms.) league/oauth2-server suggests installing indigophp/hash-compat (Polyfill for hash_equals function for PHP 5.5) Illuminate\\Foundation\\Auth\\AuthenticatesUsers \\Illuminate\\Contracts\\Auth\\StatefulGuard > \\Illuminate\\Auth\\GuardHelpers \\Illuminate\\Contracts\\Auth\\StatefulGuard > Illuminate\\Auth\\SessionGuard Illuminate\\Support\\Facades\\Password > \\Illuminate\\Contracts\\Auth\\PasswordBroker > \\Illuminate\\Auth\\Passwords\\PasswordBroker login 登录 @import \"resources/laravel-auth-analyze-login.dot\" 代码流程 \\Illuminate\\Foundation\\Auth\\AuthenticatesUsers.login register 注册 @import \"resources/laravel-auth-analyze-register.dot\" logout 注销 代码流程 \\Illuminate\\Foundation\\Auth\\AuthenticatesUsers.logout Illuminate\\Auth\\SessionGuard.logout sendResetLinkEmail 发送重置密码邮件 代码流程 Illuminate\\Foundation\\Auth\\SendsPasswordResetEmails.sendResetLinkEmail \\Illuminate\\Auth\\Passwords\\PasswordBroker.sendResetLink ResetsPasswords 重置密码 代码流程 Illuminate\\Foundation\\Auth\\ResetsPasswords.login "},"php/docker-php.html":{"url":"php/docker-php.html","title":"docker php","keywords":"","body":"docker php docker-php docker-php-github docker-php-doc "},"php/WorkerMan.html":{"url":"php/WorkerMan.html","title":"WorkerMan","keywords":"","body":"WorkerMan http://www.workerman.net/ 实现websocket 安装 先安装Composer,Composer需要PHP 5.3.2+才能运行。 Composer安装 $ curl -sS https://getcomposer.org/installer | php 这个命令会将composer.phar下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。 你可以使用--install-dir选项将Composer安装到指定的目录，例如： $ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin 当然也可以进行全局安装： $ curl -sS https://getcomposer.org/installer | php $ mv composer.phar /usr/local/bin/composer 在Mac OS X下也可以使用homebrew安装： brew tap josegonzalez/homebrew-php brew install josegonzalez/php/composer 不过通常情况下只需将composer.phar的位置加入到PATH环境变量就可以，不一定要全局安装。 Workerman安装 composer require workerman/workerman workerman会被安装在vendor/workerman/workerman cd vendor/workerman websocket服务 server.php count = 4; // Emitted when new connection come $ws_worker->onConnect = function($connection) { echo \"New connection\\n\"; }; // Emitted when data received $ws_worker->onMessage = function($connection, $data) { // Send hello $data $connection->send('hello ' . $data); }; // Emitted when connection closed $ws_worker->onClose = function($connection) { echo \"Connection closed\\n\"; }; // Run worker Worker::runAll(); 启动服务 php server.php start // debug调试模式，用于开发调试问题，当终端关闭后Workerman会随之关闭。 php server.php start -d // daemon守护进程模式，终端关闭不会影响Workerman。 php server.php stop php server.php restart php server.php reload 客户端请求 client.php count=3; $worker->onMessage = function($connection, $data) { $connection->send(\"HTTP/1.1 200 OK\\r\\nConnection: keep-alive\\r\\nServer: workerman\\1.1.4\\r\\n\\r\\nhello\"); }; Worker::runAll(); "},"php/laravel-web-auth-analyze.html":{"url":"php/laravel-web-auth-analyze.html","title":"laravel web 认证过程分析","keywords":"","body":"laravel web 认证过程分析 参考 用户认证 Illuminate\\Foundation\\Auth\\AuthenticatesUsers \\Illuminate\\Contracts\\Auth\\StatefulGuard > \\Illuminate\\Auth\\TokenGuard | Illuminate\\Auth\\SessionGuard Illuminate\\Support\\Facades\\Password > \\Illuminate\\Contracts\\Auth\\PasswordBroker > \\Illuminate\\Auth\\Passwords\\PasswordBroker login 登录 @import \"resources/laravel-auth-analyze-login.dot\" 代码流程 \\Illuminate\\Foundation\\Auth\\AuthenticatesUsers.login register 注册 @import \"resources/laravel-auth-analyze-register.dot\" logout 注销 代码流程 \\Illuminate\\Foundation\\Auth\\AuthenticatesUsers.logout Illuminate\\Auth\\SessionGuard.logout sendResetLinkEmail 发送重置密码邮件 代码流程 Illuminate\\Foundation\\Auth\\SendsPasswordResetEmails.sendResetLinkEmail \\Illuminate\\Auth\\Passwords\\PasswordBroker.sendResetLink ResetsPasswords 重置密码 代码流程 Illuminate\\Foundation\\Auth\\ResetsPasswords.login "},"php/tool.html":{"url":"php/tool.html","title":"工具","keywords":"","body":"工具 Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。 PECL（PHP 扩展模块） PECL 的全称是 The PHP Extension Community Library ，是一个开放的并通过 PEAR(PHP Extension and Application Repository，PHP 扩展和应用仓库)打包格式来打包安装的 PHP扩展库仓库。通过 PEAR 的 Package Manager 的安装管理方式，可以对 PECL 模块进行下载和安装。 "},"php/linux-install.html":{"url":"php/linux-install.html","title":"Linux + nginx + PHP 环境","keywords":"","body":"Linux + nginx + PHP 环境 Unix 系统下的 Nginx 1.4.x 步骤 1 root 用户登录 2 从 php mirror 下载 php-5.6.28 3 先安装 openssl wget http://cn2.php.net/distributions/php-5.6.28.tar.gz tar zxvf php-5.6.28.tar.gz cd php-5.6.28 ./configure --enable-fpm --with-mysql --with-pdo-mysql --with-openssl --with-zlib --enable-zip --with-curl --enable-intl --enable-mbstring make make test make install 安装后 /usr/local/bin/php-config 部分内容 extension_dir='/usr/local/lib/php/extensions/no-debug-non-zts-20131226' configure_options=\" '--enable-fpm' '--with-mysql' '--with-openssl' '--with-zlib' '--enable-zip' '--with-curl' '--enable-intl'\" 4 配置 php.ini 查看 php.ini 位置 # php --ini Configuration File (php.ini) Path: /usr/local/lib Loaded Configuration File: /usr/local/lib/php.ini Scan for additional .ini files in: (none) Additional .ini files parsed: (none) cp php.ini-development /usr/local/lib/php.ini 修改 vim /usr/local/lib/php.ini cgi.fix_pathinfo=0 date.timezone = Asia/Shanghai 配置 php-fpm.conf cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf vim /usr/local/etc/php-fpm.conf 修改 ; Unix user/group of processes ; Note: The user is mandatory. If the group is not set, the default user's group ; will be used. user = nobody group = nobody 添加 nobody 群组 groupadd nobody 配置 php-fpm cp sapi/fpm/php-fpm /usr/local/bin 配置 php 启动脚本 cp sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm chmod a+x /etc/init.d/php-fpm vim /etc/init.d/php-fpm prefix=/usr/local exec_prefix=${prefix} php_fpm_BIN=${exec_prefix}/sbin/php-fpm php_fpm_CONF=${prefix}/etc/php-fpm.conf php_fpm_PID=${prefix}/var/run/php-fpm.pid 5 启动 php-fpm /etc/init.d/php-fpm start 不重装PHP安装PHP模块/扩展 以安装 zlib 为例. 得到 php-config 路径 $ command -v php-config /usr/local/bin/php-config 得到 phpize 路径 $ command -v phpize /usr/local/bin/phpize $ cd php-5.6.28/ext/zlib $ cp config0.m4 config.m4 $ /usr/local/bin/phpize $ ./configure --with-php-config=/usr/local/bin/php-config $ make $ make test $ make install Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20131226/ /usr/local/php/php.ini 添加 extension = \"zlib.so\" 重启 php /etc/init.d/php-fpm restart 查看是否生效 php -m | grep zlib Questions 1 checking for location of ICU headers and libraries... not found configure: error: Unable to detect ICU prefix or no failed. Please verify ICU install prefix and make sure icu-config works. 解决方法： yum install -y icu libicu libicu-devel 2 configure: error: xml2-config not found. Please check your libxml2 installation. 解决方法： ubuntu apt-get install libxml2-dev CentOS yum install libxml2-devel 3 error: Unable to detect ICU prefix or no failed. Please verify ICU install prefix and make sure icu-config works. On RedHat/CentOS: # yum install libicu-devel On Debian/Ubuntu: # apt-get install libicu-dev "},"php/mac-install-php7.html":{"url":"php/mac-install-php7.html","title":"mac  安装 PHP7.1","keywords":"","body":"mac 安装 PHP7.1 Homebrew/homebrew-php 删除自带的php $ sudo mv /usr/bin/php /usr/bin/php.back 安装 nginx $ brew install nginx /usr/local/etc/nginx/nginx.conf 8080 改 80 安装 PHP 依赖 brew install libz xcode-select --install 安装 tap brew tap homebrew/dupes brew tap homebrew/versions brew tap homebrew/homebrew-php 查看安装参数 brew options php71 安装 php $ brew install php71 --with-pear --with-debug --with-mssql --with-homebrew-curl --with-imap --with-phpdbg The php.ini file can be found in: /usr/local/etc/php/7.1/php.ini ✩✩✩✩ PEAR ✩✩✩✩ If PEAR complains about permissions, 'fix' the default PEAR permissions and config: chmod -R ug+w /usr/local/opt/php71/lib/php pear config-set php_ini /usr/local/etc/php/7.1/php.ini system ✩✩✩✩ Extensions ✩✩✩✩ If you are having issues with custom extension compiling, ensure that you are using the brew version, by placing /usr/local/bin before /usr/sbin in your PATH: PATH=\"/usr/local/bin:$PATH\" PHP71 Extensions will always be compiled against this PHP. Please install them using --without-homebrew-php to enable compiling against system PHP. ✩✩✩✩ PHP CLI ✩✩✩✩ If you wish to swap the PHP you use on the command line, you should add the following to ~/.bashrc, ~/.zshrc, ~/.profile or your shell equivalent configuration file: export PATH=\"$(brew --prefix homebrew/php/php71)/bin:$PATH\" ✩✩✩✩ FPM ✩✩✩✩ To launch php-fpm on startup: mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist The control script is located at /usr/local/opt/php71/sbin/php71-fpm OS X 10.8 and newer come with php-fpm pre-installed, to ensure you are using the brew version you need to make sure /usr/local/sbin is before /usr/sbin in your PATH: PATH=\"/usr/local/sbin:$PATH\" You may also need to edit the plist to use the correct \"UserName\". Please note that the plist was called 'homebrew-php.josegonzalez.php71.plist' in old versions of this formula. With the release of macOS Sierra the Apache module is now not built by default. If you want to build it on your system you have to install php with the --with-httpd24 option. See brew options php71 for more details. To have launchd start homebrew/php/php71 now and restart at login: brew services start homebrew/php/php71 配置 php.ini vi /usr/local/etc/php/7.1/php.ini date.timezone = Asia/Shanghai 加入launchctl启动控制 mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/php71/homebrew.mxcl.php71.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist 启动服务 brew services start homebrew/php/php71 停止服务 brew services stop homebrew/php/php71 重启服务 brew services restart homebrew/php/php71 安装 php-xdebug brew install --build-from-source php71-opcache php71-xdebug "},"php/phpstorm.html":{"url":"php/phpstorm.html","title":"PhpStorm","keywords":"","body":"PhpStorm 选择 PHP 版本: Preferences > Language & Frameworks > PHP > PHP language level: 5.6 选择 PHP 解释器: Preferences > Language & Frameworks > Interpreter > PHP language level: 5.6 Debug Xdebug: Preferences > Language & Frameworks > PHP > Debug > Xdebug Servers: Preferences > Language & Frameworks > PHP > Servers 添加 Config `` 修改 copyright Preferences > Editor > Copyright > Includes > PHP File Header 修改文件头 Preferences > Editor > File and Code Templates > Includes > PHP File Header 自动添加 namespaces PHP Namespaces and PSR Support in PhpStorm Preferences > Directories Built-In Web Server PHP Built-In Web Server 魔术方法代码补全 Code Completion for private/protected member variables when using magic __get() 类加上 @property 注释就可以 变量提示 /** * @var $admin Admin */ $admin; Database command + shift + F10，可以写 SQL 语句，会智能提示 Alt + Enter > Convert String literal to HEREDOC > Edit SQL Fragment 写 SQL 语句 快捷键 command + e 打开最近的文件 command + shift + o 快速查询文件 command + . 折叠或展开选中的代码 command + n 快事为每个成员属性生成 getter 及 setter 方法 注释 "},"php/async.html":{"url":"php/async.html","title":"异步","keywords":"","body":"异步 PHP实现异步调用方法研究 使用fscok实现异步调用PHP 关于PHP的异步调用 PHP非阻塞模式 "},"php/laravel-usage.html":{"url":"php/laravel-usage.html","title":"laravel 使用","keywords":"","body":"laravel 使用 laravel 使用 架构分析 服务容器 (Service Container) 服务提供者 (Service Providers) 容器接口(Facades) 原理 接口契约(Contracts) 路由 中间件 References 架构分析 服务容器 (Service Container) Illuminate\\Foundation\\Application extends Illuminate\\Container\\Container IoC(Inversion of Control) 是面向对象编程中的一种设计原则 DI(Dependency Injection) IoC 的一种实现 IoC 容器 Laravel 服务容器是管理类依赖和运行依赖注入的有力工具。依赖注入是一个花俏的名词，它实质上是指：类的依赖通过构造器或在某些情况下通过「setter」方法进行「注入」。 bind 方法创建实例不是单例模式，而是创建新的实例。 singleton 创建实例使用的是单例模式，每次返回同一个实例。 instance 绑定一个已经存在的对象至容器中,后面的调用都会从容器中返回指定的实例 绑定初始数据 singleton方法其实也是调用bind方法，只是最后一个参数是true，表示单例模式。 服务提供者 (Service Providers) Illuminate\\Support\\ServiceProvider 往容器里边注入依赖 容器接口(Facades) Illuminate\\Support\\Facades\\* 为应用程序的 服务容器 中可用的类提供了一个「静态」接口 在开发第三方扩展包时，如果需要使用和 Laravel 交互的扩展包，最好是注入 Laravel contracts 而不是使用 facades，因为扩展包不是在 Laravel 内部使用的，无法使用 Laravel 的 facades 的测试辅助函数。 原理 Facade 类利用了 __callStatic() 这个魔术方法来延迟调用容器中的对象的方法。 接口契约(Contracts) Illuminate\\Contracts\\* 是一组定义了框架核心服务的接口 Laravel 的 facades 提供一个简单的方法来使用服务，而不需要使用类型约束和在服务容器之外解析 contracts。大多数情况下，每个 facade 都有一个相应的 contract。 路由 对应 facade \\Illuminate\\Support\\Facades\\Route 对应 Contract \\Illuminate\\Routing\\Router 中间件 App\\Http\\Middleware References 解释清楚Laravel的Service Container, Service Provider，Contracts和Facade之间的关系 依赖注入与控制反转的PHP实现 再看控制反转(IoC)容器与依赖注入 "},"php/php-mongo.html":{"url":"php/php-mongo.html","title":"PHP Mongo","keywords":"","body":"PHP Mongo mongo VS mongodb mongo 老的 mongodb 驱动 MongoDB mongodb/mongo-php-driver-legacy mongodb 新的 mongodb 驱动，推荐 MongoDB driver mongo-php-library 对 MongoDB driver 封闭 PHP LIBRARY MANUAL mongo-php-library 的文档 Mac OS 安装驱动 brew reinstall --build-from-source php56-mongodb mongo-php-library 使用 composer require mongodb/mongodb --ignore-platform-reqs MongoDB driver 使用 MongoDB\\Driver\\Command 对应 Database Commands MongoDB\\Driver\\BulkWrite 对应 Bulk Operation Methods "},"php/laravel.html":{"url":"php/laravel.html","title":"laravel","keywords":"","body":"laravel 官网 官方文档 中文文档 目录 laravel 搭建环境 安装依赖 新建工程 中间件 路由 PhpStorm IntelliJ IDEA / PhpStorm Laravel Plugin barryvdh/laravel-ide-helper PhpStorm Laravel Live Templates artisan 命令 调试 搭建环境 安装依赖 PHP >= 5.6.4 OpenSSL PHP Extension PDO PHP Extension Mbstring PHP Extension Tokenizer PHP Extension XML PHP Extension 新建工程 安装 laravel composer global require \"laravel/installer\" 添加 laravel 到环境变量: 把 export PATH=\"$PATH:$HOME/.composer/vendor/bin\" # Add composer to PATH for scripting 添加到 ~/.bashrc 新建工程 composer create-project --prefer-dist laravel/laravel blog 中间件 构造方法 __construct(Application $app, Encrypter $encrypter) 运行方法 handle($request, Closure $next, $guard = null) 路由 在路由中可使用冒号 : 来区隔中间件名称与指派参数，多个参数可使用逗号作为分隔： PhpStorm Laravel Development using PhpStorm Laravel Development using PhpStorm IntelliJ IDEA / PhpStorm Laravel Plugin laravel PhpStorm 插件 barryvdh/laravel-ide-helper PhpStorm 支持 laravel 语法 安装依赖 composer require --dev barryvdh/laravel-ide-helper app/Providers/AppServiceProvider.php 添加 public function register() { if ($this->app->environment() !== 'production') { $this->app->register(\\Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider::class); } // ... } 到 providers 最后 为 Laravel Facades 生成自动提示文档。 生成 _ide_helper.php php artisan ide-helper:generate 为 Laravel 模型 生成自动提示文档 # 先安装dbal composer require doctrine/dbal php artisan ide-helper:models Post 生成 .phpstorm.meta.php 添加提示 php artisan ide-helper:meta PhpStorm Laravel Live Templates 模板 artisan 命令 php artisan tinker 进入命令行 调试 Laravel Debugbar 安装后只能在网页上看可视化的调试信息。API 方式的请求日志可以打开 storage/debugbar/ 文件夹下的日志文件，格式化后查看 "},"php/phpdoc.html":{"url":"php/phpdoc.html","title":"phpdoc","keywords":"","body":"phpdoc 官网 文档 安装 Installing 安装的依赖 = PHP 5.3.3 PHP intl 扩展 graphviz 有些模板需要 PHP xsl 扩展 pear channel-discover pear.phpdoc.org pear install phpdoc/phpDocumentor 生成文档 $ phpdoc run -d [directory to parse] -t [output directory] $ phpdoc -d ./src -t ./docs/api "},"php/high-precision-calculation.html":{"url":"php/high-precision-calculation.html","title":"高精度计算","keywords":"","body":"高精度计算 涉及货币等对精度敏感的数据使用 用 BCMath BCMath 任意精度数学 "},"php/interview.html":{"url":"php/interview.html","title":"面试","keywords":"","body":"面试 PHP面试题汇总 面试 PHP 语法 数字 字符串转数字 && 与 and 安全 SQL 注入 XSS(Cross-site scripting) 跨站脚本攻击 CSRF(Cross-site request forgery) 跨站伪造请求攻击 文件上传漏洞攻击 DDOS 分布式拒绝服务攻击 加密 PHP 语法 数字 0开头是八进制，0x开头是16进制 字符串转数字 如果是数字开头的话则转换成改数字比如\"15%\"会变成15,如果不是数字开头则会变成0 && 与 and 参考 运算符优先级 优先级不一样 安全 安全域 SQL 注入 参考 SQL 注入 永远不要使用超级用户或所有者帐号去连接数据库。 检查输入的数据是否具有所期望的数据格式。 要不择手段避免显示出任何有关数据库的信心，尤其是数据库结构 对于无法确定固定格式的变量，一定要进行特殊符号过滤或转义处理。 绑定变量使用预编译语句是预防SQL注入的最佳方式，使用 ？或者：代替参数。 XSS(Cross-site scripting) 跨站脚本攻击 XSS的攻击目标: 为了盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息。 XSS通常可以分为两大类： 一类是存储型XSS，恶意用户的Html输入Web程序->进入数据库->Web程序->用户浏览器 另一类是反射型XSS，主要做法是将脚本代码加入URL地址的请求参数里，请求参数进入程序后在页面直接输出，用户点击类似的恶意链接就可能受到攻击。 如何预防XSS： 坚决不要相信用户的任何输入，并过滤掉输入中的所有特殊字符 使用HTTP头指定类型 CSRF(Cross-site request forgery) 跨站伪造请求攻击 参考 9.1 预防CSRF攻击 攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求 要完成一次CSRF攻击，受害者必须依次完成两个步骤 ： 1.登录受信任网站A，并在本地生成Cookie 。 2.在不退出A的情况下，访问危险网站B。 如何预防CSRF： 1、正确使用GET,POST和Cookie； 2、在非GET请求中增加伪随机数； 在非GET方式的请求中增加随机数，这个大概有三种方式来进行： 为每个用户生成一个唯一的cookie token，所有表单都包含同一个伪随机值，这种方案最简单，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败，但是由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，所以这个方案必须要在没有XSS的情况下才安全。 每个请求使用验证码，这个方案是完美的，因为要多次输入验证码，所以用户友好性很差，所以不适合实际运用。 不同的表单包含一个不同的伪随机值 文件上传漏洞攻击 参考 06.文件上传漏洞 上传的文件可能是 PHP 等可执行文件 filepath 加 \\0 会阶段 URL， 预防措施： 建议使用算法来重命名文件名 单独设置文件服务器的域名，以防止XSS等利用同源策略发起的攻击。 文件上传的目录设置为不可执行。 禁止Web容器对上传文件目录下的文件执行脚本的能力。 DDOS 分布式拒绝服务攻击 DdoS攻击是利用一批受控制的机器向一台机器发起攻击，这样来势迅猛的攻击令人难以防备，因此具有较大的破坏性。 如果预防： 过滤不必要的服务和端口 检查访问者的来源 过滤所有RFC1918 IP地址 加密 可逆加密 对称加密：AES、DES 非对称加密：RSA 不可逆加密：md5、SHA-1 "},"php/mail.html":{"url":"php/mail.html","title":"PHP 使用 Mail","keywords":"","body":"PHP 使用 Mail 使用 sendmail Linux 下 可以使用 sendmail 工具发邮件 配置 sendmail php.ini 配置 sendmail-path 为 sendmail 路径 参考 http://php.net/manual/zh/mail.configuration.php#ini.sendmail-path 发送邮件 使用 Mail 函数 发送邮件 使用 PHPMailer PHPMailer/PHPMailer "},"php/mac-install.html":{"url":"php/mac-install.html","title":"Mac 下配置 PHP 环境","keywords":"","body":"Mac 下配置 PHP 环境 准备 关闭系统自带的apache $ sudo apachectl stop 如果你的apache已经加入了launchctl，使用下面的命令来关闭 $ sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 删除自带的php $ sudo rm -r /usr/bin/php nginx $ brew install nginx Docroot is: /usr/local/var/www The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo. nginx will load all files in /usr/local/etc/nginx/servers/. To have launchd start nginx now and restart at login: brew services start nginx Or, if you don't want/need a background service you can just run: nginx /usr/local/etc/nginx/nginx.conf 8080 改 80 运行 nginx $ sudo nginx #打开 nginx $ sudo nginx -s reload|reopen|stop|quit #重新加载配置|重启|停止|退出 nginx $ sudo nginx -t #测试配置是否有语法错误 加入launchctl启动控制 mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist php Homebrew/homebrew-php brew 默认没有 php 安装包： brew tap homebrew/dupes brew tap homebrew/versions brew tap homebrew/homebrew-php 查看安装参数 brew options php56 安装 php brew install php56 --with-imap --with-debug --enable-opcache The php.ini file can be found in: /usr/local/etc/php/5.6/php.ini 配置 php.ini date.timezone = Asia/Shanghai 加入launchctl启动控制 mkdir -p ~/Library/LaunchAgents cp /usr/local/opt/php56/homebrew.mxcl.php56.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist 启动服务 brew services start homebrew/php/php56 停止服务 brew services stop homebrew/php/php56 重启服务 brew services restart homebrew/php/php56 安装 php-xdebug brew install --build-from-source php56-opcache brew install --build-from-source php56-xdebug * /usr/local/etc/php/5.6/conf.d/ext-xdebug.ini was created, do not forget to remove it upon extension removal. * Validate installation via one of the following methods: * * Using PHP from a webserver: * - Restart your webserver. * - Write a PHP page that calls \"phpinfo();\" * - Load it in a browser and look for the info on the xdebug module. * - If you see it, you have been successful! * * Using PHP from the command line: * - Run `php -i \"(command-line 'phpinfo()')\"` * - Look for the info on the xdebug module. * - If you see it, you have been successful! PhpStorm 设置 Servers 设置运行、调试时用的服务 PhpStorm > Preferences > Language & Frameworks > Servers 端口必须是空闲的 PhpStorm 开始调试 PhpStorm > Run > Edit Configurations > + > PHP Web Application` Questions 问题 Cannot load Xdebug - it was built with configuration API220131226,NTS, whereas running engine is API220131226,NTS,debug 解决方法 参考 https://github.com/Homebrew/homebrew-php/issues/1320 brew reinstall --build-from-source php56-opcache brew reinstall --build-from-source php56-xdebug 安装 php-fpm Reference Mac OS使用brew安装Nginx、MySQL、PHP-FPM的LAMP开发环境 "},"php/framework-for-restfull.html":{"url":"php/framework-for-restfull.html","title":"适合写 Restfull API 的框架","keywords":"","body":"适合写 Restfull API 的框架 我是来说反例的，但凡用以下风格实现controller的，实现RESTFul都很不方便 class Controller { public function actionFoo() {} public function actionBar() {} } 因为RESTFul是对HTTP动作(GET/POST/PUT/DELETE/...)敏感的，用这种风格的Controller的框架来实现就不可避免的会出现以下这种代码 class Controller { public function actionFoo() { if (is_get) { /* 一坨代码 */ } else if (is_post) { /* 一坨代码 */ } else if (is_put) { /* 一坨代码 */ } else if (is_delete) { /* 一坨代码 */ } } } 最终在 Slim 和 Silex 选择了 Slim Reference php实现restful api有什么框架使用方便？ Top 12 Best PHP RESTful Micro Frameworks (Pro/Con) "},"php/pecl.html":{"url":"php/pecl.html","title":"pecl","keywords":"","body":"pecl mac 安装 pecl Install PEAR and PECL on Mac OS X "},"php/php-redis.html":{"url":"php/php-redis.html","title":"php 使用 redis","keywords":"","body":"php 使用 redis phpredis/phpredis ukko/phpredis-phpdoc PHP 安装 redis 扩展 phpredis/phpredis 查看版本 $ wget https://github.com/phpredis/phpredis/archive/3.1.1RC1.tar.gz $ tar zxvf 3.1.1RC1.tar.gz $ cd phpredis-3.1.1RC1/ # 进入 phpredis 目录 $ /usr/local/bin/phpize # php安装后的路径 $ ./configure --with-php-config=/usr/local/bin/php-config $ make $ make test $ make install php.ini 中添加 ; redis extension=redis.so 重启 PHP /etc/init.d/php-fpm restart Mac 安装 redis 模块 brew install --build-from-source php56-redis 安装代码提示 composer require --dev ukko/phpredis-phpdoc:dev-master connect 和 pconnect connect：脚本结束之后连接就释放了。 pconnect：脚本结束之后连接不释放，连接保持在php-fpm进程中。 所以使用pconnect代替connect，可以减少频繁建立redis连接的消耗。 "},"php/linux-install-php7.html":{"url":"php/linux-install-php7.html","title":"Linux + nginx + PHP7 环境","keywords":"","body":"Linux + nginx + PHP7 环境 Unix 系统下的 Nginx 1.4.x 步骤 root 用户登录 下载压缩文件 从 php mirror 下载 php-7.1.1 安装 openssl 安装依赖 yum install libc-client-devel libc-client ln -s /usr/lib64/libc-client.so /usr/lib/libc-client.so 安装 PHP cd php-7.1.1.tar.gz ./configure --with-libxml-dir --with-openssl --with-zlib --with-curl --enable-dba --with-imap-ssl --with-imap --enable-intl --enable-zip --with-pear --with-pdo-mysql --enable-fpm --enable-mbstring --with-kerberos=/usr make make test make install Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20160303/ Installing PHP CLI binary: /usr/local/bin/ Installing PHP CLI man page: /usr/local/php/man/man1/ Installing PHP FPM binary: /usr/local/sbin/ Installing PHP FPM config: /usr/local/etc/ Installing PHP FPM man page: /usr/local/php/man/man8/ Installing PHP FPM status page: /usr/local/php/php/fpm/ Installing phpdbg binary: /usr/local/bin/ Installing phpdbg man page: /usr/local/php/man/man1/ Installing PHP CGI binary: /usr/local/bin/ Installing PHP CGI man page: /usr/local/php/man/man1/ Installing build environment: /usr/local/lib/php/build/ Installing header files: /usr/local/include/php/ Installing helper programs: /usr/local/bin/ program: phpize program: php-config Installing man pages: /usr/local/php/man/man1/ page: phpize.1 page: php-config.1 Installing PEAR environment: /usr/local/lib/php/ [PEAR] Archive_Tar - already installed: 1.4.0 [PEAR] Console_Getopt - already installed: 1.4.1 [PEAR] Structures_Graph- already installed: 1.1.1 [PEAR] XML_Util - already installed: 1.3.0 [PEAR] PEAR - already installed: 1.10.1 Warning! a PEAR user config file already exists from a previous PEAR installation at '/root/.pearrc'. You may probably want to remove it. Wrote PEAR system config file at: /usr/local/etc/pear.conf You may want to add: /usr/local/lib/php to your php.ini include_path /root/download/php-7.1.1/build/shtool install -c ext/phar/phar.phar /usr/local/bin ln -s -f phar.phar /usr/local/bin/phar Installing PDO headers: /usr/local/include/php/ext/pdo/ 安装后 /usr/local/bin/php-config 部分内容 extension_dir='/usr/local/lib/php/extensions/no-debug-non-zts-20160303' configure_options=\" '--with-libxml-dir' '--with-openssl' '--with-zlib' '--with-curl' '--enable-dba' '--with-imap-ssl' '--with-imap' '--enable-intl' '--enable-zip' '--with-pear' '--with-pdo-mysql' '--enable-fpm' '--enable-mbstring' '--with-kerberos=/usr'\" 配置 配置 php.ini 查看 php.ini 位置 # php --ini Configuration File (php.ini) Path: /usr/local/lib Loaded Configuration File: /usr/local/lib/php.ini Scan for additional .ini files in: (none) Additional .ini files parsed: (none) cp php.ini-development /usr/local/lib/php.ini 修改 vim /usr/local/lib/php.ini cgi.fix_pathinfo=0 date.timezone = Asia/Shanghai 配置 php-fpm.conf cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf 修改 /usr/local/etc/php-fpm.conf include=etc/php-fpm.d/*.conf cp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf 修改 /usr/local/etc/php-fpm.d/www.conf ; Unix user/group of processes ; Note: The user is mandatory. If the group is not set, the default user's group ; will be used. user = nobody group = nobody 添加 nobody 群组 groupadd nobody 配置 php-fpm cp sapi/fpm/php-fpm /usr/local/bin 配置 php 启动脚本 cp sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm chmod a+x /etc/init.d/php-fpm vim /etc/init.d/php-fpm 参考 /usr/local/bin/php-config prefix=/usr/local exec_prefix=${prefix} php_fpm_BIN=${exec_prefix}/sbin/php-fpm php_fpm_CONF=${prefix}/etc/php-fpm.conf php_fpm_PID=${prefix}/var/run/php-fpm.pid 启动 php-fpm /etc/init.d/php-fpm start 不重装PHP安装PHP模块/扩展 得到 php-config 路径 $ command -v php-config /usr/local/bin/php-config 得到 phpize 路径 $ command -v phpize /usr/local/bin/phpize 安装 zlib $ cd php-7.1.1/ext/zlib $ cp config0.m4 config.m4 $ /usr/local/bin/phpize $ ./configure --with-php-config=/usr/local/bin/php-config $ make $ make test $ make install Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20131226/ /usr/local/lib/php.ini 添加 extension = \"zlib.so\" 重启 php /etc/init.d/php-fpm restart 查看是否生效 php -m | grep zlib 安装 gmp $ cd php-7.1.1/ext/gmp $ cp config0.m4 config.m4 $ /usr/local/bin/phpize $ ./configure --with-php-config=/usr/local/bin/php-config $ make $ make test $ make install Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20131226/ /usr/local/lib/php.ini 添加 extension = \"gmp.so\" 重启 php /etc/init.d/php-fpm restart 查看是否生效 php -m | grep gmp Questions configure: error: Unable to locate gmp.h yum install -y gmp-devel configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers. yum install -y re2c pecl pecl install xdebug pecl install mongodb pecl install redis "},"php/slim.html":{"url":"php/slim.html","title":"Slim","keywords":"","body":"Slim PHP 微型框架，适用于 Restfull API GitHub 官网 官方文档 中文网 中文文档 awesome 路由 容器识别 会先判断 is_callable， 如果不可以以 callback 方式调用，就用 容器识别 中间件 中间件先执行后添加的 会先判断 is_callable， 如果不可以以 callback 方式调用，就用 容器识别 DAO Migrate Up 迁移 Migrate Down 回滚 相关库 Eloquent 进行数据库相关操作，建立模型后用脚本很容易生成 CRUD illuminate/database slim-eloquent Slim-PDO 数据库操作 robmorgan/phinx 数据迁移填充 总结 How to use Eloquent ORM migrations outside Laravel 用 Eloquent 的 Model 进行数据库操作。Eloquent 的 迁移填充功能在 laravel 才可以用，所以用 phinx 实现迁移填充功能 other slim-jwt-auth json web token slim-json-api 输出json格式字符串 Eloquent 先参考 laravel Installation 安装 laravel，并创建 laravel 工程 composer global require \"laravel/installer\" composer create-project --prefer-dist laravel/laravel laravel_demo 进入 laravel_demo 创建模板 cd laravel_demo php artisan make:model Flight migrate 数据迁移 seed 数据填充 Cookies Cookies 使用 FIG Cookies 管理 Cookies Reference Slim容器分析 Questions PhpStorm 中容器没有代码提示 参考 PhpStorm Container Interop Code Completion PhpStorm Advanced Metadata "},"php/phinx.html":{"url":"php/phinx.html","title":"phinx","keywords":"","body":"phinx 数据迁移填充工具 GitHub 官网 官方文档 Column Types Valid Column Types biginteger binary boolean date 日期 datetime 日期时间 decimal float integer 默认 int(11) string text time 时间 timestamp 时间戳 uuid MySQL 还支持 enum, set, blob, json (json MySQL 5.7 及以上支持) questions 清除 phinx status 记录 参考 https://github.com/robmorgan/phinx/issues/206 check your database for a table called phinxlog. remove the MISSING columns. "},"php/yii.html":{"url":"php/yii.html","title":"Yii","keywords":"","body":"Yii 官网 官方文档 1.1官方中文手册 GitHub 中文社区 Yii 2.0 权威指南 查看yii版本 "},"php/composer.html":{"url":"php/composer.html","title":"Composer","keywords":"","body":"Composer PHP依赖管理工具 官网 中文文档 下载 Composer Download Composer php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" php -r \"if (hash_file('SHA384', 'composer-setup.php') === '55d6ead61b29c7bdee5cccfb50076874187bd9f21f65d8991d46ec5cc90518f447387fb9f76ebae1fbbacf329e583e30') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" php composer-setup.php --install-dir=\"/usr/local/bin/\" php -r \"unlink('composer-setup.php');\" Xdebug 警告 如果安装了 Xdebug 会有下面的警告 You are running composer with xdebug enabled. This has a major impact on runtime performance. 解决方法 ~/.bash_profile 中加入 alias composer='php -n /usr/local/bin/composer.phar' 运行 source ~/.bash_profile 使用 composer 替换 composer.phar 使用 查看版本 composer -v 查看所有命令 composer -l 不安装开发依赖 composer install --no-dev Autoload Composer autoload Composer autoload 中文 深入 Composer autoload 你可以在 composer.json 的 autoload 字段中增加自己的 autoloader。 { \"autoload\": { \"psr-4\": {\"Acme\\\\\": \"src/\"} } } 添加 autoload 字段后，你应该再次运行 install 命令来生成 vendor/autoload.php 文件。 Questions You are running composer with xdebug enabled. This has a major impact on runtime performance. 参考 https://segmentfault.com/a/1190000006835525 composer 不调用任何 php 配置文件 ~/.bashrc 中添加 # Without php.ini alias composer='php -n /usr/local/bin/composer.phar' source ~/.bashrc composer -v Failed to decode response: zlib_decode(): data error Retrying with degraded mode, check https://getcomposer.org/doc/articles/troubleshooting.md#degraded-mode for more info composer self-update 后重新安装 "},"php/Atom4PHP.html":{"url":"php/Atom4PHP.html","title":"Atom 开发 PHP","keywords":"","body":"Atom 开发 PHP Atom写PHP,云端调试。 安装插件 apm install \\ language-php \\ php-debug \\ php-introspector \\ php-twig \\ aligner-php \\ autocomplete-php \\ php-getters-setters \\ php-cs-fixer \\ php-class-tree apm install php-debug php-introspector autocomplete-plus autocomplete-plus ，当输入的时候，提供可能的候选项。 相关资料 http://www.codesec.net/view/167622.html http://www.linuxidc.com/Linux/2016-01/127254.htm http://www.tuicool.com/articles/BvYZfmI "},"ios/":{"url":"ios/","title":"iOS","keywords":"","body":"iOS iOS Universal Links(通用链接) app thinning Use asset catalogs so that the App Store can select images, GPU resources, and other data appropriate for each device variant. "},"ios/swift.html":{"url":"ios/swift.html","title":"swift","keywords":"","body":"swift Github Organization swift 文档 "},"ios/remote-notification.html":{"url":"ios/remote-notification.html","title":"远程推送","keywords":"","body":"远程推送 UIApplicationDelegate /* App 未启动的时候，点击推送消息启动 App，launchOptions 会带推送信息。 */ - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(nullable NSDictionary *)launchOptions NS_AVAILABLE_IOS(3_0); /* * App 在后台的时候，点击推送消息调用。 * App 在前台的时候，收到推送调用。 */ - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo NS_DEPRECATED_IOS(3_0, 10_0, \"Use UserNotifications Framework's -[UNUserNotificationCenterDelegate willPresentNotification:withCompletionHandler:] or -[UNUserNotificationCenterDelegate didReceiveNotificationResponse:withCompletionHandler:] for user visible notifications and -[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:] for silent remote notifications\"); /* 未开启 remote-notification 时： * App 未启动的时候，点击推送消息启动 App 时调用 * App 在后台的时候，点击推送消息调用。 * App 在前台的时候，收到推送调用。 开启 remote-notification 时： * 不管 App 有没有启动，只要有推送消息过来都会调用 */ - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler NS_AVAILABLE_IOS(7_0); UNUserNotificationCenterDelegate /* App 在前台的时候，有推送消息过来时调用。 * 如果 delegate 没有实现该方法，会弹系统默认的弹框 * 如果 delegate 实现了该方法，不会弹系统默认的弹框 */ - (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0); /* 不管 App 有没有启动，点击推送消息时调用。 @注意 UNUserNotificationCenterDelegate 必须在 application:didFinishLaunchingWithOptions: return 之前注册。 */ - (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler __IOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0) __TVOS_PROHIBITED; 通知测试 参考 https://stackoverflow.com/questions/7361298/how-to-test-push-notification-is-working-in-my-application curl -d '{\"aps\":{\"alert\":\"This is a test notification\"}}' --cert YourCertificate.pem:YourPassword -H \"apns-topic: com.example.yourapp\" --http2 https://api.development.push.apple.com/3/device/YourDeviceToken "},"ios/visual-effect.html":{"url":"ios/visual-effect.html","title":"iOS上实现毛玻璃效果","keywords":"","body":"iOS上实现毛玻璃效果 iOS7默认支持毛玻璃效果，只对navBar,tabBar等系统控件有效。如果要对自定义控件实现毛玻璃效果需要做下面几步操作 scrollIndicatorInsets UIScrollView滚动条在scrollerView中的位置 contentInset UIScrollView视图在scrollView中的位置 automaticallyAdjustsScrollViewInsets 是否自动设置UIScrollView的contentInset。设置为NO,自定义的contentInset才会生效 self.automaticallyAdjustsScrollViewInsets=NO; 自定义View实现毛玻璃效果 有两种方法实现毛玻璃效果 生成毛玻璃效果的图片 https://developer.apple.com/library/ios/samplecode/UIImageEffects/Introduction/Intro.html UIVisualEffectView self.backgroundColor = [UIColor clearColor]; UIBlurEffect *blur = [UIBlurEffect effectWithStyle:UIBlurEffectStyleExtraLight]; UIVisualEffectView *effectview = [[UIVisualEffectView alloc] initWithEffect:blur]; [self addSubview:effectview]; 相关资料 http://stackoverflow.com/questions/19065393/ios7-uiscrollview-contentinset-not-working http://stackoverflow.com/questions/21043375/change-uitableview-contentinset-ios-7 "},"ios/retain-circle.html":{"url":"ios/retain-circle.html","title":"循环引用","keywords":"","body":"循环引用 是否会引起循环引用你只要看函数内部是否copy了这个block就知道了,如果没有copy 使用完就释放了 是不会造成循环引用的. FBRetainCycleDetector 循环引用次数计算工具：FBRetainCycleDetector ARC 计算引用次数 id obj = [[NSObject alloc]init]; printf(\"retain count = %ld\\n\",CFGetRetainCount((__bridge CFTypeRef)(obj))); 需要注意的是，这里要用bridge来转换，如果用bridge_retained来转换的话，实际上，生成了一个Core Foundation对象，并且retain了一次原来的Objective-C对象，造成引用计数比真实值大一。 weak weak & strong @weakify 相当于 __weak __typeof(self)self_weak_ = self @strongify(self) 相当于 __strong typeof(self) self = self_weak_; __weak __typeof__(self) weakSelf = self; dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ [weakSelf doSomething]; [weakSelf doOtherThing]; }); 在doSomething中，weakSelf不会变成nil，不过在doSomething执行完成，调用第二个方法doOtherThing的时候，weakSelf有可能被释放。 dispatch_async 的 block 里面需要 __weak self 吗 参考 https://github.com/ibireme/YYKit/issues/41 dispatch_async 官方文档说明： @param block The block to submit to the target dispatch queue. This function performs Block_copy() and Block_release() on behalf of callers. The result of passing NULL in this parameter is undefined. block参数系统会自动调用copy，保证self不被释放，在block执行结束后会release。所以没必要传weak self。 如果传weak self，就无法保证block在执行时，self是否被释放，反而会出现错误。所以不能传__weak self。 Other block 里面加 strong 会在 block 结束后 retain count 减一，是因为 block 是在一个 runloop 里面，结束后 autoreleasepool 会清空 Reference http://blog.reigndesign.com/blog/debugging-retain-cycles-in-objective-c-four-likely-culprits/ https://www.bignerdranch.com/blog/actually-finding-a-memory-management-error-with-instruments/ "},"ios/\bjs-bridge.html":{"url":"ios/\bjs-bridge.html","title":"iOS JS Bridge","keywords":"","body":"iOS JS Bridge javaScriptCore JS 线程安全，所有 JS 任何同步执行。 在哪个线程执行 JS，JS 执行的 Native 代码也在对应线程。 Native > JS 注册 JS 方法 JSContext *context; [self.context evaluateScript:@\"module.nativeToJS = () => {};\"] OC 调用 JS 注册的方法 JSContext *context; JSValue *module = context[@\"module\"]; [module invokeMethod:@\"nativeToJS\" withArguments:@[]]; JS > Native JSExport 方式实现 Block 方式实现 注册 Native 回调 JSContext *context; JSValue *module = [JSValue valueWithNewObjectInContext:self.context]; [module setValue:^(id message) {} forProperty:@\"jsToNative\"]; context[@\"module\"] = module; JS 调用 Native 注册的方法 module.jsToNative(); "},"ios/search-path-directory.html":{"url":"ios/search-path-directory.html","title":"iOS 文件夹路径","keywords":"","body":"iOS 文件夹路径 iOS 文件夹路径 直接调用方法获取 通过 NSSearchPathForDirectoriesInDomains 方法获取 directory domainMask expandTilde 直接调用方法获取 NSHomeDirectory(void): App 沙盒根路径 NSTemporaryDirectory(void): /tmp 存放临时文件，iTunes 不会备份和恢复此目录，此目录下文件可能会在应用退出后删除，iPhone 重启时该目录下的文件会丢失 通过 NSSearchPathForDirectoriesInDomains 方法获取 FOUNDATION_EXPORT NSArray *NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde); directory iOS开发是在沙盒中开发的，对一些部分的文件的读写进行了限制，只能在下面的目录下读写文件： NSLibraryDirectory: /Library 存储程序的默认设置或其它状态信息，iTunes会自动备份该目录 NSDocumentDirectory: /Documents 应用中用户数据可以放在这里，iTunes备份和恢复的时候会包括此目录 NSCachesDirectory: /Library/Caches 存放缓存文件，iTunes不会备份此目录，此目录下文件不会在应用退出删除，空间不足时会删除 NSDocumentionDirectory： 对应于程序中的Library/Documentation路径，这个路径是没有读写权限的，所以看不到文件生成。 domainMask typedef NS_OPTIONS(NSUInteger, NSSearchPathDomainMask) { NSUserDomainMask = 1, // user's home directory --- place to install user's personal items (~) NSLocalDomainMask = 2, // local to the current machine --- place to install items available to everyone on this machine (/Library) NSNetworkDomainMask = 4, // publically available location in the local area network --- place to install items available on the network (/Network) NSSystemDomainMask = 8, // provided by Apple, unmodifiable (/System) NSAllDomainsMask = 0x0ffff // all domains: all of the above and future items }; expandTilde 是否把 ~ 转成绝对路径。YES 转 "},"ios/cupertino.html":{"url":"ios/cupertino.html","title":"Cupertino","keywords":"","body":"Cupertino 已经不再维护。用 fastlane 取代 GitHub Nomad CLI 工具之一，Cupertino 为你提供了命令行接口来管理苹果 Provisioning Portal 上的设备及 profile。举例来说，只要键入 ios devices:list 就可以看到你帐号里的当前设备列表。可以用来自动化许多过程。 "},"ios/wkwebview-usage.html":{"url":"ios/wkwebview-usage.html","title":"WKWebView 的使用","keywords":"","body":"WKWebView 的使用 WKWebView 的使用 WKNavigationDelegate WKUIDelegate WKWebViewConfiguration WKProcessPool WKPreferences WKUserContentController WKUserScript WKWebsiteDataStore NSURLProtocol 加载进度 相关资料 WKNavigationDelegate 网页跳转间的导航管理协议，这个协议可以监听网页的活动 【iOS开发】WKWebView学习笔记(2)－WKNavigationDelegate //请求之前，决定是否要跳转:用户点击网页上的链接，需要打开新页面时，将先调用这个方法。 - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler; //接收到相应数据后，决定是否跳转 - (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler; //页面开始加载时调用 - (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation; // 主机地址被重定向时调用 - (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation; // 页面加载失败时调用 - (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error; // 当内容开始返回时调用 - (void)webView:(WKWebView *)webView didCommitNavigation:(null_unspecified WKNavigation *)navigation; // 页面加载完毕时调用 - (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation; //跳转失败时调用 - (void)webView:(WKWebView *)webView didFailNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error; // 如果需要证书验证，与使用AFN进行HTTPS证书验证是一样的 - (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *__nullable credential))completionHandler; //9.0才能使用，web内容处理中断时会触发 - (void)webViewWebContentProcessDidTerminate:(WKWebView *)webView NS_AVAILABLE(10_11, 9_0); WKUIDelegate 用于交互处理JavaScript中的一些弹出框 【iOS开发】WKWebView学习笔记(3)－WKUIDelegate WebKit(WKUIDelegate) // 新建WKWebView - (nullable WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures; // 关闭WKWebView - (void)webViewDidClose:(WKWebView *)webView NS_AVAILABLE(10_11, 9_0); // 对应js的Alert方法 /** * web界面中有弹出警告框时调用 * * @param webView 实现该代理的webview * @param message 警告框中的内容 * @param frame 主窗口 * @param completionHandler 警告框消失调用 */ - (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler; // 对应js的confirm方法 - (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL result))completionHandler; // 对应js的prompt方法 - (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * __nullable result))completionHandler; WKWebViewConfiguration WKWebView 配置 WKWebView * WK; WKWebViewConfiguration * config = [[WKWebViewConfiguration alloc]init]; WK = [[WKWebView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height-40) configuration:config]; [WK loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@\"http://www.baidu.com\"]]]; //设置是否将网页内容全部加载到内存后再渲染 config.suppressesIncrementalRendering = NO; //设置HTML5视频是否允许网页播放 设置为NO则会使用本地播放器 config.allowsInlineMediaPlayback = YES; //设置是否允许ariPlay播放 config.allowsAirPlayForMediaPlayback = YES; //设置视频是否需要用户手动播放 设置为NO则会允许自动播放 config.requiresUserActionForMediaPlayback = NO; //设置是否允许画中画技术 在特定设备上有效 config.allowsPictureInPictureMediaPlayback = YES; //设置选择模式 是按字符选择 还是按模块选择 /* typedef NS_ENUM(NSInteger, WKSelectionGranularity) { //按模块选择 WKSelectionGranularityDynamic, //按字符选择 WKSelectionGranularityCharacter, } NS_ENUM_AVAILABLE_IOS(8_0); */ config.selectionGranularity = WKSelectionGranularityCharacter; //设置请求的User-Agent信息中应用程序名称 iOS9后可用 config.applicationNameForUserAgent = @\"HS\"; // 确定哪些媒体类型需要用户手势开始播放。 config.media​Types​Requiring​User​Action​For​Playback = WKAudiovisualMediaTypeNone; WKProcessPool 配置进程池，与网页视图的资源共享有关 //设置进程池 WKProcessPool * pool = [[WKProcessPool alloc]init]; config.processPool = pool; WKPreferences 偏好设置 //进行偏好设置 WKPreferences * preference = [[WKPreferences alloc]init]; //最小字体大小 当将javaScriptEnabled属性设置为NO时，可以看到明显的效果 preference.minimumFontSize = 0; //设置是否支持javaScript 默认是支持的 preference.javaScriptEnabled = YES; //设置是否允许不经过用户交互由javaScript自动打开窗口 preference.javaScriptCanOpenWindowsAutomatically = YES; config.preferences = preference; WKUserContentController 主要用来做native与JavaScript的交互管理 //设置内容交互控制器 用于处理JavaScript与native交互 WKUserContentController * userController = [[WKUserContentController alloc]init]; //设置处理代理并且注册要被js调用的方法名称 [userController addScriptMessageHandler:self name:@\"name\"]; //js注入，注入一个测试方法。 NSString *javaScriptSource = @\"function userFunc(){window.webkit.messageHandlers.name.postMessage( {\\\"name\\\":\\\"HS\\\"})}\"; WKUserScript *userScript = [[WKUserScript alloc] initWithSource:javaScriptSource injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:YES];// forMainFrameOnly:NO(全局窗口)，yes（只限主窗口） [userController addUserScript:userScript]; config.userContentController = userController; 监听 js -(void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{ //这里可以获取到JavaScript传递进来的消息 } WKUserScript 注入 Web 的 JS 对象 // 注入时间 /*! @abstract 初始化. @param source 脚本内容. @param injectionTime 注入时机. @param forMainFrameOnly 是否只针对主界面注入. */ - (instancetype)initWithSource:(NSString *)source injectionTime:(WKUserScriptInjectionTime)injectionTime forMainFrameOnly:(BOOL)forMainFrameOnly; WKWebsiteDataStore iOS9以后才能用这个类，是代表webView不同的数据类型，cookies、disk、memory caches、WebSQL、IndexedDB数据库和本地存储。 //设置数据存储store config.websiteDataStore = [WKWebsiteDataStore defaultDataStore]; //获取默认的存储器 此存储器为持久性的会被写入磁盘 + (WKWebsiteDataStore *)defaultDataStore; //获取一个临时的存储器 + (WKWebsiteDataStore *)nonPersistentDataStore; //存储器是否是临时的 @property (nonatomic, readonly, getter=isPersistent) BOOL persistent; //所有可以存储的类型 + (NSSet *)allWebsiteDataTypes; 数据存储类型 /*! @constant 外存 caches. */ WK_EXTERN NSString * const WKWebsiteDataTypeDiskCache API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant 内存 caches. */ WK_EXTERN NSString * const WKWebsiteDataTypeMemoryCache API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant WKWebsiteDataTypeOfflineWebApplicationCache HTML offline web application caches. */ WK_EXTERN NSString * const WKWebsiteDataTypeOfflineWebApplicationCache API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant Cookies. */ WK_EXTERN NSString * const WKWebsiteDataTypeCookies API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant session. */ WK_EXTERN NSString * const WKWebsiteDataTypeSessionStorage API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant HTML local storage. */ WK_EXTERN NSString * const WKWebsiteDataTypeLocalStorage API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant WebSQL databases. */ WK_EXTERN NSString * const WKWebsiteDataTypeWebSQLDatabases API_AVAILABLE(macosx(10.11), ios(9.0)); /*! @constant IndexedDB databases. */ WK_EXTERN NSString * const WKWebsiteDataTypeIndexedDBDatabases API_AVAILABLE(macosx(10.11), ios(9.0)); NSURLProtocol 只能通过私有方法获取 NSURLProtocol在拦截NSURLSession的POST请求时不能获取到Request中的HTTPBody 这个方法还是只适合注册自己定义的 scheme，不适合用来拦 http(s) 请求 让 WKWebView 支持 NSURLProtocol iOS 开发中使用 NSURLProtocol 拦截 HTTP 请求 iOS WKWebView (NSURLProtocol)拦截js、css，图片资源 iOS开发之NSURLProtocol的那些坑 NSURLProtocol-WebKitSupport 加载进度 estimatedProgress 通过KVO监听 相关资料 http://nshipster.cn/wkwebkit/ http://www.brighttj.com/ios/ios-wkwebview-new-features-and-use.html "},"ios/xcrun.html":{"url":"ios/xcrun.html","title":"xcrun","keywords":"","body":"xcrun 列出所有模拟器 $ xcrun simctl list 删除模拟器 删除指定 id 的模拟器 $ xcrun simctl delete 删除所有失效模拟器 $ xcrun simctl delete unavailable "},"ios/fastlane.html":{"url":"ios/fastlane.html","title":"fastlane","keywords":"","body":"fastlane ios，android工具集 Github 官网 官方文档 Fastlane for Android fastlane 安装 子工具 使用 初始化fastlane snapshot 模拟启动失败 deliver frameit frameit setup frameit frameit silver 自定义title scan 测试 scan init scan cert 管理证书 cert OR cert create cert revoke_expired sigh 管理描述文件 sigh manage sigh repair sigh download_all gym 打包 gym init gym pilot 管理TestFlight 上传ipa包 match git管理描述文件 Q1 Q2 Q3 Reference http://www.cocoachina.com/ios/20150728/12733.html 安装 $ gem install fastlane --verbose 子工具 deliver: 上传截图, 元数据, app应用程序到App Store supply: 上传Android app应用程序和元数据到Google Play snapshot: 自动捕获iOS app应用程序本地截图 screengrab: 自动捕获Android app应用程序本地截图 frameit: 快速截屏并将截屏放入设备中 pem: 自动生成和更新推送通知配置文件 sigh: 开发证书和描述文件下载 produce: 使用命令行在iTunes Connect上创建新的app和开发入口 cert: 自动创建和配置iOS代码签名证书 spaceship: Ruby 库访问 Apple开发者中心和 iTunes Connect pilot: 最好的方式管理你的TestFlight 测试人员和从终端构建 boarding: 最简单的方式邀请你的TestFlight beta测试人员 gym: iOS app打包签名自动化工具 match: 使用Git同步你的团队证书和配置文件 scan: 最简单方式测试你的 iOS 和 Mac apps fastlane-credentials: 管理用户名密码。 使用 初始化fastlane 自动生成Fastfile Appfile $ cd [your_project_folder] $ fastlane init snapshot 截屏 初始化： $ snapshot init 生成Snapfile和SnapshotHelper.swift 添加SnapshotHelper.swift到UITest工程，会自动提示添加桥接文件。 模拟启动失败 $ snapshot reset_simulators deliver 上传截图，ipa到 iTunes Connect 初始化： $ cd [your_project_folder] $ deliver init 会自动从iTunes Connect下载所有配置到metadata和screenshots,并生成Deliverfile。 Deliverfile文档 frameit 自动给截屏加上设备边框 安装imagemagick $ brew install imagemagick frameit setup 配置frameit,会提示从 https://developer.apple.com/app-store/marketing/guidelines/#images 下载对应的框架并解压到 ~/.frameit/devices_frames，然后制作带边框的截图 frameit 创建太空灰边框的框架,在fastlane目录下运行 frameit silver 创建银色边框的框架,在fastlane目录下运行 自定义title 参考 https://github.com/fastlane/examples/tree/master/MindNode/screenshots title.string和keyword.string必须是UTF-16 BE编码，并且第一行换行 .ttf 字体文件从系统字体册中找 例子中的Framefile.json的zcmn-Hans改成zh-Hans title为图片名后部分，EG1_ipad_1.1取1.1 scan 测试 测试并导出错误报告 scan init 生成 fastlane/Scanfile scan 开始测试 cert 管理证书 cert OR cert create 创建证书 cert revoke_expired 删除过期证书 sigh 管理描述文件 创建刷新描述文件 sigh manage 列出所有描述文件 sigh repair 修复所有失效或者过期的描述文件 sigh download_all 下载并安装所有描述文件 gym 打包 打包 gym init 生成fastlane/Gymfile gym 开始打包 pilot 管理TestFlight 管理TestFlight.管理测试用户、上传ipa包 上传ipa包 $ pilot upload match git管理描述文件 用 git 管理描述文件 Q1 Provisioning profile 'a8950521-d017-410b-a23a-07a8b823922f' is not available on the Developer Portal 删掉管理描述文件 git 上的 profiles 目录。再重新 match Q2 Certificate 'C76G4T85S7' (stored in your git repo) is not available on the Developer Portal > Q3 Could not create another Distribution certificate, reached the maximum number of available Distribution certificates. 删掉苹果开发者网站上 match_ 开头的描述文件后重新 match Reference http://www.cocoachina.com/ios/20150728/12733.html "},"ios/iPad分屏.html":{"url":"ios/iPad分屏.html","title":"iPAd 分屏","keywords":"","body":"iPAd 分屏 如果支持分屏 Target > General > Devices > iPad 不勾选 Require full screen 如何监听屏幕变化 - (void)viewDidLayoutSubviews { [super viewDidLayoutSubviews]; CGFloat newViewWidth = self.view.frame.size.width; if (newViewWidth != _oldViewWidth) { self.oldViewWidth = newViewWidth; [self viewWidthUpdatedFromDidLayoutSubviews]; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ [self viewWidthUpdated]; }); } } 注意 UIWindow 需要用keyWindow "},"ios/keyboard.html":{"url":"ios/keyboard.html","title":"iOS键盘","keywords":"","body":"iOS键盘 Reference https://github.com/michaeltyson/TPKeyboardAvoiding https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html "},"ios/websocket.html":{"url":"ios/websocket.html","title":"iOS WebSocket","keywords":"","body":"iOS WebSocket 第三方库 SocketRocket FaceBook 出品，RN 在用，已很久没有修改 Starscream swift 版 WebSocket SwiftWebSocket swift 版 WebSocket "},"ios/download-background.html":{"url":"ios/download-background.html","title":"后台下载","keywords":"","body":"后台下载 References iOS使用NSURLSession进行下载（包括后台下载，断点下载） "},"ios/action-extension.html":{"url":"ios/action-extension.html","title":"Action Extension","keywords":"","body":"Action Extension 扩展 UIActivityViewController 第二排操作，只会弹出窗口，不能跳转到 Containing App References Understand Action Extensions Sharing and Actions 【iOS扩展开发攻略】Action Extension iOS Action Extension开发教程，实现跨APP的数据共享 "},"ios/popover.html":{"url":"ios/popover.html","title":"Popover","keywords":"","body":"Popover UIPopoverController NS_CLASS_DEPRECATED_IOS(3_2, 9_0, \"UIPopoverController is deprecated. Popovers are now implemented as UIViewController presentations. Use a modal presentation style of UIModalPresentationPopover and UIPopoverPresentationController.\") UIPopoverController 在 iOS9 以上被弃用，建议把 UIViewController 的 style 设置为 UIModalPresentationPopover 就可以用 UIPopoverPresentationController UIPopoverPresentationController UIPopoverPresentationContriller 使用 UITableViewController tabCon = [[UITableViewController alloc]initWithStyle:UITableViewStylePlain]; //设置跳转模式为popover模式 tabCon.modalPresentationStyle = UIModalPresentationPopover; //获取到UIPopoverPresentationController对象 UIPopoverPresentationController* con = tabCon.popoverPresentationController; //设置弹出的基准视图 con.sourceView = self.view; [self presentViewController:tabCon animated:YES completion:nil]; 视图控制器类 @interface UIViewController //设置内容控制器大小 @property (nonatomic) CGSize preferredContentSize //模态显示类型 @property(nonatomic,assign) UIModalPresentationStyle modalPresentationStyle @end 视图控制器分类(适配显示) @interface UIViewController (UIAdaptivePresentations) //管理模态窗口的显示控制器(presentingViewController、presentedViewController) @property (nonatomic,readonly) UIPresentationController *presentationController; //模态弹出窗控制器 @property (nonatomic,readonly) UIPopoverPresentationController *popoverPresentationController ; @end UIPopoverPresentationController 的属性 //设置代理 @property (nullable, nonatomic, weak) id delegate; //设置允许的箭头方向 @property (nonatomic, assign) UIPopoverArrowDirection permittedArrowDirections; //设置基准视图 @property (nullable, nonatomic, strong) UIView *sourceView; //设置基准区域 @property (nonatomic, assign) CGRect sourceRect; //设置是否覆盖基准视图区域 @property (nonatomic, assign) BOOL canOverlapSourceViewRect NS_AVAILABLE_IOS(9_0); //设置基准BarButtonItem @property (nullable, nonatomic, strong) UIBarButtonItem *barButtonItem; //设置可以进行用户交互的视图 @property (nullable, nonatomic, copy) NSArray *passthroughViews; //设置背景颜色 @property (nullable, nonatomic, copy) UIColor *backgroundColor; //设置Margin，苹果 Bug，设置无效 @property (nonatomic, readwrite) UIEdgeInsets popoverLayoutMargins; //设置自定义视图 @property (nullable, nonatomic, readwrite, strong) Class popoverBackgroundViewClass; 首先根据sourceView.在sourceView描绘出一块 sourceRect 的区域,然后箭头指向这块区域的中心点. UIPopoverPresentationControllerDelegate中的方法 //控制器将要弹出时调用 - (void)prepareForPopoverPresentation:(UIPopoverPresentationController *)popoverPresentationController; //控制器将要消失时调用 - (BOOL)popoverPresentationControllerShouldDismissPopover:(UIPopoverPresentationController *)popoverPresentationController; //控制器已经消失时调用 - (void)popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController *)popoverPresentationController; //控制器接收到弹出消息时调用 - (void)popoverPresentationController:(UIPopoverPresentationController *)popoverPresentationController willRepositionPopoverToRect:(inout CGRect *)rect inView:(inout UIView * __nonnull * __nonnull)view; 使用 References UIPopoverPresentationController iOS8新特性:UIPopoverPresentationController Customizing UIPopover with UIPopoverBackgroundView iOS中UIPopoverController使用详解 "},"ios/pull-to-refresh.html":{"url":"ios/pull-to-refresh.html","title":"下拉刷新","keywords":"","body":"下拉刷新 UIRefreshControl 支持 iOS6 及以上，功能简单 "},"ios/key-command.html":{"url":"ios/key-command.html","title":"UIKeyCommand","keywords":"","body":"UIKeyCommand References UIKeyCommand UIKeyCommand - NSHipster 中文版 "},"ios/audio.html":{"url":"ios/audio.html","title":"音频","keywords":"","body":"音频 音频 理论 采样率 声音强度 文档说明 AudioUnit AudioUnitEffect AVAudioUnitReverb AVAudioUnitEQ AVAudioUnitDistortion AVAudioUnitDelay AVFoundation AVAudioSession 通知 AVAudioEngine AVAudioFile AVAudioTime AVAudioNode AVAudioPlayerNode playAtTime 使用 PCM 转 AAC 播放 格式 Linear PCM AMR AAC MP3 Other Q&A References 理论 采样率 声音强度 单们：分贝，可为负数 文档说明 CoreAudio AudioToolbox AudioQueue AudioSession AudioUnit AVFoundation AVAudioSession AVAudioEngine CoreAudio OpenAL AudioToolbox AudioUnit AVFoundation AudioUnit 音频单元 AudioUnitEffect 效果单元 AVAudioUnitReverb 混响 AVAudioUnitEQ 均衡器 AVAudioUnitDistortion 失真 AVAudioUnitDelay 延迟 AVFoundation 对 OpenAL AudioToolbox AudioUnit 的高级封装 AVAudioSession 通知 AVAudioSessionInterruptionNotification AVAudioSessionRouteChangeNotification AVAudioEngine 音频引擎 attachNode 把效果附着到音频引擎 connect 连接各个节点 AVAudioFile 音频文件 length: sample frame 数量 framePosition: 下一个读或者写的位置 AVAudioTime 时间 hostTimeValid hostTime 是否有效 hostTime 主机时间，OSX 上参考 AudioConvertHostTimeToNanos() 把 hostTime 转成纳秒 sampleTimeValid 采样时间是否有效 sampleTime sampleRate 采样率 AVAudioNode lastRenderTime 最后使用的时间 AVAudioPlayerNode playAtTime [_player reset]; 使用之前如果还在播放必须 pause 使用 PCM 转 AAC 将Mic采集的PCM转成AAC Audio Converter File Convert Test AVAudioConverter convert AVAudioPCMBuffer to AAC https://stackoverflow.com/q/38663496/5266652 [推荐，简单可用] 播放 @property (weak,nonatomic) AVAudioPlayerNode *player; @property (weak,nonatomic) AVAudioFile *file; AVAudioFramePosition songLengthSamples; float sampleRateSong; float lengthSongSeconds; float startInSongSeconds; lengthSongSamples = self.file.length; AVAudioFormat *songFormat = self.file.processingFormat; sampleRateSong = songFormat.sampleRate; // 音频文件的时长（秒） lengthSongSeconds=lengthSongSamples/sampleRateSong; if(self.player.isPlaying){ AVAudioTime *nodeTime=self.player.lastRenderTime; AVAudioTime *playerTime=[self.player playerTimeForNodeTime:nodeTime]; float elapsedSeconds=startInSongSeconds+((double)playerTime.sampleTime/sampleRateSong); NSLog(@\"Elapsed seconds: %f\",elapsedSeconds); } { a:, b:null, c:undefined } 格式 Linear PCM 录音的时候，默认是不压缩的 Linear PCM 格式。 AMR AMR format is no longer supported by Apple (since iOS 4.3). AMR 格式从 iOS 4.3 开始不再支持 AAC 有压缩的格式，声音效果比 MP3 好。WebView 不支持 MP3 有压缩的格式，WebView 支持。 iOS-使用Lame转码:PCM->MP3 Other AVFoundation框架中的AVAudioPlayer和AVAudioRecorder类，用法简单，但是不支持流式，也就意味着在播放音频前，必须等到整个音频加载完成后，才能开始播放音频；录音时，也必须等到录音结束后才能获得录音数据。 Q&A Q1: Terminating app due to uncaught exception 'com.apple.coreaudio.avfaudio', reason: 'required condition is false: format.sampleRate == hwFormat.sampleRate' A: AVAudioConverter *converter = [[AVAudioConverter alloc] initFromFormat:inputFormat toFormat:_audioFile.fileFormat]; AVAudioPCMBuffer *fileBuffer = [[AVAudioPCMBuffer alloc] initWithPCMFormat:_audioFile.fileFormat frameCapacity:INPUT_BUFFER_SIZE]; [converter convertToBuffer:fileBuffer fromBuffer:buffer error:nil]; Q2: Terminating app due to uncaught exception 'com.apple.coreaudio.avfaudio', reason: 'required condition is false: IsFormatSampleRateAndChannelCountValid(format)' Q3: Terminating app due to uncaught exception 'com.apple.coreaudio.avfaudio', reason: '[[busArray objectAtIndexedSubscript:(NSUInteger)element] setFormat:format error:&nsErr]: returned false, error Error Domain=NSOSStatusErrorDomain Code=-10865 \"(null)\"' Q4 Terminating app due to uncaught exception 'com.apple.coreaudio.avfaudio', reason: 'required condition is false: [_nodes containsObject: node] Q5： Terminating app due to uncaught exception 'com.apple.coreaudio.avfaudio', reason: 'required condition is false: nullptr == Tap() 重复 installTapOnBus，需要先 removeTapOnBus References https://stackoverflow.com/a/40697312/5266652 AVAudioEngine Tutorial for iOS: Getting Started 苹果官方例子 "},"ios/heic-hevc.html":{"url":"ios/heic-hevc.html","title":"HEIF/HEVC","keywords":"","body":"HEIF/HEVC HEIF AVFileTypeHEIF 是一种图像文件封装格式 HEVC/HEIC AVFileTypeHEIC 是一种视频编码标准 /*! @constant AVFileTypeHEIC @abstract A UTI for the high efficiency image file format containing HEVC compressed images. @discussion The value of this UTI is @\"public.heic\". Files are identified with the .heic extension. */ AVF_EXPORT AVFileType const AVFileTypeHEIC NS_AVAILABLE(10_13, 11_0); /*! @constant AVFileTypeHEIF @abstract A UTI for the high efficiency image file format containing images compressed with any codec. @discussion The value of this UTI is @\"public.heif\". Files are identified with the .heif extension. */ AVF_EXPORT AVFileType const AVFileTypeHEIF NS_AVAILABLE(10_13, 11_0); AVAssetExportSession 视频压缩 # if ([dataUTI isEqualToString:@\"public.heif\"] || [dataUTI isEqualToString:@\"public.heic\"]) { CIImage *ciImage = [CIImage imageWithData:imageData]; CIContext *context = [CIContext context]; imageData = [context JPEGRepresentationOfImage:ciImage colorSpace:ciImage.colorSpace options:@{}]; } iOS 11 设置 > 相机 > 格式 设置为高效的时候，照片用的 HEIF 格式，视频用的 HEVC 格式，之前的图片选择库不支持 References 开发者该知道的 HEVC 与 HEIF Working with HEIF and HEVC iOS 11 HEIF/HEIC图片转JPG、UIImage加载HEIF "},"ios/crash.html":{"url":"ios/crash.html","title":"崩溃","keywords":"","body":"崩溃 崩溃 说明 Exception Type EXC_BAD_ACCESS EXC_BAD_INSTRUCTION EXC_ARITHMETIC 崩溃追踪 1、add all 2、add especiall other 启用NSZombieEnabled调试EXC_BAD_ACCESS Clang Address Sanitizer 相关 说明 Exception Type EXC_BAD_ACCESS 此类型的Excpetion是我们最常碰到的Crash，通常用于访问了不改访问的内存导致。一般EXC_BAD_ACCESS后面的\"()\"还会带有补充信息。 SIGSEGV: 通常由于重复释放对象导致，这种类型在切换了ARC以后应该已经很少见到了。 SIGABRT: 收到Abort信号退出，通常Foundation库中的容器为了保护状态正常会做一些检测，例如插入nil到数组中等会遇到此类错误。 SEGV:（Segmentation Violation），代表无效内存地址，比如空指针，未初始化指针，栈溢出等； SIGBUS：总线错误，与 SIGSEGV 不同的是，SIGSEGV 访问的是无效地址，而 SIGBUS 访问的是有效地址，但总线访问异常(如地址对齐问题) SIGILL：尝试执行非法的指令，可能不被识别或者没有权限 EXC_BAD_INSTRUCTION 此类异常通常由于线程执行非法指令导致 EXC_ARITHMETIC 除零错误会抛出此类异常 崩溃追踪 崩溃后直接跳到main函数 1、add all 2、add especiall other 启用NSZombieEnabled调试EXC_BAD_ACCESS 当你对已释放的对象发送消息（90%的可能是对引用计数为0的对象再release）或release那些autorelease对象时，就会出现报EXC_BAD_ACCESS这样的错误。 默认设置下 Xcode不会给你定位具体是哪一行代码不该去使用已释放的对象，或者release用错了。 Product -> Edit Scheme（option+command+R） -> Diagnostics -> 勾选 Enable Zombie Objects。 设置NSZombieEnabled环境变量后，一个对象销毁时会被转化为_NSZombie；设置NSZombieEnabled后，当你向一个已经释放的对象发送消息，这个对象就不只是报EXC_BAD_ACCESS Crash，还会放出一个错误消息，然后以一种可预测的可以产生debug断点的方式消失， 因此我们可以找到具体或者大概是哪个对象被错误的释放或引用了。 注意：NSZombieEnabled只能在调试的时候使用，千万不要忘记在产品发布的时候去掉，因为NSZombieEnabled不会真正去释放dealloc对象的内存，一直开启后果自负！ Clang Address Sanitizer Clang的地址消毒剂 编辑scheme，点击Diagnostics标签页，选中\"Enable Address Sanitizer\"选项 Xcode 7 调试野指针利器 Address sanitizer 在Xcode 7上直接使用Clang Address Sanitizer Xcode7 新特性 AddressSanitizer Xcode7中你一定要知道的炸裂调试神技 相关 http://blog.csdn.net/zhuzhihai1988/article/details/7749022 http://blog.csdn.net/phunxm/article/details/17044337 iOS Crash文件的解析（一） "},"ios/comment.html":{"url":"ios/comment.html","title":"iOS 注释","keywords":"","body":"iOS 注释 生成文档工具比较 HeaderDoc 只支持 HTML 输出，Xcode 自带的文档生成工具 Doxygen 支持 HTML，PDF, LaTeX 还有很多其它格式，功能强大，适于生成html文档与pdf文档。 appledoc 基于 Doxygen，简单方便，适于生成apple风格的html文档，及直接集成到xcode帮助（docset） appledoc GitHub 文档 安装 方法一： $ brew install appledoc 方法二： git clone git://github.com/tomaz/appledoc.git cd appledoc sudo sh install-appledoc.sh -b /usr/local/bin/ -t ~/Library/Application\\ Support/appledoc 使用 appledoc --output output/path/ --project-name \"project name\" --project-company \"greedlab\" --company-id \"com.greedlab\" --clean-output source/path/ 然后打开 output/path/ 下的文件有提示 .docset 文件路径，用 Dash 打开 .docset 文件。 Xcode Xcode 支持的注释 swift 和 play ground Xcode 支持的 swift 和 play ground 注释 Markup Formatting Reference objective C Xcode 支持的 object C 注释 支持的注释 /// /** */ /*! */ 支持的 Tag 没标题的 /** DES @brief brief @discussion discussion @param param @code I am code @endcode @return Bool whether */ @brief 简介。 代码自动补全是提示 有标题的 /** DES @author author @copyright copyright @version version @remark remark @date date */ "},"ios/document-provider-extension.html":{"url":"ios/document-provider-extension.html","title":"Document Provider","keywords":"","body":"Document Provider Attention iOS 11 弃用，改用 File Provider 介绍 Document Provider Extension 是 iOS 8 出的功能，允许 app 和其它 app 进行文件传送、接收交互。 为了实现应用间共享数据，iOS 使用了两种单独的扩展。 Document Picker:当另一个app启动iCloud file picker时呈现出的view controller。 File Provider: 一个由NSFileCoordinator协调在host app与extension apps之间移动数据的非UI组件。NSFileCoordinator，正如其名，协调读取文件。它也允许多线程操作，例如host app及containing app,可以同时获取文件而不用彼此叨扰。 References Document Provider Extension 官方文档 Document Provider Extensions App Extension编程指南（iOS8/OS X v10.10）：扩展类型--Document Provider App Extension Programming Guide App 扩展编程指南 "},"ios/3d-touch.html":{"url":"ios/3d-touch.html","title":"3D Touch","keywords":"","body":"3D Touch Home Screen Quick Actions （主屏快捷行为入口） peek and pop （预览和弹出） Force Properties （按压力度） Web view peek and pop API (HTML链接预览功能) Home Screen Quick Actions Info.plist 添加 UIApplicationShortcutItems UIApplicationShortcutItemIconType UIApplicationShortcutIconTypeSearch UIApplicationShortcutItemSubtitle shortcutSubtitle1 UIApplicationShortcutItemTitle shortcutTitle1 UIApplicationShortcutItemType $(PRODUCT_BUNDLE_IDENTIFIER).First UIApplicationShortcutItemUserInfo firstShorcutKey1 firstShortcutKeyValue1 UIApplicationShortcutItemIconType UIApplicationShortcutIconTypeShare UIApplicationShortcutItemSubtitle shortcutSubtitle2 UIApplicationShortcutItemTitle shortcutTitle2 UIApplicationShortcutItemType $(PRODUCT_BUNDLE_IDENTIFIER).Second UIApplicationShortcutItemUserInfo secondShortcutKey1 secondShortcutValue1 iOS 模拟器支持 3D Touch 参考 https://stackoverflow.com/a/32533162，模拟器设置里没有 3D Touch 的设置，但是如果 Mac 支持 3D Touch，就可以直接用 Mac 的 3D Touch。 References Getting Started with 3D Touch Take Advantage of 3D Touch iOS 3D touch开发(一) Home Screen Quick Actions "},"ios/touch-id-and-face-id.html":{"url":"ios/touch-id-and-face-id.html","title":"Touch ID 和 Face ID","keywords":"","body":"Touch ID 和 Face ID LocalAuthentication 本地认证，包含 Touch ID 认证 和 Face ID 认证。 typedef NS_ENUM(NSInteger, LABiometryType) { /// The device does not support biometry. LABiometryNone, /// The device supports Touch ID. LABiometryTypeTouchID, /// The device supports Face ID. LABiometryTypeFaceID, } NS_ENUM_AVAILABLE(NA, 11_0) __WATCHOS_UNAVAILABLE __TVOS_UNAVAILABLE; LocalAuthentication.h // 是否支持 local authentication - (BOOL)canEvaluatePolicy:(LAPolicy)policy error:(NSError * __autoreleasing *)error __attribute__((swift_error(none))); // 权限 typedef NS_ENUM(NSInteger, LAPolicy) { // 指纹授权使用。指纹解锁五次错误消失，不会自动弹出密码输入界面 LAPolicyDeviceOwnerAuthenticationWithBiometrics NS_ENUM_AVAILABLE(10_12_2, 8_0) __WATCHOS_AVAILABLE(3.0) __TVOS_AVAILABLE(10.0) = kLAPolicyDeviceOwnerAuthenticationWithBiometrics, // 指纹和数字密码的授权使用。指纹解锁六次错误自动跳转密码输入 LAPolicyDeviceOwnerAuthentication NS_ENUM_AVAILABLE(10_11, 9_0) = kLAPolicyDeviceOwnerAuthentication } NS_ENUM_AVAILABLE(10_10, 8_0) __WATCHOS_AVAILABLE(3.0) __TVOS_AVAILABLE(10.0); /** * 验证 touchID 或者 faceID * @para localizedReason 为什么要使用 Touch ID 或者 Face ID */ - (void)evaluatePolicy:(LAPolicy)policy localizedReason:(NSString *)localizedReason reply:(void(^)(BOOL success, NSError * __nullable error))reply; References LocalAuthentication iOS指纹识别 TouchID使用以及特性说明 "},"ios/masonry.html":{"url":"ios/masonry.html","title":"Masonry权值","keywords":"","body":"Masonry权值 http://www.bubuko.com/infodetail-1149793.html 最大值 1000 Masonry默认 UILayoutPriorityDefaultHigh = 750 // 调整label随内容变化的权重 [label setContentCompressionResistancePriority:UILayoutPriorityDefaultHigh forAxis:UILayoutConstraintAxisHorizontal]; "},"ios/interview.html":{"url":"ios/interview.html","title":"., 面试","keywords":"","body":"., 面试 面试 Objective-C weak strong assign copy 区别 ivar、getter、setter @protocol 和 category 中如何使用 @property mutableCopy 和 copy NSHashTable VS NSMapTable [obj foo] 和 objc_msgSend() 关系 ARC 和 MRC self super 区别 @synthesize 和 @dynamic 区别 GCD dispatch_barrier_async dispatch_group_async dispatch_semaphore_* 有哪些方法实现异步、延时 KVO 和 KVC runtime runloop +(void)load 和 +(void)initialize 的区别 iOS lldb 常用命令 Xcode 调试技巧 iOS 装载和运行机制 iOS 性能调优 AutoLayout 和 UIViewAutoresizing autoreleasePool UIViewController 多次 push pop 后，内存会怎样？ UIScrollView 使用 AutoLayout 布局注意事项 点击事件传递机制 iPhoneX 适配 MVC 和 MVVM，MVP 数据持久化的几个方案 UITableview 的优化方法（缓存高度，异步绘制，减少层级，hide，避免离屏渲染） 第三方框架 设计模式 References Objective-C weak strong assign copy 区别 assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。 block 中的 weak Masonry 需要用 weak 么，为什么？ ivar、getter、setter @property 的本质是 @property = ivar + getter + setter; “属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter） @protocol 和 category 中如何使用 @property objc_setAssociatedObject 和 objc_getAssociatedObject mutableCopy 和 copy NSHashTable VS NSMapTable NSHashTable 是 NSSet 的通用版本。可以弱引用、copy NSMapTable 是 NSDictionary 的通用版本。可以弱引用、copy [obj foo] 和 objc_msgSend() 关系 [obj foo] 在objc编译时，会被转意为：objc_msgSend(obj, @selector(foo)) [obj foo] 如果 foo 方法不存在会怎么处理 ARC 和 MRC retain count autoreleasePool self super 区别 其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：self 先从本类找，super 先从父类找。 所以 [self class] 和 [super class] 返回值一样，因为 class 方法都在 NSObject 对象实现。 self->_para 和 _para 还有 self.para 的区别 @synthesize 和 @dynamic 区别 @dynamic :修饰的属性，其getter和setter方法编译器是不会自动帮你生成。必须自己是实现的。 @synthesize：修饰的属性，其getter和setter方法编译器是会自动帮你生成。不必自己实现，可以指定与属性相对应的成员变量。 GCD DISPATCH_QUEUE_SERIAL: 串行的队列，每次只能执行一个任务，并且必须等待前一个执行任务完成 DISPATCH_QUEUE_CONCURRENT: 一次可以并发执行多个任务，不必等待执行中的任务完成 dispatch_barrier_async 一般叫做“栅栏函数”，它就好像栅栏一样可以将多个操作分隔开，在它前面追加的操作先执行，在它后面追加的操作后执行。 dispatch_group_async 我们使用队列组来开辟线程时，队列组中的队列任务是并发，当所有的队列组中的所有任务完成时候，才可以调用队列组完成任务。 dispatch_semaphore_* 信号：Semaphore是通过‘计数’的方式来标识线程是否是等待或继续执行的。 有哪些方法实现异步、延时 KVO 和 KVC runtime runtime 为 category 扩展属 runtime 修改方法 NSDictionary to Object message_send runloop 各个模式的区别 每个线程（包括主线程）都有一个对应的 Runloop 对象。我们并不能自己创建 Runloop 对象，但是可以获取到系统提供的 Runloop 对象。 主线程的 Runloop 会在应用启动的时候完成启动，其他线程的 Runloop 默认并不会启动，需要我们手动启动。 References Runloop +(void)load 和 +(void)initialize 的区别 load 是只要类所在文件被引用就会被调用，而 initialize 是在类或者其子类的第一个方法被调用前调用。 iOS lldb 常用命令 Xcode 调试技巧 Zombile Objects 开启僵尸对象，在对象释放（retainCount为0)时，使用一个内置的Zombie对象，替代原来被释放的对象。无论向该对象发送什么消息（函数调用），都会触发异常，抛出调试信息。 iOS 装载和运行机制 iOS 性能调优 instruments Allocations：监测内存使用/分配情况 leaks：找到引发内存泄漏的起点 Time Profiler：分析代码的执行时间，找出导致程序变慢的原因。 AutoLayout 和 UIViewAutoresizing autoreleasePool UIViewController 多次 push pop 后，内存会怎样？ UIScrollView 使用 AutoLayout 布局注意事项 contentView 不能由 AutoLayout 撑起来 点击事件传递机制 iOS 点击事件传递及响应 事件的传递过程： - (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event - (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event 事件响应： //只要点击控件,就会调用touchBegin,如果没有重写这个方法,自己处理不了触摸事件 // 上一个响应者可能是父控件 - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{ // 默认会把事件传递给上一个响应者,上一个响应者是父控件,交给父控件处理 [super touchesBegan:touches withEvent:event]; // 注意不是调用父控件的touches方法，而是调用父类的touches方法 // super是父类 superview是父控件 } 一次完整的触摸事件的传递响应过程为： UIApplication–>UIWindow–>递归找到最合适处理的控件–>控件调用touches方法–>判断是否实现touches方法–>没有实现默认会将事件传递给上一个响应者–>找到上一个响应者–>找不到方法作废 iPhoneX 适配 safe area MVC 和 MVVM，MVP MVC:简单来说就是，逻辑、试图、数据进行分层，实现解耦。 MVVM:是Model-View-ViewMode模式的简称。由视图(View)、视图模型(ViewModel)、模型(Model)三部分组成.比MVC更加释放控制器臃肿，将一部分逻辑(耗时，公共方法，网络请求等)和数据的处理等操作从控制器里面搬运到ViewModel中 数据持久化的几个方案 plist,存储字典，数组比较好用 preference：偏好设置，实质也是plist NSKeyedArchiver：归档，可以存储对象 sqlite：数据库，经常使用第三方来操作，也就是fmdb coreData:也是数据库储存，苹果官方的 UITableview 的优化方法（缓存高度，异步绘制，减少层级，hide，避免离屏渲染） 第三方框架 SDWebImage Masonry MJPullRefresh MJExtension FMDB AFNetwork 设计模式 iOS 用到了哪些典型的设计模式 References 招聘一个靠谱的 iOS 《招聘一个靠谱的 iOS》—参考答案 2017年iOS面试题总结 2017年5月iOS招人心得（附面试题） "},"ios/oc-js.html":{"url":"ios/oc-js.html","title":"js 与 oc 间调用","keywords":"","body":"js 与 oc 间调用 使用 JavaScriptCore.framework #import oc 调 js UIWebView - (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script; 只能在主线程执行 WKWebview - (void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^ _Nullable)(_Nullable id, NSError * _Nullable error))completionHandler; UIWebView JavaScriptCore WKWebView 不支持通过如下的KVC的方式创建JSContext evaluateScript JSContext *context = [self.webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"]; NSString *textJS = @\"showAlert('这里是JS中alert弹出的message')\"; [context evaluateScript:textJS]; callWithArguments JSContext *context = [self.webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"]; [context[@\"payResult\"] callWithArguments:@[@\"支付弹窗\"]]; js 调 oc UIWebView WKWebview MessageHandler UIWebView JavaScriptCore // 获取webView上的js JSContext *contest = [webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"]; contest[@\"test\"] = ^(){ NSLog(@\"test按钮被点击了!!\"); // 这里网页上的按钮被点击了, 客户端可以在这里拦截到,并进行操作 }; block中是在子线程，因此执行UI操作，控制台有警告，需要回到主线程再操作UI。 References WebViewJavascriptBridge UIWebView和WKWebView的使用及js交互 "},"ios/libextobjc.html":{"url":"ios/libextobjc.html","title":"libextobjc","keywords":"","body":"libextobjc A Cocoa library to extend the Objective-C programming language. Github地址 CocoaPods方式安装 $ pod search libextobjc -> libextobjc (0.4.1) A Cocoa library to extend the Objective-C programming language. pod 'libextobjc', '~> 0.4.1' - Homepage: https://github.com/jspahrsummers/libextobjc - Source: https://github.com/jspahrsummers/libextobjc.git - Versions: 0.4.1, 0.4, 0.3, 0.2.5, 0.2.4, 0.2.3, 0.2.0, 0.1.0 [master repo] - Subspecs: - libextobjc/UmbrellaHeader (0.4.1) - libextobjc/RuntimeExtensions (0.4.1) - libextobjc/EXTADT (0.4.1) - libextobjc/EXTConcreteProtocol (0.4.1) - libextobjc/EXTKeyPathCoding (0.4.1) - libextobjc/EXTNil (0.4.1) - libextobjc/EXTSafeCategory (0.4.1) - libextobjc/EXTScope (0.4.1) - libextobjc/EXTSelectorChecking (0.4.1) - libextobjc/EXTSynthesize (0.4.1) - libextobjc/NSInvocation+EXT (0.4.1) - libextobjc/NSMethodSignature+EXT (0.4.1) 添加 Code Snippets Library 拷贝 Resource下的@keypath.codesnippet、@weakify.codesnippet、@strongify.codesnippet到~/Library/Developer/Xcode/UserData/CodeSnippets/.现在输入@就会自动提示了 Reference Reactive Cocoa Tutorial [1] = 神奇的Macros @weakify, @strongify "},"ios/editing-menu.html":{"url":"ios/editing-menu.html","title":"自定义显示选中文字的编辑菜单项","keywords":"","body":"自定义显示选中文字的编辑菜单项 UIMenuController References 在UIWebView中自定义显示选中文字的编辑菜单项 "},"ios/apple-pay.html":{"url":"ios/apple-pay.html","title":"Apple Pay","keywords":"","body":"Apple Pay Apple Pay Apple Pay 入门 直接与银联对接就可以了，使用银联的SDK，具体怎么用银联文档里有 使用 Apple Developer 开启Apple Pay权限，并添加Merchant ID Merchant ID添加证书 http://www.apple.com/certificateauthority/ 下载 Apple Intermediate Certificates > Worldwide Developer Relations - G2 Certificate Xcode中开启Apple Pay权限 相关资料 https://github.com/lintide/ApplePayDemo http://idlelife.org/archives/755 https://github.com/cjbeauchamp/ApplePayDemo http://www.cocoachina.com/ios/20150126/11019.html "},"ios/smooth-view.html":{"url":"ios/smooth-view.html","title":"让界面更流畅","keywords":"","body":"让界面更流畅 不透明 不透明可以减少颜色合成计算 离屏渲染 离屏渲染合成计算是非常昂贵的 GPU屏幕渲染有以下两种方式： On-Screen Rendering 意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。 Off-Screen Rendering 意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。 References Getting Pixels onto the Screen 绘制像素到屏幕上 Getting Pixels onto the Screen 翻译 iOS 保持界面流畅的技巧 AsyncDisplayKit YYKit "},"ios/file-provider.html":{"url":"ios/file-provider.html","title":"File Provider","keywords":"","body":"File Provider 为其它 App 访问你的 App 内的文档提供服务 File Provider Extension： 使其它 App 访问你的 App 内的文档。 File Provider UI Extension： 将一些自定义的操作添加到浏览器的上下文菜单中 File Provider Files 为其它 App 提供访问你的 App 文档的能力 File Provider 兼容多个版本 iOS 11 iOS 10 and earlier 使用 Info.plist App 访问其它 App 的文档 UIDocumentPickerViewController Document Picker Modes References Files Files 是 iOS 11 出的功能，替代了 iOS 10 中 iCloud Drive，除了界面上的不同，Files 可以管理更多的文件。 大体来看 Files 中的文件可以分为三类： iPad 应用内本地文件夹。在左侧点击「我的 iPad」，就会显示本地应用的文件。例如 Byword 自带的 「welcome.md」文件被默认保存在「iPad」文件夹中，在 Files 就会显示出来。 第三方云盘服务，例如 Dropbox，Google Drive 也可以在 Files 中打开。 第三类则是各类应用，例如 PDF Expert，Quip。 为其它 App 提供访问你的 App 文档的能力 File Provider 兼容多个版本 iOS 11 提供 NSFileProviderItem NSFileProviderEnumerator 来处理用户操作(for example, delete, rename, and move) iOS 10 and earlier 使用 Info.plist NSExtensionFileProviderSupportsEnumeration: YES： Files 中显示 App，NO 不显示 App 访问其它 App 的文档 可访问 File App、iCloud driver 等。 其他的应用程序可以使用 UIDocumentBrowserViewController 类或者 UIDocumentPickerViewController 类，访问存储的文档。这两个类提供了一个标准的用户界面（即和系统的 File App 相同的那个界面），用于浏览文件，或者与文件进行交互（增删改查）。但是呢，我们也可以使用 FileProviderUI 框架将一些自定义的操作添加到浏览器的上下文菜单中 使用 UIDocumentBrowserViewController: 只适用于 iOS11 及以上 UIDocumentPickerViewController: 适用于所有版本，在 iOS 11 及以上效果和 UIDocumentBrowserViewController 一致。 UIDocumentPickerViewController 使用 UIDocumentPickerViewController 需要先开启 App 的 iCloud 功能。 Document Picker Modes UIDocumentPickerModeImport：导入 UIDocumentPickerModeOpen：打开 UIDocumentPickerModeExportToService：导出 UIDocumentPickerModeMoveToService：直接访问 References File Provider iOS 11 Files FileProviderUI Creating File Providers for Multiple Versions of iOS "},"ios/static-analyzers.html":{"url":"ios/static-analyzers.html","title":"Swift Objective-C 静态代码分析工具","keywords":"","body":"Swift Objective-C 静态代码分析工具 Clang Static Analyzer http://clang-analyzer.llvm.org/ Xcode 内置的 Analyze 工具 Faux Pas http://fauxpasapp.com/ 第三方收费静态代码分析工具，已经很久没更新 OCLint http://oclint.org/ 开源老牌 OC 静态代码分析工具 支持输出 PMD 格式报告，容易集成到 CI Infer https://fbinfer.com/ FaceBook 出的开源静态代码分析工具，支持 Java, C, C++, and Objective-C 总结 Clang Static Analyzer和xcode集成度更高、更好用，支持命令行形式，并且能够用于持续集成。oc 可用的检查器简直是少之又少，只有16条 OCLint有更多的检查规则和定制，和很多工具集成，也同样可用于持续集成。 Infer效率高，规模大，几分钟能扫描数千行代码；支持增量及非增量分析；分解分析，整合输出结果。infer能将代码分解，小范围分析后再将结果整合在一起，兼顾分析的深度和速度。 References Static analyzers for Swift and Objective-C List of tools for static code analysis iOS开发：几种静态扫描工具的使用与对比 "},"ios/framework-design.html":{"url":"ios/framework-design.html","title":"iOS框架设计","keywords":"","body":"iOS框架设计 因为各个模块都是分不同组开发，最后用pod整合。 模块间的跳转都是由一个路由控制 对复杂的table使用工厂 脚本啥也挺多的，自动化打包啥 把跳转逻辑写在每个模块的总代理，注册在客户端的壳中，由路由进行派发，客户端其实就是壳，然后由pod组成 头文件什么的都可以不暴露在vc 普遍使用MVVM "},"ios/scanner.html":{"url":"ios/scanner.html","title":"扫码","keywords":"","body":"扫码 iOS上实现扫码的方法有ZBar,ZXing,AVFoundation AVFoundation cocoa自带库，无论在扫描灵敏度和性能上来说都是最优的，前提是iOS7之后才能用 Reference http://blog.cnbluebox.com/blog/2014/08/26/ioser-wei-ma-sao-miao/ https://github.com/shaojiankui/Scanner "},"ios/external-keyborad.html":{"url":"ios/external-keyborad.html","title":"外接键盘","keywords":"","body":"外接键盘 iOS9 及以上 UIKeyboard[Will|Did][Show|Hide]Notification 这些通知照样有用，键盘 frame 改变时，如果计算键盘的位置超出 keyboardWindow 就是用了外接键盘。 通过键盘高度位置判断 参考 https://github.com/shimohq/react-native-keyboard-view/blob/master/ios/YYKeyboardManager.m#L521-L533 在 UIKeyboardDidChangeFrameNotification 的时候通过下面逻辑判断 - (void)updateInHardwareKeyboardMode:(CGRect)keyboardFrame { CGRect keyboardWindowFrame = [self keyboardWindow].frame; if (CGRectGetMaxY(keyboardFrame) == CGRectGetMaxY(keyboardWindowFrame)) { // >= iOS11, CGRectGetHeight(after) CGRectGetMaxY(keyboardWindowFrame)) { // iPad in hardware keyboard mode [self setInHardwareKeyboardMode:YES]; } } UIKeyboardImpl https://gist.github.com/myell0w/d8dfabde43f8da543f9c 使用私有 API，可能被苹果封 References How can I detect if an external keyboard is present on an iPad? "},"ios/universal-links.html":{"url":"ios/universal-links.html","title":"Universal Links","keywords":"","body":"Universal Links 禁用 Universal Links 参考 https://stackoverflow.com/questions/38450586/prevent-universal-links-from-opening-in-wkwebview-uiwebview //就是这么的简单粗暴 - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler { //返回+2的枚举值 decisionHandler(WKNavigationActionPolicyAllow + 2); } References Support Universal Links Universal Link 前端部署采坑记 "},"ios/oclint.html":{"url":"ios/oclint.html","title":"oclint","keywords":"","body":"oclint 静态分析代码工具 官网 规则 oclint 常见的阈值 安装 先安装xctool 安装oclint 使用 1 2 3 参考资料 Test 常见的阈值 参考 available-thresholds OCLint 里面一些常见的阈值： 名称 描述 默认值 CYCLOMATIC_COMPLEXITY 循环嵌套数限制 10 LONG_CLASS 类行数限制 1000 LONG_LINE 每行的字符限制 100 LONG_METHOD 方法行数限制 50 LONG_VARIABLE_NAME 参数名字符限制 20 MAXIMUM_IF_LENGTH if 的行数限制 15 MINIMUM_CASES_IN_SWITCH switch case 的最小数目 3 NPATH_COMPLEXITY 通过该方法的非循环执行路径数量限制 200 NCSS_METHOD 连续未注释行数限制 30 NESTED_BLOCK_DEPTH block 嵌套层数限制 5 SHORT_VARIABLE_NAME 变量名的最小字符数限制 3 TOO_MANY_FIELDS 类成员限制 20 TOO_MANY_METHODS 类方法数限制 30 TOO_MANY_PARAMETERS 参数个数限制 10 安装 先安装xctool $ brew install xctool 安装oclint $ brew install Caskroom/cask/oclint 使用 1 File > New > Target > Other > Aggregate 添加一个名为OClint的Aggregate 2 OClint > Build Phases > + > New Run Script Phase Shell中写入以下内容，YourProject.xcodeproj,YourScheme换成对应的内容 source ~/.bash_profile cd ${SRCROOT} xctool \\ -project YourProject.xcodeproj \\ -scheme YourScheme \\ -reporter json-compilation-database:compile_commands.json \\ build oclint-json-compilation-database \\ -e Pods \\ -- -rc=LONG_LINE=100 \\ -rc=NCSS_METHOD=60 \\ | sed 's/\\(.*\\.\\m\\{1,2\\}:[0-9]*:[0-9]*:\\)/\\1 warning:/' xctool导出compile_commands.json文件 oclint-json-compilation-database 解析compile_commands.json文件 oclint参数 oclint -rc 3 scheme 选择 OClint > build 参考资料 Using OCLint in Xcode Using OCLint with xctool https://segmentfault.com/a/1190000002547015 [] todo [] todo [] todo- [] todo- [] todo- [] todo- [] todo Test "},"ios/Other.html":{"url":"ios/Other.html","title":"Other","keywords":"","body":"Other block _property 直接用私有变量有个需要特别注意的地方，在 block 里直接写 _property 相当于 self->_property，虽然没写 self，但是暗含了对 self 的retain，容易造成循环引用。要记得用 weakSelf/strongSelf 大法。 "},"ios/questions.html":{"url":"ios/questions.html","title":"iOS开发过程中遇到的问题","keywords":"","body":"iOS开发过程中遇到的问题 iOS开发过程中遇到的问题 Q1:Category中重写dealloc导致通知、KVO未注销 Q2:Assertion failure in -[UITableView layoutSublayersOfLayer:] Q3: UIScrollView中添加UITableView，viewWidthUpdated无限循环。 Q4 question answer reference Q5: 浮点数精度问题 Q6: View 获取他的 viewController Q1:Category中重写dealloc导致通知、KVO未注销 Category如果要重写方法，必须用runtime修改该方法。 建议不要在Category中重写dealloc,应该扩展出一个释放资源的方法。 在ARC中，dealloc的时候不能调[super dealloc],但是会调用[super dealloc]。 Q2:Assertion failure in -[UITableView layoutSublayersOfLayer:] http://stackoverflow.com/questions/31340603/assertion-failure-in-uitableview-layoutsublayersoflayer-on-ios-7 iOS7的tableView的子View不能设置约束。 Q3: UIScrollView中添加UITableView，viewWidthUpdated无限循环。 UITableView宽度、高度不能对UIScrollView做约束。 Q4 question 构建新的 App 和 App 更新时，必须使用公共（GM）版 Xcode 6 或更高版本、OS X 以及 iOS SDK。请勿提交使用 Beta 版软件，包括 Beta 版 OS X 构建的 App。 环境： Xcode: 7.3.1 OS X: 10.11.5 (15F34) answer 用 Xcode 7.3 打包 Product > Archive > 右键 > Show in Finder > 显示包内容 > Products /Applications /xxx.app /Info.plist BuildMachineOSBuild 修改为 15D21 reference http://blog.csdn.net/minjing_lin/article/details/51085361 Q5: 浮点数精度问题 question NSString *str = @\"37.3336\"; float f = [str floatValue]; // f = 37.3335991 NSJSONSerialization 转 NSDictionary float 出错 answer NSString *str = @\"37.3336\"; float f = [str doubleValue]; // f = 37.3336 explain 因为float类型无法精准保存, 系统会选一个接近的值来代替.而double类型则可以有更好的精度,但还是会出现类似问题。更精确的方式是使用 NSDecimalNumber NSJSONSerialization 的问题只能服务器返回字符串 http://stackoverflow.com/questions/9328260/converting-nsstring-to-float-adds-in-decimal-places Your issue seems to be that you don't understand how floats are stored in memory and don't know that floats aren't precise. Exact values often can't be stored and so the system picks the closest number it can to represent it. If you look carefully, you can see that each of the outputted numbers is very close to your inputted values. For better accuracy, try using double instead. Double does encounter the same problems, but with better precision. Floats have about 6 significant digits; doubles have more than twice that.Source Here are some other StackOverflow answers and external articles you should read: What Every Computer Scientist Should Know About Floating-Point Arithmetic Floating Points on Wikipedia This answer on a similar question float、double(浮点数)区别还有和decimal(定点数)的比较 Q6: View 获取他的 viewController - (UIViewController *)reactViewController { id responder = [self nextResponder]; while (responder) { if ([responder isKindOfClass:[UIViewController class]]) { return responder; } responder = [responder nextResponder]; } return nil; } 参考： 获取当前viewcontroller响应事件传递 "},"ios/xcodebuild-deploy.html":{"url":"ios/xcodebuild-deploy.html","title":"自动打包并发布应用","keywords":"","body":"自动打包并发布应用 xcodebuild打包 各参数使用说明 $ man xcodebuild 查看xcodebuild所有用法 -workspace 指定workspace. 必须和“-scheme”一起使用，构建该workspace下的一个scheme。 -project 指定project. 当根目录下有多个project的时候，必须使用“-project”指定project， -target 指定target -scheme 指定scheme. 和“-workspace”一起使用，指定构建的scheme。 -showsdks 列出可用的SDK $ xcodebuild -showsdks -sdk 设置SDK -sdk iphoneos9.2 -list 列出所有可用的Targets、Build Configurations、Schemes // 列出默认Project的 $ xcodebuild -list // 列出指定workspace的 $ xcodebuild -list -workspace .xcworkspace/ -configuration 编译的方式,Release,Debug,Adhoc 等 -destination generic/platform=iOS ONLY_ACTIVE_ARCH ONLY_ACTIVE_ARCH=NO 构建行为 clean:清除build目录下的 build: 编译 test: 测试某个scheme，必须和\"-scheme\"一起使用 archive:打包，必须和“-scheme”一起使用 scheme 用到的scheme都要设置成share 编译 $ xcodebuild -workspace ${WORKSPACE_NAME}.xcworkspace -scheme ${SCHEME_NAME} -sdk ${SDK_VERSION} -configuration ${CONFIGURATION} ONLY_ACTIVE_ARCH=NO build 打包 clean $ xcodebuild -workspace ${WORKSPACE_NAME}.xcworkspace -scheme ${SCHEME_NAME} -sdk ${SDK_VERSION} -configuration ${CONFIGURATION} ONLY_ACTIVE_ARCH=NO clean archive 导出.xcarchive该文件 $ xcodebuild -workspace ${WORKSPACE_NAME}.xcworkspace -scheme ${SCHEME_NAME} -sdk ${SDK_VERSION} -configuration ${CONFIGURATION} -destination ${ARCHIVE_DESTINATION} -archivePath ${APP_DIR}/${APP_NAME}.xcarchive ONLY_ACTIVE_ARCH=NO archive export ipa 导出ipa文件 -exportProvisioningProfile 描述该文件名称,描述该文件Name对应的值 -exportOptionsPlist plist文件路径。 $ xcodebuild --helpplist文件参数 eg: $ TIMESTAMP=`date \"+%Y_%m_%d_%H_%M_%S\"` $ IPA_PATH_NO_SUFFIX=${APP_DIR}/${APP_NAME}_${TIMESTAMP} $ xcodebuild -exportArchive -archivePath ${APP_DIR}/${APP_NAME}.xcarchive -exportPath ${IPA_PATH_NO_SUFFIX} -exportProvisioningProfile \"${PROFILE_NAME}\" -exportFormat ipa -verbose 发布到fir.im 安装cli https://github.com/FIRHQ/fir-cli/blob/master/README.md $ ruby -v # > 1.9.3 $ gem install fir-cli 发布ipa fir publish ${IPA_PATH_NO_SUFFIX}.ipa -T ${FIR_TOKEN} || failed \"fir publish\" 常见问题 Q1 ** ARCHIVE FAILED ** The following build commands failed: CompileC ***** normal armv7 objective-c com.apple.compilers.llvm.clang.1_0.compiler (1 failure) A1 直接用Archive:Xode > Product > Archive，可以提示具体的代码错误。 实例 Example 相关资料 xcodebuild's new exportOptionsPlist flag 构建iOS持续集成平台（一）——自动化构建和依赖管理 xcodebuild详细的命令行 使用 xcodebuild 从 archive 导出 ipa http://blog.octo.com/en/automating-over-the-air-deployment-for-iphone/ https://fir.im/ http://blog.reohou.com/how-to-export-ipa-from-archive-using-xcodebuild/ http://www.tuicool.com/articles/FBbmEn http://magicalboy.com/xcodebuild-usage/ "},"ios/Cocoapods.html":{"url":"ios/Cocoapods.html","title":"Cocoapods","keywords":"","body":"Cocoapods 官网 podspec文档 podfile文档 安装 gem install cocoapods Podfile use_frameworks! 使用 frameworks，而不使用静态库 inhibit_all_warnings! 继承所有警告，Xcode 中显示 cocoapods 工程的警告 lib 创建pod库 用Cocoapods的模板 $ pod lib create GreedAppleWallet 用自定义的模板 $ pod lib create GreedAppleWallet --template-url=https://github.com/GreedBell/pod-template "},"ios/gesture-recognizer.html":{"url":"ios/gesture-recognizer.html","title":"iOS 手势","keywords":"","body":"iOS 手势 UITapGestureRecognizer 轻拍手势 UISwipeGestureRecognizer 轻扫手势 UILongPressGestureRecognizer 长按手势 UIPanGestureRecognizer 平移手势 UIPinchGestureRecognizer 捏合（缩放）手势 UIRotationGestureRecognizer 旋转手势 UIScreenEdgePanGestureRecognizer 屏幕边缘平移 "},"ios/app-store-review.html":{"url":"ios/app-store-review.html","title":"App 内 AppStore 评分","keywords":"","body":"App 内 AppStore 评分 Requesting App Store Reviews "},"ios/speech-recognizer.html":{"url":"ios/speech-recognizer.html","title":"语音识别","keywords":"","body":"语音识别 References 官方文档 官方例子 使用iOS语言识别以及语言合成遇到的坑 iOS语音识别和语音合成 iOS siri语音听写和语音合成OC版 "},"ios/xcode-select.html":{"url":"ios/xcode-select.html","title":"xcode-select","keywords":"","body":"xcode-select 查看当前 Xcode 路径 xcode-select -p 切换 sudo xcode-select -s /Applications/Xcode-8.2.1.app/Contents/Developer/ "},"ios/iphonex-adaptive.html":{"url":"ios/iphonex-adaptive.html","title":"iPhoneX 适配","keywords":"","body":"iPhoneX 适配 safe area UIViewController /* Custom container UIViewController subclasses can use this property to add to the overlay that UIViewController calculates for the safeAreaInsets for contained view controllers. */ @property(nonatomic) UIEdgeInsets additionalSafeAreaInsets API_AVAILABLE(ios(11.0), tvos(11.0)); // These objects may be used as layout items in the NSLayoutConstraint API @property(nonatomic,readonly,strong) id topLayoutGuide API_DEPRECATED_WITH_REPLACEMENT(\"-[UIView safeAreaLayoutGuide]\", ios(7.0,11.0), tvos(7.0,11.0)); @property(nonatomic,readonly,strong) id bottomLayoutGuide API_DEPRECATED_WITH_REPLACEMENT(\"-[UIView safeAreaLayoutGuide]\", ios(7.0,11.0), tvos(7.0,11.0)); - (void)viewSafeAreaInsetsDidChange NS_REQUIRES_SUPER API_AVAILABLE(ios(11.0), tvos(11.0)); UIView @property (nonatomic) BOOL insetsLayoutMarginsFromSafeArea API_AVAILABLE(ios(11.0),tvos(11.0)); // Default: YES @property (nonatomic,readonly) UIEdgeInsets safeAreaInsets @property(nonatomic,readonly,strong) UILayoutGuide *safeAreaLayoutGuide - (void)safeAreaInsetsDidChange react native 初始化 和 safeAreaInsetsDidChange 的时候， 设置 statusBar height 和 paddingTop，适配 top。 paddingTop = safeArea.top。 height += paddingTop 设置 tabBar height 和 paddingBottom，适配 bottom。 paddingBottom = safeArea.bottom height += paddingBottom scrollview 及所有子类，例如 flatList listView，设置 contentInset 或 scrollIndicatorInsets 属性，适配 bottom scrollview.contentInset = {0, 0, safeArea.bottom, 0} 或 scrollview.scrollIndicatorInsets = {top: 0, left: 0, bottom: safeArea.bottom, right: 0} 两个效果是一样的，原生调用的同样的代码 webview 设置 contentInset webview.contentInset = {top: 0, left: 0, bottom: safeArea.bottom, right: 0} References Human Interface Guidelines - iPhoneX Positioning Content Relative to the Safe Area iOS 指纹识别常见问题汇总 "},"ios/import-export.html":{"url":"ios/import-export.html","title":"iOS 导入导出文档","keywords":"","body":"iOS 导入导出文档 导出文档 UIActivityViewController 和 UIDocumentInteractionController 都可以实现。 UIActivityViewController 相比 UIDocumentInteractionController 优势 可以配置 excludedActivityTypes 添加额外的自定义服务，它还提供了非常好的原生服务的定制化功能。 自定义UIActivity服务 从 PC 端 iTunes 导入文档 UIFileSharingEnabled 设为 YES，iTunes 可以访问 NSDocumentDirectory 目录。 获取导入的文档 NSString *documentsDirectory = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]; NSFileManager *manager = [NSFileManager defaultManager]; NSArray *fileList = [manager contentsOfDirectoryAtPath:documentsDirectory error:nil]; NSMutableString *filesStr = [NSMutableString stringWithString:@\"Documents文件夹中文件的名称： \\n\"]; 应用间的文件交换 参考 Uniform Type Identifiers Reference CFBundleDocumentTypes 设置支持的格式，其它 App 调用 UIDocumentInteractionController 或 UIActivityViewController 时就会有 App 的 icon。 Document Types 已知格式 Imported UTIs 添加新的格式 References iOS-实现文件导入和导出 UTType Introduction to Uniform Type Identifiers Reference Introduction to Uniform Type Identifiers Overview 通过iTunes共享文件到Document目录 "},"ios/wkwebview-questions.html":{"url":"ios/wkwebview-questions.html","title":"WKWebView 的问题","keywords":"","body":"WKWebView 的问题 WKWebView 的问题 不能管理 cookies 缓存问题 WKWebView发起的资源请求也是不经过NSURLProtocol POST请求无法发送参数 alert() 不起作用 跨域 一个可点击的标签带有 target='_blank' 时，导致WKWebView无法加载点击后的网页的问题 一些特殊应用：tel://，mailto://，微信的，自定义协议 不会跳转 不支持 keyboardDisplayRequiresUserAction 没有 scalesPageToFit 参数 本地文件 iframe 间通信报跨域错误 Other References 不能管理 cookies 每次 request 的时候把 cookies 设置进去 缓存问题 WKWebView会忽视默认的网络存储， NSURLCache, NSHTTPCookieStorage, NSCredentialStorage。 目前是这样的，WKWebView有自己的进程，同样也有自己的存储空间用来存储cookie和cache， 其他的网络类如NSURLConnection是无法访问到的。导致无法自定义请求。这样导致了在使用时遇到了H5页面修改了，APP却没有更新到，想清理缓存却无从下手， 方法一：url后面加上时间戳， 方法二：iOS9之后WKWebView才有清除缓存的方法： if ([[[UIDevicecurrentDevice] systemVersion]intValue ] > 8) { NSArray * types =@[WKWebsiteDataTypeMemoryCache,WKWebsiteDataTypeDiskCache]; // 9.0之后才有的　 NSSet *websiteDataTypes = [NSSetsetWithArray:types]; NSDate *dateFrom = [NSDatedateWithTimeIntervalSince1970:0]; [[WKWebsiteDataStoredefaultDataStore] removeDataOfTypes:websiteDataTypesmodifiedSince:dateFrom completionHandler:^{ }]; }else{ NSString *libraryPath = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,NSUserDomainMask, YES) objectAtIndex:0]; NSString *cookiesFolderPath = [libraryPathstringByAppendingString:@\"/Cookies\"]; NSLog(@\"%@\", cookiesFolderPath); NSError *errors; [[NSFileManagerdefaultManager] removeItemAtPath:cookiesFolderPatherror:&errors]; } WKWebView发起的资源请求也是不经过NSURLProtocol 让 WKWebView 支持 NSURLProtocol POST请求无法发送参数 使用NSURLSession解决WKWebView无法POST参数的问题（性能和结果都可能有问题，不推荐使用） 使用JavaScript解决WKWebView无法发送POST参数问题 alert() 不起作用 要实现 WKUIDelegate 的 - (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler 方法 跨域 WKNavigationDelegate 的 - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler 一个可点击的标签带有 target='_blank' 时，导致WKWebView无法加载点击后的网页的问题 解决办法： 参考 WKWebView遇到_blank的处理方法 - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler { if (!navigationAction.targetFrame.isMainFrame) { [webView evaluateJavaScript:@\"var a = document.getElementsByTagName('a');for(var i=0;i一些特殊应用：tel://，mailto://，微信的，自定义协议 不会跳转 解决办法： - (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler { NSURL *URL = navigationAction.request.URL; if ([self externalAppRequiredToOpenURL:URL]) { if ([[UIApplication sharedApplication] canOpenURL:URL]) { [[UIApplication sharedApplication] openURL:URL]; decisionHandler(WKNavigationActionPolicyCancel); return; } } else { if (!navigationAction.targetFrame) { [webView loadRequest:navigationAction.request]; decisionHandler(WKNavigationActionPolicyCancel); return; } } decisionHandler(WKNavigationActionPolicyAllow); } /** 是否为打开外部 App @param URL URL description @return YES: 是的 */ - (BOOL)externalAppRequiredToOpenURL:(NSURL *)URL { NSString *scheme = URL.scheme; if (scheme.length) { NSSet *validSchemes = [NSSet setWithArray:@[@\"http\", @\"https\"]]; return ![validSchemes containsObject:URL.scheme]; } else { return NO; } } 不支持 keyboardDisplayRequiresUserAction 添加 + (void)load { static dispatch_once_t onceToken; dispatch_once(&onceToken, ^{ // support keyboardDisplayRequiresUserAction SEL sel = sel_getUid(\"_startAssistingNode:userIsInteracting:blurPreviousNode:userObject:\"); Class WKContentView = NSClassFromString(@\"WKContentView\"); Method method = class_getInstanceMethod(WKContentView, sel); IMP originalImp = method_getImplementation(method); IMP imp = imp_implementationWithBlock(^void(id me, void* arg0, BOOL arg1, BOOL arg2, id arg3) { ((void (*)(id, SEL, void*, BOOL, BOOL, id))originalImp)(me, sel, arg0, TRUE, arg2, arg3); }); method_setImplementation(method, imp); }); } 没有 scalesPageToFit 参数 本地文件 iframe 间通信报跨域错误 SecurityError (DOM Exception 18): Blocked a frame with origin \"null\" from accessing a frame with origin \"null\". Protocols, domains, and ports must match. 解决不了 Other 忘了是做什么用的了 if (navigationAction.navigationType == WKNavigationTypeLinkActivated && [url.scheme isEqualToString:@\"https\"]) { [[UIApplication sharedApplication] openURL:url]; decisionHandler(WKNavigationActionPolicyCancel); return; } References WKWebView我跨过去的坑 why (for instance) Google Chrome for iOS still uses UIWebView WKWebView的使用和各种坑的解决方法（OC＋Swift） 浅谈iOS中WKWebView和UIWebView的清除缓存问题 WKWebView从入门到趟坑 "},"ios/layout.html":{"url":"ios/layout.html","title":"布局方式","keywords":"","body":"布局方式 AutoLayout 自动布局 Size Classes 各个端取不同的值 Vary for Trait 特征变量(Trait Variations) 在 Xcode8 中删除了 size class 选项，取而代之的是 Use Trait Variations 完成不同平台不同布局的使用方法： 选中某个组件 > View as: **，选择布局需要特殊处理的平台，譬如 iPad > Vary for Trait > 勾上 Width 和 Height > 修改布局 > Done Varying。 "},"ios/split-view-controller.html":{"url":"ios/split-view-controller.html","title":"UISplitViewController","keywords":"","body":"UISplitViewController In iOS 8 and later, you can use the UISplitViewController class on all iOS devices; in previous versions of iOS, the class is available only on iPad. iOS 8 及新系统上可以在所有 iOS 设备上使用 ，之前版本只能在 iPad 上用 "},"ios/pod-lib-create.html":{"url":"ios/pod-lib-create.html","title":"pod lib create 实现过程","keywords":"","body":"pod lib create 实现过程 研究 pod lib create 是如果完成创建 cocoaPods 工程的。 相关工程 CocoaPods pod-template CocoaPods Example: $ pod lib create WFT-social --template-url=/Users/Bell/Documents/Gitlab/pod-template/.git bundle install 安装所有依赖 lib.rb lib.rb的完整路径lib/cocoapods/command/lib.rb。是实现pod lib create 的文件目录.会执行下面命令。 clone_template clone --template-url 对应的 repo 到本地 configure_template 调用 pod-template/configure print_info 打印结果 pod-template 核心文件 ├── configure ├── setup │ ├── ConfigureSwift.rb │ ├── ConfigureiOS.rb │ ├── MessageBank.rb │ ├── ProjectManipulator.rb │ ├── TemplateConfigurator.rb configure Pod::TemplateConfigurator.new(pod_name).run 调用 pod-template/setup/TemplateConfigurator.rb 的 run 方法 TemplateConfigurator 配置工程 run 方法 run 方法定义了配置工程的所有步骤 def run @message_bank.welcome_message framework = self.ask_with_answers(\"What language do you want to use?\", [\"ObjC\", \"Swift\"]).to_sym case framework when :swift ConfigureSwift.perform(configurator: self) when :objc ConfigureIOS.perform(configurator: self) end replace_variables_in_files clean_template_files rename_template_files add_pods_to_podfile customise_prefix ensure_carthage_compatibility reinitialize_git_repo run_pod_install @message_bank.farewell_message end replace_variables_in_files 修改文件里的变量 clean_template_files 删除临时文件 rename_template_files 修改文件名 add_pods_to_podfile 修改Podfile customise_prefix 修改 .pch 文件 ensure_carthage_compatibility 创建软链接 reinitialize_git_repo 重新初始化git run_pod_install 运行 pod install ConfigureIOS 配置 objc 工程 Pod::ProjectManipulator.new({ :configurator => @configurator, :xcodeproj_path => \"templates/ios/Example/PROJECT.xcodeproj\", :platform => :ios, :remove_demo_project => (keep_demo == :no), :prefix => prefix, :pod_organization => organization }).run ProjectManipulator 修改工程文件里的变量 def run @string_replacements = { \"PROJECT_OWNER\" => @configurator.user_name, \"TODAYS_DATE\" => @configurator.date, \"TODAYS_YEAR\" => @configurator.year, \"PROJECT\" => @configurator.pod_name, \"CPD\" => @prefix, \"POD_ORGANIZATION\" => @pod_organization, } replace_internal_project_settings @project = Xcodeproj::Project.open(@xcodeproj_path) add_podspec_metadata remove_demo_project if @remove_demo_target @project.save rename_files rename_project_folder end replace_internal_project_settings 修改工程文件里的变量 "},"ios/ci.html":{"url":"ios/ci.html","title":"CI服务器与自动化部署","keywords":"","body":"CI服务器与自动化部署 目前，业界比较流行的，支持iOS构建的CI服务器有Travis CI和Jenkins Travis CI 只支持gitHub Jenkins 安装 brew install jenkins 启动 jenkins 默认为8080端口，自定义端口： defaults write /Library/Preferences/org.jenkins-ci httpPort 7072 打开 http://localhost:8080 使用 "},"ios/handoff.html":{"url":"ios/handoff.html","title":"Handoff","keywords":"","body":"Handoff Mac 浏览器打开手机 App 上的 URL 创建一个 NSUserActivity，activityType 设为自己 App 的 Bundle ID，webpageURL 设为需要 mac 浏览器打开的 URL。mac 上如果没有对应 Bundle ID 的 App，则使用默认浏览器打开 eg: NSUserActivity* myActivity = [[NSUserActivity alloc] initWithActivityType: @\"com.company.myapp\"]; myActivity.webpageURL = [NSURL URLWithString:@\"http://www.google.co.uk\"]; References Handoff Programming Guide How does one do a Native App to Web Browser Handoff? react-native-handoff 使用“连续互通”连接 Mac、iPhone、iPad、iPod touch 和 Apple Watch "},"ios/selector.html":{"url":"ios/selector.html","title":"Selector","keywords":"","body":"Selector performSelector may cause a leak because its selector is unknown http://www.jianshu.com/p/6517ab655be7 https://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown "},"ios/sharine-extension.html":{"url":"ios/sharine-extension.html","title":"Sharing Extension","keywords":"","body":"Sharing Extension 扩展 UIActivityViewController 第一排操作 Storage Provider: app 直接可以使用这些扩展检索和存储文件而不再需要创建不必要的拷贝。 拷贝到 App References Sharing and Actions Understand Share Extensions 【iOS扩展开发攻略】Share Extension "},"ios/tools.html":{"url":"ios/tools.html","title":"实用工具","keywords":"","body":"实用工具 实用工具 nomad fastlane Dash Deploymate FauxPas 问题 FLEX OCLint References nomad World-Class Command Line Utilities For iOS Development http://nomad-cli.com/ fastlane 自动发布应用到AppStore https://github.com/fastlane/fastlane Dash API文档查看器 https://kapeli.com/dash Deploymate 找出工程中不可用，不赞成使用，已废弃的API http://www.deploymateapp.com/ FauxPas 找到各种隐形的bug 问题 组件化之后，只扫描主工程，子工程需要一个一个单独扫描。 http://fauxpasapp.com/releases/ 已经很久没维护了 http://fauxpasapp.com/ FLEX App内调试工具，可以查看、修改界面布局，网络。。。 https://github.com/Flipboard/FLEX OCLint 静态分析代码工具 官网 规则 References https://github.com/vsouza/awesome-ios#debugging https://github.com/vsouza/awesome-ios#code-quality https://firebase.google.com/docs/perf-mon/?hl=zh-cn "},"ios/unit-test.html":{"url":"ios/unit-test.html","title":"iOS 单元测试","keywords":"","body":"iOS 单元测试 XCTest - (void)setUp { [super setUp]; // 每次测试前调用，可以在测试之前创建在 test case 方法中需要用到的一些对象等 } - (void)tearDown { // 每次测试结束时调用 tearDown 方法 [super tearDown]; } - (void)testExample { // 测试用例，可以用 XCTAssert（断言）来检测测试结果。 } - (void)testPerformanceExample { [self measureBlock:^{ // 性能测试 block，block 内计算耗时 }]; } 断言 //通用断言 XCTAssert(expression, format...) //常用断言： XCTAssertTrue(expression, format...) XCTAssertFalse(expression, format...) // == 判断是否相等 XCTAssertEqual(expression1, expression2, format...) // equalTo 判断是否相等 XCTAssertEqualObjects(expression1, expression2, format...) XCTAssertNotEqual(expression1, expression2, format...) XCTAssertEqualWithAccuracy(expression1, expression2, accuracy, format...) XCTAssertNotEqualWithAccuracy(expression1, expression2, accuracy, format...) XCTAssertNil(expression, format...) XCTAssertNotNil(expression, format...) XCTFail(format...) //直接Fail的断言 "},"mac/auto-launch.html":{"url":"mac/auto-launch.html","title":"开机自启动","keywords":"","body":"开机自启动 loginwindow 该方法最多只能设置一个执行脚本，且已经不被Apple推荐 添加自启动项 sudo defaults write com.apple.loginwindow LoginHook /path/to/script.sh 查看自启动项 sudo defaults read com.apple.loginwindow LoginHook 删除自启动项 sudo defaults delete com.apple.loginwindow LoginHook 添加退出时自动运行脚本 sudo defaults write com.apple.loginwindow LogoutHook /path/to/script.sh References 为Mac添加开机启动脚本 "},"mac/launch.html":{"url":"mac/launch.html","title":"Mac OSX的开机启动配置","keywords":"","body":"Mac OSX的开机启动配置 OSX的开机启动配置 用户与群组 设置 Launchd Daemon Launch Daemons and Agents plist 文件存在的目录 在使用者登入时载入 ~/Library/LaunchAgents 由用户自己定义的任务项 /Library/LaunchAgents 由管理员为用户定义的任务项 /System/Library/LaunchAgents 由 Mac OS X 为用户定义的任务项 在开机时载入 /Library/LaunchDaemons 由管理员为用户定义的守护进程任务项 /System/Library/LaunchDaemons 由 Mac OS X 定义的守护进程任务项 任务操作 加载任务 launchctl load -w ***.plist ；-w 选项会将plist文件中无效的key覆盖掉，建议加上 删除任务 launchctl unload -w ***.plist 查看任务列表 launchctl list；列表会显示很多任务，建议过滤一下：launchctl list | grep '任务的部分名字' launchd plist 文件\b说明 Label: 任务名称，唯一的 Key ProgramArguments: 程序运行参数，第一个为需要执行的程序路径 KeepAlive: 是否始终运行 RunAtLoad: 是否开启自启动 StartCalendarInterval: 运行的时间，单个时间点使用dict，多个时间点使用 array StartInterval: 时间间隔，与StartCalendarInterval使用其一，单位为秒 StandardInPath、StandardOutPath、StandardErrorPath：标准的输入输出错误文件，这里建议不要使用 .log 作为后缀，会打不开里面的信息。 StartupItems StartupItems一般存放在以下两个路径下： 1）/System/Library/StartupItems 2）/Library/StartupItems "},"mac/macports.html":{"url":"mac/macports.html","title":"macports","keywords":"","body":"macports 官网 安装 brew cask install macports 使用 搜索 port search php71-curl 安装 sudo port install php71-curl "},"mac/brew.html":{"url":"mac/brew.html","title":"Brew","keywords":"","body":"Brew Homebrew/brew Mac 安装命令行工具 homebrew-cask Mac 安装图形界面工具 tap brew 扩展相关 列出所有扩展 brew tap 安装 cask 扩展 brew tap caskroom/cask 缓存 ~/Library/Caches/Homebrew/Cask/ "},"mac/mac-clean.html":{"url":"mac/mac-clean.html","title":"Mac 删除临时文件","keywords":"","body":"Mac 删除临时文件 清除缓存文件 cd ~/Library/Caches/ du -hs * | sort -h rm -rf ~/Library/Caches/* References Mac OS X删除临时文件释放空间 "},"mac/shortcut.html":{"url":"mac/shortcut.html","title":"快捷键","keywords":"","body":"快捷键 弹出emoji表情 control + command + space "},"mac/crash.html":{"url":"mac/crash.html","title":"崩溃","keywords":"","body":"崩溃 OS X：如果您的电脑自动重新启动或显示“电脑因出现问题而重新启动” 使用 Apple Hardware Test 了解内核崩溃并调试 MemTest for Mac OS X Tests your RAM 目录 内核崩溃日志目录: /Library/Logs/DiagnosticReports .kext 文件目录 /Library/Extensions /System/Library/Extensions .plist 文件目录 /System/Library/LaunchAgents /System/Library/LaunchDaemons App 文件存储路径 ~/Library/Preferences/ ~/Library/Application\\ Support/ 内核崩溃 com.intel.kext.intelhaxm 查看正在运行的内核任务 kextstat | grep intelhaxm 结束任务 sudo kextunload -bundle-id com.intel.kext.intelhaxm 启动任务 sudo kextload -bundle-id com.intel.kext.intelhaxm 关闭自启动 sudo launchctl unload -w com.intel.haxm.plist 查看是不已经关闭自启动成功 launchctl list | grep com.intel other crash com.apple.driver.AppleXsanScheme com.apple.driver.usb.cdc com.apple.iokit.IOBluetoothUSBDFU com.apple.filesystems.smbfs com.apple.driver.AudioAUUC com.apple.filesystems.smbfs 3.1.1 com.apple.driver.AudioAUUC 1.70 com.apple.iokit.IOBluetoothUSBDFU 5.0.3f1 com.apple.driver.ApplePlatformEnabler 2.7.0d0 com.apple.driver.AGPM 110.23.14 com.apple.driver.X86PlatformShim 1.0.0 com.apple.filesystems.autofs 3.0 System uptime in nanoseconds: 10193133459234 last loaded kext at 4610079125: com.apple.driver.AudioAUUC 1.70 (addr 0xffffff7f8c965000, size 32768) last unloaded kext at 685885412310: com.apple.driver.AppleFileSystemDriver 3.0.1 (addr 0xffffff7f8d3ff000, size 8192) loaded kexts: com.apple.driver.ApplePlatformEnabler 2.7.0d0 com.apple.driver.AGPM 110.23.14 com.apple.driver.X86PlatformShim 1.0.0 com.apple.filesystems.autofs 3.0 com.apple.driver.AppleOSXWatchdog 1 关闭 Rootless http://www.jianshu.com/p/22b89f19afd6 关闭 Rootless。重启按住 Command+R，进入恢复模式，打开Terminal。 csrutil disable 禁用 AudioAUUC kextstat | grep AudioAUUC sudo kextunload -bundle-id com.apple.driver.AudioAUUC # Or sudo kextunload /System/Library/Extensions/AudioAUUC.kext kextstat | grep AudioAUUC sudo mv /System/Library/Extensions/AudioAUUC.kext /System/Library/Extensions/AudioAUUC.disabled 恢复 sudo mv /System/Library/Extensions/AudioAUUC.disabled /System/Library/Extensions/AudioAUUC.kext 禁用 IOBluetoothUSBDFU kextstat | grep IOBluetoothUSBDFU sudo kextunload -bundle-id com.apple.iokit.IOBluetoothUSBDFU # OR sudo kextunload /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.kext kextstat | grep IOBluetoothUSBDFU 恢复 sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.disabled /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.kext 禁用 autofs kextstat | grep autofs sudo kextunload -bundle-id com.apple.filesystems.autofs # OR sudo kextunload /System/Library/Extensions/autofs.kext kextstat | grep autofs sudo mv /System/Library/Extensions/autofs.kext /System/Library/Extensions/autofs.disabled 参考 autofs crash sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.autofsd.plist sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.automountd.plist sudo mv /System/Library/Extensions/autofs.kext /System/Library/Extensions/autofs.disabled Reboot the system and autofs is completely disabled and the crashes go away. To turn it back on: sudo mv /System/Library/Extensions/autofs.disabled /System/Library/Extensions/autofs.kext sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.autofsd.plist sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.automountd.plist 恢复 sudo mv /System/Library/Extensions/autofs.disabled /System/Library/Extensions/autofs.kext 禁用 com.apple.iokit.IOBluetoothUSBDFU kextstat | grep IOBluetoothUSBDFU sudo kextunload -bundle-id com.apple.iokit.IOBluetoothUSBDFU sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.kext /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.disabled 恢复 sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.disabled /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothUSBDFU.kext 禁用 com.apple.driver.usb.cdc kextstat | grep usb sudo kextunload -bundle-id com.apple.driver.usb.cdc 禁用 com.apple.driver.AGPM http://www.memacx.com/thread-4502-1-1.html kextstat | grep AGPM sudo kextunload -bundle-id com.apple.driver.AGPM sudo mv /System/Library/Extensions/AppleGraphicsPowerManagement.kext /System/Library/Extensions/AppleGraphicsPowerManagement.disabled 恢复 sudo mv /System/Library/Extensions/AppleGraphicsPowerManagement.disabled /System/Library/Extensions/AppleGraphicsPowerManagement.kext 禁用 com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport kextstat | grep BroadcomBluetoothHostControllerUSBTransport sudo kextunload -bundle-id com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/BroadcomBluetoothHostControllerUSBTransport.kext /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/BroadcomBluetoothHostControllerUSBTransport.disabled 恢复 sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/BroadcomBluetoothHostControllerUSBTransport.disabled /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/BroadcomBluetoothHostControllerUSBTransport.kext 禁用 com.apple.iokit.IOBluetoothSerialManager kextstat | grep IOBluetoothSerialManager sudo kextunload -bundle-id com.apple.iokit.IOBluetoothSerialManager sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothSerialManager.kext /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothSerialManager.disabled 恢复 sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothSerialManager.disabled /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothSerialManager.kext sudo kextload -bundle-id com.apple.iokit.IOBluetoothSerialManager 禁用 com.apple.iokit.IOUserEthernet kextstat | grep IOUserEthernet sudo kextunload -bundle-id com.apple.iokit.IOUserEthernet sudo mv /System/Library/Extensions/IOUserEthernet.kext /System/Library/Extensions/IOUserEthernet.disabled 恢复 sudo mv /System/Library/Extensions/IOUserEthernet.disabled /System/Library/Extensions/IOUserEthernet.kext sudo kextload -bundle-id com.apple.iokit.IOUserEthernet 禁用 com.apple.iokit.IOBluetoothHostControllerTransport kextstat | grep IOBluetoothHostControllerTransport sudo kextunload -bundle-id com.apple.iokit.IOBluetoothSerialManager sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothHostControllerTransport.kext /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothHostControllerTransport.disabled 恢复 sudo mv /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothHostControllerTransport.disabled /System/Library/Extensions/IOBluetoothFamily.kext/Contents/PlugIns/IOBluetoothHostControllerTransport.kext sudo kextload -bundle-id com.apple.iokit.IOBluetoothSerialManager 禁用 com.apple.iokit.IOBluetoothFamily kextstat | grep IOBluetoothFamily sudo kextunload -bundle-id com.apple.iokit.IOBluetoothFamily sudo mv /System/Library/Extensions/IOBluetoothFamily.kext /System/Library/Extensions/IOBluetoothFamily.disabled 恢复 sudo mv /System/Library/Extensions/IOBluetoothFamily.disabled /System/Library/Extensions/IOBluetoothFamily.kext sudo kextload -bundle-id com.apple.iokit.IOBluetoothFamily 禁用 com.apple.driver.ApplePlatformEnabler kextstat | grep ApplePlatformEnabler sudo kextunload -bundle-id com.apple.driver.ApplePlatformEnabler sudo mv /System/Library/Extensions/ApplePlatformEnabler.kext /System/Library/Extensions/ApplePlatformEnabler.disabled 恢复 sudo mv /System/Library/Extensions/ApplePlatformEnabler.disabled /System/Library/Extensions/ApplePlatformEnabler.kext sudo kextload -bundle-id com.apple.driver.ApplePlatformEnabler Other [snelson aws_starter_sdk (master)]$ sudo kextunload -p -b com.apple.driver.AppleUSBFTDI [snelson aws_starter_sdk (master)]$ sudo kextutil -b com.apple.driver.AppleUSBFTDI -p AppleUSBEFTDI-6010-1 [snelson aws_starter_sdk (master)]$ sudo kextload -b com.apple.driver.AppleUSBFTDI [snelson aws_starter_sdk (master)]$ ls /dev/tty.* System uptime in nanoseconds: 11145782605426 last loaded kext at 2655395433341: com.apple.driver.usb.cdc 5.0.0 (addr 0xffffff7f8f5af000, size 28672) last unloaded kext at 2808914619657: com.apple.driver.usb.cdc 5.0.0 (addr 0xffffff7f8f5af000, size 28672) loaded kexts: com.apple.driver.ApplePlatformEnabler 2.7.0d0 com.apple.driver.AGPM 110.23.14 com.apple.driver.X86PlatformShim 1.0.0 com.apple.driver.AppleOSXWatchdog 1 com.apple.driver.AppleGraphicsDevicePolicy 3.13.79 com.apple.driver.AppleHDA 278.56 com.apple.driver.AppleUpstreamUserClient 3.6.4 com.apple.driver.pmtelemetry 1 com.apple.iokit.IOUserEthernet 1.0.1 com.apple.iokit.IOBluetoothSerialManager 5.0.3f1 System uptime in nanoseconds: 37955192413998 last loaded kext at 35396533846006: com.apple.iokit.IOBluetoothUSBDFU 5.0.3f1 (addr 0xffffff7fa19b6000, size 12288) last unloaded kext at 35867481225897: com.apple.driver.usb.cdc 5.0.0 (addr 0xffffff7fa19af000, size 28672) "},"mac/command.html":{"url":"mac/command.html","title":"命令","keywords":"","body":"命令 查看硬盘使用情况 $ df -H "},"mac/spotlight.html":{"url":"mac/spotlight.html","title":"Spotlight","keywords":"","body":"Spotlight sudo touch /.metadata-never-index 重启 sudo rm /.Spotlight-V100/VolumeConfiguration.plist sudo rm /.metadata-never-index References https://apple.stackexchange.com/questions/254039/spotlight-borked-after-macos-sierra-update "},"mac/Other.html":{"url":"mac/Other.html","title":"Other","keywords":"","body":"Other 在mac中修改主机名 sudo scutil --set HostName servername.example.com BasicIPv6ValidationError $ networksetup -setv6off Ethernet 更新 Numbers 等系统自带但收费的App 如果换了 Apple ID ，从 App Store 的更新界面更新需要之前的 Apple ID 。解决方法： 从 App Store 的已购项目中更新 更新系统时提示 未能验证 mac更新sierra public beta6失败提示“未能验证”解决办法 sudo rm -rf /Library/Updates/​031-89979/ softwareupdate -l​ 进入mac app store点击系统更新​按钮 Finder 显示隐藏文件 defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder "},"mac/apache.html":{"url":"mac/apache.html","title":"apache","keywords":"","body":"apache 启动Apache sudo apachectl start "},"ue/adobe-bridge.html":{"url":"ue/adobe-bridge.html","title":"Adobe bridge","keywords":"","body":"Adobe bridge Help "},"ue/sketch.html":{"url":"ue/sketch.html","title":"Sketch","keywords":"","body":"Sketch 下载地址: https://pan.baidu.com/s/1gfcVysb, 密码: ii3v 打开密码 www.ifunmac.com "},"ue/axure-libraries.html":{"url":"ue/axure-libraries.html","title":"Axure 库","keywords":"","body":"Axure 库 官方库 免费 http://uxtooltime.com/ 最新iOS8Axure部件库下载含iPhone6/iPhone6 Plus/iPad等机身部件库 "},"ue/photoshop-variable.html":{"url":"ue/photoshop-variable.html","title":"Photoshop 加变量","keywords":"","body":"Photoshop 加变量 Prisma Ditto "},"ue/photoshop.html":{"url":"ue/photoshop.html","title":"photoshop","keywords":"","body":"photoshop 安装 https://creative.adobe.com/products/download/photoshop 下载 Creative Cloud 安装 photoshop Mac/Win版：Adobe CC 2017 软件下载（中文/英文版）补丁破解 Adobe Creative Cloud 2017 下载破解补丁 切图 从图层生成图像资源 当下最省心省力优雅大气的切图工具或插件是什么？ "},"ue/icon-resource.html":{"url":"ue/icon-resource.html","title":"图标资源","keywords":"","body":"图标资源 iconfont 优点 免费，可下载 源文件 缺点 资源少 icons8 优点 资源丰富 缺点 源文件收费，免费 freebiesbug "},"ue/axure-team-svn.html":{"url":"ue/axure-team-svn.html","title":"Axure SVN 协作","keywords":"","body":"Axure SVN 协作 参考 CREATING AND USING TEAM PROJECTS 假使 SVN 地址为 svn://server/prd . 工程名为 name 创建 SVN 工程 Team > Create Team Project from Current File... > SVN > Team Directory:svn://server/prd,Team Project Name: name > Create 之后就可以与 SVN 同步。 从 SVN 获取工程 创建 SVN 工程后，其它成员，需要从对应的 SVN 地址获取工程 Team > Get and Open Team Project... > SVN > Team Directory:svn://server/prd/name > Get 注意 Team Directory = svn 地址 + 工程名 之后就可以与 SVN 同步。 "},"ue/zeplin.html":{"url":"ue/zeplin.html","title":"zeplin","keywords":"","body":"zeplin 开启 React Native 插件 选择一个 Project > DashBoard > 点击右上角的 Extensions > 勾上 React Native by Zeplin 开启后，点击元素，可以在右下角看到 RN 格式的样式。 下载图标资源 \b 打开一个页面 > 右侧菜单选择第三个 assets > 可以下载图标资源 "},"ue/Axure.html":{"url":"ue/Axure.html","title":"Axure","keywords":"","body":"Axure 官网 官方下载 安装 注册证书 Help > Manage Licenese > license key: License: axureuser Key: 8wFfIX7a8hHq6yAy6T8zCz5R0NBKeVxo9IKu+kgKh79FL6IyPD6lK7G6+tqEV4LG 学习 原版 中文翻译版 Hot Spot 热区，可以在任何区域加链接。 Dynamic Panel 动态面板 Team svn co Team > Create Team * > 输入 > create "},"ue/tools.html":{"url":"ue/tools.html","title":"工具选择","keywords":"","body":"工具选择 sketch http://www.uisdc.com/designer-mark-for-developer 设计原型图，比ps简单易用 Zeplin sketch插件,可以动态显示字号、颜色、尺寸、间距等参数 Markman 尺寸标工具 Axsure 原型设计 Origami 交互设计工具 基于 Quartz Composer marvelapp 标你妹 http://www.biaonimeia.com/ 根据PSD文件，自动标注 PxCook http://www.fancynode.com.cn/pxcook/home 切图 http://www.cutterman.cn/zh/cutterman End 产品策划（Axure） 和 UI设计（Sketch） Sketch 很好用啊，所以我的做法是 Sketch 画图，然后贴在 Axure 上 "},"weapp/":{"url":"weapp/","title":"微信小程序","keywords":"","body":"微信小程序 微信公众平台 官方文档 微信小程序资源汇总整理 微信小程序开发资源汇总 W3Cschool 微信小程序开发手册 微信小程序开发三宗罪和解决方案 推荐用 labrador-cli 支持 async/await 使用 WebStorm Matchmaker IntelliJ IDEA 插件 Matchmaker Plugin 写 WebStorm 插件 标签 modal 模态弹窗 ES6 语法 官方文档 内核 iOS JavaScriptCore Android X5 开发工具 nwjs(chrome内核） 注意 JavaScriptCore 和 X5 不支持 ES6,所以ES6必须用 babel 转 ES5 后使用。 默认不支持 fetch 和 Promise 使用 CommonJS 模板规范 exports 和 module.exports 的区别 exports就是module.exports的引用 模块化 官方文档 require 引入 ：module.exports 来暴露模块接口 网络请求 wx-fetch 拷贝 node_modules 中用到的文件 gulp-require-modules 遍历依赖的 node_modules 下的文件，并保存到指定的 manifest 文件。manifest 文件拷贝依赖的文件到指定目录 gulp-require-modules-collector 根据 manifest 文件修改对应文件。 flex 布局 小程序支持 flex 布局 Flex 布局教程：语法篇 Flex 布局教程：实例篇 MDN Flex Questions wx.request wx.request 方法只要带上 header 就不会有回调 "},"wex5/":{"url":"wex5/","title":"Wex5","keywords":"","body":"Wex5 Cordova + WeX5如何使用和扩展本地插件 基础库 WeX5前端依赖的两个基础库：数据感知MVVM和jQuery，其中数据感知MVVM基于 Knockoutjs 改进的。 页面框架 WeX5的页面模式支持单页模式（Single-page Application）和多页模式（Multi-page Appliction），默认实现是单页模式。 单页应用模式的三大问题 1、针对id冲突，采用xid技术来解决； 2、针对css冲突，采用css局部化技术来解决； 3、针对js冲突，采用js模块化技术来解决； requireJS AMD规范 由 system/components/justep/window/main.html 生成的 Native/linghang/www/x5/UI2/*****/index.w 和 main.w window.__justep.__ResourceEngine.initContextPath(); requirejs.config({ baseUrl: window.__justep.__ResourceEngine.contextPath + '/v_5569_nol_zh_CNs_d_m/linghangApp', paths: { /* 解决require.normalizeName与require.toUrl嵌套后不一致的bug */ '$model/UI2/v_': window.__justep.__ResourceEngine.contextPath + '/v_5569_nol_zh_CNs_d_m', '$model/UI2': window.__justep.__ResourceEngine.contextPath + '/v_5569_nol_zh_CNs_d_m', '$model': window.__justep.__ResourceEngine.serverPath, 'text': window.__justep.__ResourceEngine.contextPath + '/v_5569_nol_zh_CNs_d_m/system/lib/require/text.2.0.10', 'bind': window.__justep.__ResourceEngine.contextPath + '/v_5569_nol_zh_CNs_d_m/system/lib/bind/bind', 'jquery': window.__justep.__ResourceEngine.contextPath + '/v_5569_nol_zh_CNs_d_m/system/lib/jquery/jquery-1.11.1.min' }, map: { '*': { res: '$model/UI2/system/lib/require/res', cordova: '$model/UI2/system/lib/require/cordova', w: '$model/UI2/system/lib/require/w', css: '$model/UI2/system/lib/require/css' } }, waitSeconds: 300 }); Questions 1 Gradle sync failed: Project with path ':JustepGetContent' could not be found in project ':CordovaLib'. settings.gradle 添加 include \":JustepGetContent\" "},"wex5/ui2.html":{"url":"wex5/ui2.html","title":"UI2","keywords":"","body":"UI2 components system/components目录里包含了UI2自带的所有组件，有bootstrap组件、justep组件和标准html标签。fragment组件称为组合组件，就是对前面这些组件的常用组合形成再形成一个组件，方便使用。 bootstrap justep 标准html标签 fragment "},"android/":{"url":"android/","title":"Android","keywords":"","body":"Android 官网 Android开发者网站 Android开发者网站大陆镜像 android studio 学习 Android 学习路线图 Android官方培训课程中文版 RxJava http://rxjava.yuxingxin.com/index.html .9.png http://isux.tencent.com/android-ui-9-png.html sp： 为了将字体更好的在不同的设备间很好的显示，修改原理跟dp上述基本一样，只是文字基本是矢量的，只要设置尺寸即可，不需要重新制作资源。 Scale-independent Pixels - 一般情况下（不修改系统字体大小），sp和dp是一个值。 如果修改了系统字体大小，sp和dp就不同了。注意要用getResources()获取。 Android 中 Parcelable 接口的使用 对象序列化 http://www.cnblogs.com/liuling/p/2015-10-14-01.html EventBus 发布 / 订阅的事件总线，包含4个成分：发布者，订阅者，事件，总线 GitHub 官方文档 Adapter 适配器，数据和界面绑定 Presenter MVP 的 P。 逻辑层，业务逻辑，用于 请求数据、存储数据、读取数据等等 Data Binding Library Data Binding Library Data Binding 用户指南（Android Network volley install from JCenter compile 'com.android.volley:volley:1.0.0' Context 凡是跟UI相关的，都应该使用Activity做为Context来处理 Android Context 上下文 你必须知道的一切 "},"android/storage.html":{"url":"android/storage.html","title":"存储","keywords":"","body":"存储 Android中关于外部存储的一些重要函数 Android中关于内部存储的一些重要函数 访问外部存储的权限 　　从Android 1.0开始，写操作受权限WRITE_EXTERNAL_STORAGE保护。 　　从Android 4.1开始，读操作受权限READ_EXTERNAL_STORAGE保护。 　　从Android 4.4开始，应用可以管理在它外部存储上的特定包名目录，而不用获取WRITE_EXTERNAL_STORAGE权限。 　　比如，一个包名为com.example.foo的应用，可以自由访问外存上的Android/data/com.example.foo/目录。 "},"android/debug.html":{"url":"android/debug.html","title":"调试","keywords":"","body":"调试 断点 Run > View Breakpoints... 查看所有断点 Java Exception Breakpoints Exception Breakpoints 打印自定义数据 alt+F8 "},"android/gradle-usage.html":{"url":"android/gradle-usage.html","title":"Gradle 使用","keywords":"","body":"Gradle 使用 gradle.properties 关联对象类型: 配置环境变量 Chapter 11. The Build Environment local.properties 存放的是各插件需要的本机相关的信息, 例如 Android gradle 插件可能需要 SDK 路径, NDK 路径, 别的插件需要的可能就是其他配置信息. 存放敏感数据, 例如某些插件需要 用户名, 密码, api_key 等, 与隐私相关的数据. Properties properties = new Properties() properties.load(project.rootProject.file('local.properties').newDataInputStream()) def ndkdir = properties.getProperty('ndk.dir', null) settings.gradle 引入各个 Project 或 Module build.gradle 编译配置 Chapter 23. Dependency Management 统一依赖版本号 参考 Blacklisting a particular version with a replacement configurations.all { resolutionStrategy.eachDependency { DependencyResolveDetails details -> if (details.requested.group == 'org.software' && details.requested.name == 'some-library') { //prefer different version which contains some necessary fixes details.useVersion '1.2.1' } } } gradle 命令 编译不 lint，不测试 ./gradlew build -x lint -x test 刷新依赖 ./gradlew build --refresh-dependencies test Testing in Java & JVM projects ./gradlew test -Dtest.single=MyTestClass -Dtest.debug test with debug ./gradle test --no-daemon -Dorg.gradle.debug=true -Dtest.single=MyTestClass -Dtest.debug ./gradle test --no-daemon -Dorg.gradle.debug=true -Dtest.single=PivotTableImportTest.testGetExcelData -Dtest.debug Reference Gradle脚本基础全攻略 "},"android/oom.html":{"url":"android/oom.html","title":"内存溢出","keywords":"","body":"内存溢出 查看内存 Android Studio 开启 monitor Android Studio > Tools > Android > Enable ADB Integration 查看内存使用情况 Android Studio > Android Monitor > Monitors > Memory Memory 的 Dump java heap 按钮可以导出并查看内存堆栈 解决内存溢出 AndroidManifest.xml 中添加 android:hardwareAccelerated=\"false\" android:largeHeap=\"true\" 参考 https://stackoverflow.com/a/32245018/6283925 References 在Android中解决内存溢出 – OutOfMemoryError Android高效加载大图、多图解决方案，有效避免程序OOM "},"android/touch-event.html":{"url":"android/touch-event.html","title":"触摸事件处理","keywords":"","body":"触摸事件处理 TouchEvent public boolean dispatchTouchEvent(MotionEvent ev) 这个方法用来分发TouchEvent， 返回值：true 时继续接受动作序列中的后续事件，如move、up public boolean onInterceptHoverEvent(MotionEvent ev) 用来拦截事件的，如果返回值为true，表示拦截，事件会传递到自己的onTouchEvent()。否则不拦截。 public boolean onTouchEvent(MotionEvent ev) 的传递层级是由子视图向父视图，通常用作事件处理。如果返回值为true表示消耗该事件。否则无法再接收同一个序列的事件。 同一个序列的事件是：DOWN事件－－》多个MOVE事件－－》UP事件。 References 消息分发知识基础 Android中TouchEvent触摸事件机制 MotionEvent getPointerCount()：返回MotionEvent中表示了多少手指数 getPointerId(int pointerIndex)： 返回指针索引关联的指针ID getX(int pointerIndex)和getY(int pointerIndex)：由这两个函数获得的x,y值是相对的坐标值，相对于消费这个事件的视图的左上点的坐标。 getRawX(int pointerIndex)和getRawY(int pointerIndex):有这两个函数获得的x,y值是绝对坐标，是相对于屏幕的。 getHistorySize():返回某跟手指触摸事件的历史位置的记录数，只有在 ACTION_MOVE 中有效，其它为 0 getHistoricalX (int pointerIndex, int pos)：返回指定指针索引的手指上一次的X坐标位置，只针对移动事件。参数pos是指第几个旧位置，这个值不能超过getHistorySize()返回的值 getHistoricalY (int pointerIndex, int pos)：返回指定指针索引的手指上一次的Y坐标位置，只针对移动事件。参数pos是指第几个旧位置，这个值不能超过getHistorySize()返回的值 动作序列的三个事件 TouchEvent 分三种事件:down、move、up。 move事件的一个操作是由down到up的动作序列 如果Down事件不归你处理，那这个动作序列的move，up也不归你处理 References Android MotionEvent详解 "},"android/sonatype-nexus.html":{"url":"android/sonatype-nexus.html","title":"Sonatype Nexus Repository Manager","keywords":"","body":"Sonatype Nexus Repository Manager 创建本地Maven仓库。使用的时候如果本地库没有就会从远程库找，找到后再更新到本地. 官方文档 安装 https://hub.docker.com/r/sonatype/nexus/ 这里采用 docker 方式安装。docker-nexus 已经包含了 maven 和 jdk，所以只需参考下面的方式安装就可以。 # docker pull sonatype/nexus:latest # docker run -d -p 8081:8081 --name nexus sonatype/nexus:latest 访问 http://localhost:8081 Central 对应 http://jcenter.bintray.com/ 3d party 对应本地thirdparty目录下的 Apache Snapshots 对应 https://repository.apache.org/snapshots/ Releases 对应本地releases目录下的 同步索引 Repositories > Central > Configuration > 修改Download Remote Indexes项的值为True > save 右键点击Central，弹出菜单中点击Repair Index。Repair Index过程可能较慢，等待一会儿，进度可以通过 Administration > Logging > log 查看。 定时更新索引 Administration > Scheduled Tasks > Add 任务类型选择：Update Repositories Index，Repository/Group选择要更新的仓库，Recurrence选择计划任务的周期类型 Reference Maven 使用Nexus创建私服 Nexus私服使Maven更加强大 "},"android/search-path-directory.html":{"url":"android/search-path-directory.html","title":"Android 文件路径","keywords":"","body":"Android 文件路径 应用在被卸载后，这些目录下文件都会被删除 getFilesDir(): /data/data//files 内存上的文件目录 getCacheDir(): /data/data//cache 内存上的缓存目录，空间不足时会被删掉 getExternalFilesDir(String): /storage/sdcard0/Android/data//files/ 外部存储的文件目录，不会扫描到媒体 getExternalCacheDir(): /storage/sdcard0/Android/data//cache/ 外部存储的缓存目录，空间不足时会被删掉，不会扫描到媒体 应用在被卸载后，这些目录下文件不会被删除 Environment.getDataDirectory()：/data （无权限访问） Environment.getDownloadCacheDirectory()：/cache 下载缓存路径，（无权限访问） Environment.getRootDirectory()：/system （无权限访问） Environment.getExternalStorageDirectory()：/storage/sdcard0 外部存储相关操作 Environment.getExternalStorageState(File): 获取外部存储状态 Environment.isExternalStorageEmulated: 设备的外存是否是用内存模拟的 Environment.isExternalStorageRemovable(): 设备的外存是否是可以拆卸的 /** * 判断外部存储是否可用. * * @return boolean */ public static boolean hasSDCardMounted() { String state = Environment.getExternalStorageState(); if (state != null && state.equals(Environment.MEDIA_MOUNTED)) { return true; } else { return false; } } 权限相关 READ_EXTERNAL_STORAGE: 外部存储读权限 WRITE_EXTERNAL_STORAGE: 外部存储写权限 如果设备运行的是 Android 6.0（API 级别 23），并且应用的 targetSdkVersion 是 23 或更高版本。需要动态获取权限 参考 READ_EXTERNAL_STORAGE API >= 19 时，getExternalFilesDir(String) 和 getExternalCacheDir() 不需要开启权限 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 权限 读写 Environment.getExternalStorageDirectory() 时，需要开启 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 权限 外部 App 只能打开 SD 卡上的文件 References https://developer.android.com/reference/android/content/Context.html https://developer.android.com/reference/android/Manifest.permission.html https://developer.android.com/reference/android/os/Environment.html "},"android/gradle.html":{"url":"android/gradle.html","title":"Gradle","keywords":"","body":"Gradle 官网 官方文档 中文文档 Gradle Android插件用户指南翻译 精通 Groovy DSL Android Plugin for Gradle Release Notes Gradle vs Maven Feature Comparison 2.10 版本的官方文档 一个基于JVM的构建工具。基于 groovy，其 build 脚本使用 groovy DSL 编写 Gradle 安装 通过 SDKMAN 安装 gradle Gradle 安装 Gradle Wrapper 通过 Gradle Wrapper 安装 gradle 从本地安装 Gradle 配置 gradle.properties build.gradle repositories JCenter mavenCentral Maven 版本 使用 安装 通过 SDKMAN 安装 gradle Download Gradle $ curl -s https://get.sdkman.io | bash $ sdk install gradle 4.9 Gradle 安装 Gradle Wrapper gradle wrapper --gradle-version 3.4.1 gradle wrapper --gradle-version 2.14.1 或者 配置 build.gradle task wrapper(type: Wrapper) { gradleVersion = '4.9.0' } 然后运行 $ gradle wrapper 之后用 ./gradlew 命令来运行 gradle 通过 Gradle Wrapper 安装 gradle http://stormzhang.com/devtools/2015/01/05/android-studio-tutorial5/ 可以使得项目组成员不必预先安装好gradle 便于统一项目所使用的gradle版本 在 gradle wrapper 配置好的前提下，运行 ./gradlew 安装指定版本的 Gradle 到 ~/.gradle/wrapper/dists/ 从本地安装 Gradle http://stackoverflow.com/questions/27375807/how-to-reuse-gradle-wrapper 下载 gradle-2.10-all.zip 到 {project.dir}\\gradle\\wrapper 目录下 {project.dir}\\gradle\\wrapper\\gradle-wrapper.properties 修改 distributionUrl=gradle-2.10-all.zip ./gradlew 配置 gradle.properties 属性、常量（如版本号） build.gradle 构建脚本 repositories JCenter https://bintray.com/bintray/jcenter mavenCentral http://search.maven.org/ Maven Gradle 修改 Maven 仓库地址 https://docs.gradle.org/current/userguide/init_scripts.html 版本 gradle 插件版本 dependencies { classpath 'com.android.tools.build:gradle:2.2.3' } gradle 版本 /gradle/wrapper/gradle-wrapper.properties 的 distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip 引用 Android Plugin for Gradle Release Notes 版本对应关系 Plugin version Required Gradle version 1.0.0 - 1.1.3 2.2.1 - 2.3 1.2.0 - 1.3.1 2.2.1 - 2.9 1.5.0 2.2.1 - 2.13 2.0.0 - 2.1.2 2.10 - 2.13 2.1.3 - 2.2.3 2.14.1+ 2.3.0+ 3.3+ 使用 先保证工程根目录下有 local.properties gradle tasks 列出所有任务 "},"android/code-style.html":{"url":"android/code-style.html","title":"编码规范","keywords":"","body":"编码规范 android code style Google Java Style Guide 翻译 project_and_code_guidelines java-code-styles java-code-styles 下载 Android Studio 代码格式化配置文件。 install.sh Android Studio > Preferences > Editor > Code Style > Scheme > SquareAndroid "},"android/AndroidManifest.xml.html":{"url":"android/AndroidManifest.xml.html","title":"AndroidManifest.xml","keywords":"","body":"AndroidManifest.xml 应用清单文件 官方文档 "},"android/view.html":{"url":"android/view.html","title":"View","keywords":"","body":"View 说明 Android的UI界面都是由View和ViewGroup及其派生类组合而成的。其中，View是所有UI组件的基类，而ViewGroup是容纳这些组件的容器，其本身也是从View派生出来的。 ViewGroup 可以包含作为叶子节点的 View，View 的子类 View 不能有子 View Layout 是 ViewGroup 的子类，用来控制视图布局 小部件（Widget）是微型的应用程序视图，它可以被嵌入到其它应用程序中（比如桌面）并接收周期性的更新。你可以通过一个App Widget Provider来发布一个Widget。 组件 List View ListView 是一个显示一列可滚动项目的视图组。 系统使用 Adapter 自动将列表项目插入列表，适配器从来源（例如数组或数据库查询）提取内容，并将每个项目结果转换为视图放置到列表中。 Grid View 网格视图，它按照行列的方式来显示内容的。常用于九宫格内容显示。 Selector selector就是状态列表（StateList）， 它分为两种，一种Color-Selector 和Drawable-Selector。 selector中文的意思选择器，在Android中常常用来作组件的背景，这样做的好处是省去了用代码控制实现组件在不同状态下不同的背景颜色或图片的变换。使用十分方便。 Drawable-Selector Color-Selector ViewPager 用于滑动切换视图。对应适配器 PagerAdapter Using ViewPager for Screen Slides "},"android/android-studio-javadoc.html":{"url":"android/android-studio-javadoc.html","title":"Android studio 使用 JavaDoc","keywords":"","body":"Android studio 使用 JavaDoc 安装 JavaDoc 插件 Preference > Plugins > Browse repositories > 搜索 javadoc > Install 写注释 The Java API Documentation Generator Javadoc Tool How to Write Doc Comments for the Javadoc Tool tag @author (classes and interfaces only, required) @version (classes and interfaces only, required. See footnote 1) @param (methods and constructors only) @return (methods only) @exception (@throws is a synonym added in Javadoc 1.2) @see @since @serial (or @serialField or @serialData) @deprecated (see How and When To Deprecate APIs) 使用 JavaDoc 插件 Preference > Keymap > Plug-ins > JavaDoc 查看 javadoc 快捷键 对一个元素注释：把鼠标移动到元素中，然后 shift + alt + G 或者 shift + option + G。 对所有方法元素注释：shift + alt ctrl + + G 或者 shift + option + control + G 撤销当前/选择：shift + alt + Z 或者 shift + option + Z 撤销所有注释：shift + alt + ctrl + Z 或者 shift + option + control + G 生成 JavaDoc 文档 Tools > Generate JavaDoc Output directory 输出文档目录 Other Command line arguments: 设为 -encoding utf-8 -charset utf-8 Reference Android studio JavaDoc的使用 "},"android/fresco.html":{"url":"android/fresco.html","title":"Fresco","keywords":"","body":"Fresco GitHub 中文文档 Fresco 说明 Config ImagePipelineConfig Downsample DiskCacheConfig DraweeConfig 使用 RN 中使用 Fresco.initialize() 方法一 方法二 ResizeOptions 分析 ImagePipeline 说明 ImageRequest 负责图片下载处理 image pipeline 负责完成图像加载 Drawees 负责图片显示 Config DraweeConfig draweeConfig = DraweeConfig.newBuilder() .build(); DiskCacheConfig diskCacheConfig = DiskCacheConfig.newBuilder(context) .setMaxCacheSize(100 * ByteConstants.MB) .build(); ImagePipelineConfig imagePipelineConfig = ImagePipelineConfig.newBuilder(context) .setDownsampleEnabled(true) .setMainDiskCacheConfig(diskCacheConfig) .build(); Fresco.initialize(context, imagePipelineConfig, draweeConfig); ImagePipelineConfig 图片下载修改配置 Downsample 默认 resize 不支持 jpeg 以外的格式，开启向下采样可以使 resize 支持 jpeg 以外的格式: ImagePipelineConfig config = ImagePipelineConfig.newBuilder(context) .setDownsampleEnabled(true) .build(); Fresco.initialize(context, config); 代码实现 DiskCacheConfig 磁盘缓存配置 // 普通的最大磁盘缓存 private long mMaxCacheSize = 40 * ByteConstants.MB; // 小磁盘的最大磁盘缓存 private long mMaxCacheSizeOnLowDiskSpace = 10 * ByteConstants.MB; // 极小磁盘的最大磁盘缓存 private long mMaxCacheSizeOnVeryLowDiskSpace = 2 * ByteConstants.MB; 默认最大缓存为 40 MB DraweeConfig 显示配置 使用 RN 中使用 Fresco.initialize() 在 RN 中，FrescoModule 初始化时调用 Fresco.initialize()，会替换掉 MainApplication 中 Fresco.initialize() 的配置。所以需要特殊处理。 方法一 MainPackageConfig.setFrescoConfig() 设置 ImagePipelineConfig, MainApplication.getPackages 返回 new MainReactPackage(mainPackageConfig) Example: @Override protected List getPackages() { return Arrays.asList( new MainReactPackage(getMainPackageConfig()), ); } private MainPackageConfig getMainPackageConfig() { ImagePipelineConfig imagePipelineConfig; return new MainPackageConfig.Builder().setFrescoConfig(imagePipelineConfig).build(); } 这种方式无法直接使用 FrescoModule.getDefaultConfigBuilder()，因为没有 ReactContext。 方法二 创建个原生模块，添加如下的 initializeFresco 方法。然后在 JS 代码中调用 initializeFresco。替换 FrescoModule 中的配置 @ReactMethod private void initializeFresco() { ReactApplicationContext context = getReactApplicationContext(); ImagePipelineConfig.Builder builder = FrescoModule.getDefaultConfigBuilder(context); DiskCacheConfig diskCacheConfig = DiskCacheConfig.newBuilder(context) .setMaxCacheSize(1000 * ByteConstants.MB) .setMaxCacheSizeOnLowDiskSpace(800 * ByteConstants.MB) .setMaxCacheSizeOnVeryLowDiskSpace(500 * ByteConstants.MB) .build(); ImagePipelineConfig imagePipelineConfig = builder.setDownsampleEnabled(true) .setMainDiskCacheConfig(diskCacheConfig) .build(); Fresco.initialize(context, imagePipelineConfig); } ResizeOptions 参考 缩放和旋转图片 ResizeOptions.java 的默认最大图片大小 maxBitmapSize = MAX_BITMAP_SIZE = 2048f。RN 使用了默认值，且不可配，所以如果开启了 resize，也就是 resizeMethod: 'resize' 时，图片会被压缩到 2M 以下。 分析 ImagePipeline 是 Fresco 读取数据的整个调度系统 检查内存缓存 检查磁盘缓存 文件读取或网络请求，并存储到各个缓存。 流程 // 读取硬盘缓存 BufferedDiskCache.readFromDiskCache() "},"android/adb.html":{"url":"android/adb.html","title":"adb 命令","keywords":"","body":"adb 命令 安装 apk # 查看设备列表 adb devices # 安装 apk adb install shell # 获取 root 权限，否则 adb shell 后运行任何命令提示 “Permission denied” adb root # 查看设备列表 adb devices # 进入设备 shell adb -s emulator-5554 shell logcat 传输文件 获取文件 adb pull 上传文件 adb push Android File Transfer 图形界面上传获取文件 "},"android/image.html":{"url":"android/image.html","title":"图片相关","keywords":"","body":"图片相关 最大能显示的图片 size 参考 https://stackoverflow.com/a/26823209/6283925，由于 OpenGL 限制，所以最大能显示的图片 size 可以由下面的方法计算出 public static int getMaxTextureSize() { // Safe minimum default size final int IMAGE_MAX_BITMAP_DIMENSION = 2048; // Get EGL Display EGL10 egl = (EGL10) EGLContext.getEGL(); EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY); // Initialise int[] version = new int[2]; egl.eglInitialize(display, version); // Query total number of configurations int[] totalConfigurations = new int[1]; egl.eglGetConfigs(display, null, 0, totalConfigurations); // Query actual list configurations EGLConfig[] configurationsList = new EGLConfig[totalConfigurations[0]]; egl.eglGetConfigs(display, configurationsList, totalConfigurations[0], totalConfigurations); int[] textureSize = new int[1]; int maximumTextureSize = 0; // Iterate through all the configurations to located the maximum texture size for (int i = 0; i Resize // Calculate inSampleSize options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight); // Decode bitmap with inSampleSize set options.inJustDecodeBounds = false; BitmapFactory.decodeResource(res, resId, options); inSampleSize 参考 https://stackoverflow.com/a/17074670/5266652 和 fresco DownsampleUtil.determineSampleSize JPG 的 inSampleSize 必须是 2 的阶乘，PNG 整数就行。 但是碰到有的 PNG 图片不用 2 的阶乘就闪退。 References Loading Large Bitmaps Efficiently Android之图片压缩 maxBitmapSize BitmapRegionDecoder 只取图片指定区域的图片 "},"android/lint.html":{"url":"android/lint.html","title":"Android Lint","keywords":"","body":"Android Lint Android 静态代码分析工具, 代码质量检测 Improve Your Code with Lint lint.xml lint 规则 Android Studio 配置 lint Android Studio > Preferences > Editor > Inspections lint Analyze > Inspect Code CLI ~/Library/Android/sdk/tools/bin/lint 是 Android 自带的 lint 工具。 "},"android/android-clean.html":{"url":"android/android-clean.html","title":"清理磁盘 - Android","keywords":"","body":"清理磁盘 - Android 删除无用镜像 ls ~/Library/Android/sdk/system-images "},"android/pull-to-refresh.html":{"url":"android/pull-to-refresh.html","title":"下拉刷新","keywords":"","body":"下拉刷新 SwipeRefreshLayout "},"android/action-mode.html":{"url":"android/action-mode.html","title":"ActionMode","keywords":"","body":"ActionMode "},"android/hot-fix.html":{"url":"android/hot-fix.html","title":"热更新","keywords":"","body":"热更新 Dalvik VS ART Dalvik 运行dex文件，自Android 2.2开始，Dalvik支持JIT（just-in-time，即时编译技术）。 ART 即Android Runtime ART 5.0 之后开始支持， 的机制与 Dalvik 不同。在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（just in time ，JIT）转换为机器码，这会拖慢应用的运行效率，而在ART 环境中，应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用。这个过程叫做预编译（AOT,Ahead-Of-Time）。这样的话，应用的启动(首次)和执行都会变得更加快速。 ART 缺点： 1.机器码占用的存储空间更大 2.应用的安装时间会变长。 android dex 分包方案 manifest 中比较找出有修改的 .class 生成 .class 文件 javac dynamic.java 制作 jar 包 cd ~/gitlab/bell/wanfantian/app/build/intermediates/classes/home/debug jar cvf dynamic.jar -C ./com/deyi/wanfantian/untils/AppWebViewJavaScript*.class jar 包转换成 Dalvik byte code dx 工具目录 /build-tools//dx /Users/Bell/Library/Android/sdk/build-tools/23.0.2/dx --dex --output=dex.jar dynamic.jar 打补丁 一个ClassLoader可以包含多个dex文件，每个dex文件是一个Element，多个dex文件排列成一个有序的数组dexElements，当找类的时候，会按顺序遍历dex文件，然后从当前遍历的dex文件中找类，如果找类则返回，如果找不到从下一个dex文件继续查找。 理论上，如果在不同的dex中有相同的类存在，那么会优先选择排在前面的dex文件的类 ，所以，把有问题的类打包到一个dex（patch.dex）中去，然后把这个dex插入到Elements的最前面 就可以实现打补丁功能。 Android的类加载机制： Android的类加载器分为两种,PathClassLoader和DexClassLoader，两者都继承自BaseDexClassLoader PathClassLoader 用来加载系统类和应用类 DexClassLoader 用来加载jar、apk、dex文件.加载jar、apk也是最终抽取里面的Dex文件进行加载. LexClassLoader 阿里的 if(hasLexClassLoader()) { injectInAliyunOs(context, patchDexFile); } else if(hasDexClassLoader()) { injectAboveEqualApiLevel14(context, patchDexFile); } else { injectBelowApiLevel14(context, patchDexFile); } 如果支持 dalvik.system.LexClassLoader（阿里自己的ClassLoader，补丁后缀 .lex） 则用 LexClassLoader 方式打包， 如果支持 dalvik.system.BaseDexClassLoader （API 大于等于 14 ） 则用 BaseDexClassLoader 方式打包 API 小于 14 框架选择 参考 Android 热修复方案对比 基于 Xposed 实现的无侵入的运行时 AOP (Aspect-oriented Programming) 框架，可以实现在线修复 Bug，修复粒度方法级别，但是由于对 ART 虚拟机不支持，导致其对 Android 5.0、6.0 均不支持，使用局限性太大。目前基于这一原理实现的解决方案是手淘团队开源的 Dexposed 项目。 问题 Conversion to Dalvik format failed:Unable to execute dex: method ID not in [0, 0xffff]: 65536 A： 参考 配置方法数超过 64K 的应用 Dalvik Executable 规范将可在单个 DEX 文件内可引用的方法总数限制在 65,536，其中包括 Android 框架方法、库方法以及您自己代码中的方法。 Android 5.0（API 级别 21）之前的平台版本使用 Dalvik 运行时来执行应用代码。默认情况下，Dalvik 限制应用的每个 APK 只能使用单个 classes.dex 字节码文件。要想绕过这一限制，您可以使用 Dalvik 可执行文件分包支持库，它会成为您的应用主要 DEX 文件的一部分，然后管理对其他 DEX 文件及其所包含代码的访问。 方法数超过 65536，编译的时候不再是单纯编译到一个 Dex 文件中去，而是切分成多个 Dex 文件。 Reference Tinker 推荐 Nuwa Android dex,作者好久都没维护了 RocooFix Android dex AndFix 替换方法，无法添加类和字段 dexposed 替换方法，无法添加类和字段 Android dex分包方案 http://www.cnblogs.com/over140/archive/2011/11/23/2259367.html Android Patch 方案与持续交付 各大热补丁方案分析和比较 安卓App热补丁动态修复技术介绍 Android热修复学习之旅——HotFix完全解析 Android 热修复其实很简单 "},"android/jcenter.html":{"url":"android/jcenter.html","title":"JCenter","keywords":"","body":"JCenter JCenter 和 Maven Central 一样是标准的Android library文件服务器。由于 JCenter 相比 Maven Central 有很多优势，Android Stdio 已经把默认的库换成了 JCenter. 官网 镜像 "},"android/app-links.html":{"url":"android/app-links.html","title":"App Links","keywords":"","body":"App Links 通过 URL 打开 App Create Deep Links to App Content Declare website associations keytool -list -v -keystore my-release-key.keystore 取 sha256 assetlinks.json [{ \"relation\": [\"delegate_permission/common.handle_all_urls\"], \"target\": { \"namespace\": \"android_app\", \"package_name\": \"com.example\", \"sha256_cert_fingerprints\": [\"14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\"] } }] 传到 References Handling Android App Links "},"android/signature.html":{"url":"android/signature.html","title":"给apk签名","keywords":"","body":"给apk签名 证书 生成证书 keytool -genkey -alias android -keypass 123456 -keyalg RSA -keysize 1024 -validity 3650 -keystore test.keystore -storepass 123456 -dname \"CN=Debugger, OU=X5, O=X5, L=BJ, ST=BJ, C=CN\" 参数解释: -genkey 产生证书文件 -keyalg 指定密钥的算法,这里指定为RSA(非对称密钥算法) -alias 产生别名 -keypass 123456 证书密钥，这里用123445，此处指定的值需要和 build.properties 文件中的 androidKeyAliasPassword 对应 -storepass 123456 证书存储密钥，这里用123445，此处指定的值需要和 build.properties 文件中的 androidKeyStorePassword 对应 -validity 3650 证书有效期，单位是天 CN=Debugger 名字与姓氏 OU=X5 组织单位名称 O=X5 组织名称 L=BJ 城市或区域名称 ST=BJ 省/市/自治区名称 C=CN 双字母国家/地区代码 查看信息 keytool -list -keystore test.keystore 签名 jarsigner -verbose -keystore test.keystore -signedjar -signed.apk unsigned.apk 'test.keystore' 参数说明: -verbose：指定生成详细输出 -keystore：指定数字证书存储路径 -signedjar：该选项的三个参数为 签名后的apk包 未签名的apk包 数字证书别名(注意顺序) build.gradle storePassword 证书存储密钥 keyPassword 证书密钥 keyAlias 证书别名 storeFile 证书文件名 References Android给apk签名那点事 "},"android/android-library.html":{"url":"android/android-library.html","title":"Android library","keywords":"","body":"Android library Reference http://stackoverflow.com/a/30295816/5541472 "},"android/maven.html":{"url":"android/maven.html","title":"maven","keywords":"","body":"maven maven可以管理你的依赖包 打包成apklib,管理自己的组件库 动态配置你的发布渠道(此点非常方便) 签名，打包，混淆一条龙服务. 官网 下载 https://maven.apache.org/download.cgi 安装 https://maven.apache.org/install.html docker https://hub.docker.com/r/sonatype/nexus/ 私有 maven 库 docker-maven docker-maven GitHub "},"android/full-screen.html":{"url":"android/full-screen.html","title":"全面屏","keywords":"","body":"全面屏 1.声明 Maximum Aspect Ratio Android 标准接口中，支持应用声明其支持的最大屏幕高宽比（maximum aspect ratio）。具体声明如下，其中的 ratio_float 被定义为是高除以宽，以 16:9 为例，ratio_float = 16/9 = 1.778 (18.5:9则为2.056)。 若开发者没有声明该属性，ratio_float 的默认值为1.86 References 支持多种屏幕 小米文档中心-全面屏及虚拟键适配说明 "},"android/deploy.html":{"url":"android/deploy.html","title":"发包","keywords":"","body":"发包 签名 混淆 代码混淆通常将代码中的各种元素（变量、函数、类名等）改为无意义的名字，使得阅读的人无法通过名称猜测其用途，增大反编译者的理解难度。 虽然代码混淆可以提高反编译的门槛，但是对开发者本身也增大了调试除错的难度。开发人员通常需要保留原始未混淆代码用于调试。 加固 加固之后就啥也看不见了，常用的三方加固工具有360加固。 加固前不需要特意混淆，直接提交安装包进行加固即可。 加固是多维度的安全防护方案，包括反破解、反逆向、防篡改等，可以防止应用被各类常见破解工具逆向，安全性要远大于单纯的代码混淆。 反编译 工具 360加固保 References Android APP 防破解进化史 加固和混淆 "},"android/distribute-library.html":{"url":"android/distribute-library.html","title":"发布 Android 库","keywords":"","body":"发布 Android 库 发布到 jCenter 和 Maven jar or aar .jar：只包含了class文件与清单文件，不包含资源文件，如图片等所有res中的文件。 .aar：包含所有资源，class以及res资源文件全部包含 如果你只是一个简单的类库那么使用生成的.jar文件即可；如果你的是一个UI库，包含一些自己写的控件布局文件以及字体等资源文件那么就只能使用.aar文件。 Javadoc javadoc task jar task 发布到 jCenter bintray 注册账号 > 创建 repo > SET ME UP! > Deploying with Gradle > Uploading > Deploying with Gradle gradle-bintray-plugin gradle-bintray-plugin-examples 发布到 MavenCentral Maven Central requirements Maven Central Producers [Deploying to OSSRH with Gradle](http://central.sonatype.org/pages/gradle.html Sonatype OSSRH Sonatype's Open Source Software Repository Hosting Sonatype OSSRH使用Nexus 为开源项目提供仓库管理服务，该仓库就是所谓maven的中央仓库，OSSRH允许我们向Maven中央仓库提交二进制文件。 提交(deploy)开发版本的二进制文件（snapshorts) 阶段性的发布版本 发布一个release,然后同步他们到中央仓库。 申请权限 sonatype 注册账号 sonatype 创建 Project 为 Community Support - Open Source Project Repository Hosting 的 issue， 状态变更为 RESOLVED 才可以提交包 GPG 签名 GnuPG Download 下载 signing Working with PGP Signatures 生成密钥 gpg --gen-key 查看公钥 gpg --list-keys ,pub 2048R/ 后 8 们为 signing.keyId 查看私钥 gpg --list-secret-keys ,signing.secretKeyRingFile的值取私钥路径 上传公钥 gpg --keyserver hkp://pool.sks-keyservers.net --send-keys 上传的公钥用来验证发布时的文件 输出公钥 gpg -a --export your-email@your-mailbox.com > public_key_sender.asc 输出私钥 gpg -a --export-secret-key your-email@your-mailbox.com > private_key_sender.asc build.gradle 参考 http://central.sonatype.org/pages/gradle.html 发布 gradle uploadArchives 发布成功后参考 release 从 stagingRepositories 可以找到上传的包，勾选 > Close > Release 发布到 Maven Central Repository Questions Could not upload to 'https://*****.pom': HTTP/1.1 400 Bad Request [message:Unable to upload files: Maven group, artifact or version defined in the pom file do not match the file path '**.pom'] 这个问题一般都是你的module的名字和你在project.properties 配置的artifactId不一致导致的，手动配置 artifactId 解决 version = PROJ_VERSION group = PROJ_GROUP archivesBaseName = PROJ_NAME Reference How to distribute your own Android library through jCenter and Maven Central from Android Studio 如何使用Android Studio把自己的Android library分享到jCenter和Maven Central 拥抱 Android Studio 之四：Maven 仓库使用与私有仓库搭建 向maven中央仓库提交jar "},"android/emulator.html":{"url":"android/emulator.html","title":"Emulator","keywords":"","body":"Emulator 安装 HAXM 在MAC OS X上使用HAXM加速ANDROID EMULATOR Intel® Hardware Accelerated Execution Manager Installation Instructions for Intel® Hardware Accelerated Execution Manager - Mac OS X* Android Studio > Android SDK Manager > Extras > HAXM installer install 在 /extras/intel/Hardware_Accelerated_Execution_Manager/ 目录下运行 sudo ./silent_install.sh 安装 kextstat | grep intel 检查是否安装好 Stop: sudo kextunload -bundle-id com.intel.kext.intelhaxm Start: for Mac OS X 10.9, 10.10, 10.11, and 10.12: sudo kextload -bundle-id com.intel.kext.intelhaxm for Mac OS X 10.8: sudo kextload /Library/Extensions/intelhaxm.kext/ 系统崩溃 BSD process name corresponding to current thread: SpringBoard Mac OS version: 16C67 Kernel version: Darwin Kernel Version 16.3.0: Thu Nov 17 20:23:58 PST 2016; root:xnu-3789.31.2~1/RELEASE_X86_64 Kernel UUID: 8DF81F81-019F-348E-B47E-40A4484B9E21 Kernel slide: 0x0000000014e00000 Kernel text base: 0xffffff8015000000 __HIB text base: 0xffffff8014f00000 System model name: MacBookPro11,4 (Mac-06F11FD93F0323C5) System uptime in nanoseconds: 51166371527 last loaded kext at 4614784064: com.intel.kext.intelhaxm 6.0.1 (addr 0xffffff7f97ffd000, size 126976) loaded kexts: com.intel.kext.intelhaxm 6.0.1 com.apple.driver.AudioAUUC 1.70 com.apple.driver.AGPM 110.23.14 com.apple.driver.ApplePlatformEnabler 2.7.0d0 com.apple.driver.X86PlatformShim 1.0.0 com.apple.filesystems.autofs 3.0 "},"android/request-permission-at-run-time.html":{"url":"android/request-permission-at-run-time.html","title":"在运行时请求权限","keywords":"","body":"在运行时请求权限 ContextCompat.checkSelfPermission() 检查是否有权限 shouldShowRequestPermissionRationale() 是否需要解释为什么需要该权限。 如果应用之前请求过此权限但用户拒绝了请求，此方法将返回 true。如果用户在过去拒绝了权限请求，并在权限请求系统对话框中选择了 Don't ask again 选项，此方法将返回 false。如果设备规范禁止应用具有该权限，此方法也会返回 false。 requestPermissions() 请求权限 onRequestPermissionsResult() 请求权限的回调 // Here, thisActivity is the current activity if (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) { // Should we show an explanation? if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity, Manifest.permission.READ_CONTACTS)) { // Show an expanation to the user *asynchronously* -- don't block // this thread waiting for the user's response! After the user // sees the explanation, try again to request the permission. } else { // No explanation needed, we can request the permission. ActivityCompat.requestPermissions(thisActivity, new String[]{Manifest.permission.READ_CONTACTS}, MY_PERMISSIONS_REQUEST_READ_CONTACTS); // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an // app-defined int constant. The callback method gets the // result of the request. } } @Override public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) { switch (requestCode) { case MY_PERMISSIONS_REQUEST_READ_CONTACTS: { // If request is cancelled, the result arrays are empty. if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { // permission was granted, yay! Do the // contacts-related task you need to do. } else { // permission denied, boo! Disable the // functionality that depends on this permission. } return; } // other 'case' lines to check for other // permissions this app might request } } References 在运行时请求权限 正常权限和危险权限 "},"android/interview.html":{"url":"android/interview.html","title":"面试","keywords":"","body":"面试 面试 面试资料 Java 相关 public,private,protected,private 的区别 Java 内存管理机制 == 与 equals 的区别 final,finally,finalize的区别 面向对象设计的头 5 大原则 面向对象的三个基本特征 如何原地交换两个变量的值？ Overload 和 Override 的区别 反射 Android 相关 四大基本组件 Service 根据启动方式分为两类 按服务性质分 按实现方法分类 按前后台分 IntentService 布局方式 视图 Activity、Window、View三者的差别，fragment的特点？ Handler、Thread、Looper、HandlerThread HandlerThread、 AsyncTask、 EventBus EventBus Jpg 和 Png Switch能否用string做参数？ 多线程 Android 事件分发机制原理 Android 绘图机制原理 WindowManager 进程间传输方式 Activity与Fragment的生命周期 Activity缓存方法 动画有哪两类，各有什么特点？三种动画的区别 Android的数据存储形式。 你用过什么框架，是否看过源码，是否知道底层原理。 Retrofit EventBus Android-Universal-Image-Loader 图片框架 打补丁框架 Android 高版本 API 方法在低版本系统上的兼容性处理 Service 种类 下拉刷新，上拉获取更多 怎么实现 嵌套滑动 SurfaceView MVC MVP MVVM Binder机制 JSON 序列化 打包，固化 面试资料 Android面试题整理 LearningNotes 面试心得与总结---BAT、网易、蘑菇街 面试时，问哪些问题能试出一个 Android 应用开发者真正的水平？ Java水平 基本上就是 Effective Java 那本书里提到的东西，如果你背完那本书里的问题，并且对答如流，没问题，就要你这样的。其实也会考察关于final用法，反射原理，注解原理，java编译过程，GC等一些常见问题。 Android经验 比如Activity、View、Window的理解，各LaunchMode的使用场景，View的绘制流程，Touch事件机制，Android动画的原理，Handler, Looper的理解，Android跨进程通讯的方式，Binder的理解，Android Mashup设计的理解等等。 AsyncTask Java 相关 public,private,protected,private 的区别 public 公共修饰符，表示任意类都可以访问。 protected 为受保护的修饰符，表示同类、同包以及子类可以访问。 default 或者不写表示默认修饰符，或者称为package修饰符，该修饰符表示只有同类或同包下的类可以访问，出了这个包就不能访问了。 private 为私有修饰符，表示只有同类中可以访问，出了这个类就不能访问了。 Java 内存管理机制 java 的内存泄露 自动垃圾回收机制（GC） 强引用、软引用、弱引用和虚引用 == 与 equals 的区别 ==比较两个对象在内存里是不是同一个对象，就是说在内存里的存储位置一致。两个String对象存储的值是一样的，但有可能在内存里存储在不同的地方 . final,finally,finalize的区别 final: 常量声明。 finally: 处理异常。 finalize: Object类的方法，帮助进行垃圾回收。 面向对象设计的头 5 大原则 参考 S.O.L.I.D：面向对象设计的头 5 大原则 S – 单一职责原则 O – 开放封闭原则 L – 里氏替换原则 I – 接口隔离原则 D – 依赖倒置原则 面向对象的三个基本特征 封装：把客观事物封装成抽象的类 继承：使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展 多态：覆盖，重载 覆盖：是指子类重新定义父类的虚函数的做法。 重载：是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。 如何原地交换两个变量的值？ a=a+b; b=a-b; a=a-b; 或 a = a ^ b; b = a ^ b; a = a ^ b; Overload 和 Override 的区别 重载 (Overload) 表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数、类型或顺序不同）。 重写 (Override) 表示子类中的方法可以与父类中的某个方法的名称 和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那 个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。 反射 通过反射API可以获取程序在运行时刻的内部结构 Java 动态代理：可以在运行期动态的创建接口的实现。 Java 反射机制 深入浅出反射 Android 相关 四大基本组件 Activity BroadcastReceive 广播接收器 Service 服务 Content Provider 内容提供者 4大基本组件都需要注册才能使用 Service 默认在主线程 可配置 android:process 新开进程 可创建子线程 根据启动方式分为两类 Started 启动后不关闭,开启新进程 Bound 绑定的所有任务结束后关闭，原进程 按服务性质分 Local Service 用于应用程序内部 Remote Service　用于android系统内部的应用程序之间 按实现方法分类 Java Service Native Service 用c和c++，实现的系统级的服务我们可以把它当成在library内层。 按前后台分 普通Service 会一直有一个正在运行的图标在系统的状态栏显示 前台Service IntentService IntentService是Service的子类，比普通的Service增加了额外的功能。先看Service本身存在两个问题： Service不会专门启动一条单独的进程，Service与它所在应用位于同一个进程中； Service也不是专门一条新线程，因此不应该在Service中直接处理耗时的任务； IntentService特征 会创建独立的worker线程来处理所有的Intent请求； 会创建独立的worker线程来处理onHandleIntent()方法实现的代码，无需处理多线程问题； 所有请求处理完成后，IntentService会自动停止，无需调用stopSelf()方法停止Service； 为Service的onBind()提供默认实现，返回null； 为Service的onStartCommand提供默认实现，将请求Intent添加到队列中； 布局方式 LinearLayout 线性布局 Relative Layout 相对而局 AbsoluteLayou 绝对布局 TableLayout 表格布局 FrameLayout 框架布局，所有界面从最左上开始 DrawerLayout 侧滑菜单，属于Support Library包 视图 ViewGroup 的子 View ListView 列表视图 GridView 网格视图 Recycler View 谷歌V7包下新增的控件,用来替代ListView的使用，只管回收与复用View，其他的你可以自己去设置。 NavigationView Android5.0之后，侧拉菜单滑出来的那一部分 ViewDragHelper v4的支持包中提供，用来开发自定义ViewGroup，定义了一组有用的操作和状态追踪， Activity、Window、View三者的差别，fragment的特点？ Activity像一个工匠（控制单元），Window像窗户（承载模型），View像窗花（显示视图） LayoutInflater像剪刀，Xml配置像窗花图纸。在Activity中调用attach，创建了一个Window Handler、Thread、Looper、HandlerThread 参考 Android中Thread、Handler、Looper、MessageQueue的原理分析 android.os.Handler可以通过Looper对象实例化，并运行于另外的线程中，Android提供了让Handler运行于其它线程的线程实现，也是就HandlerThread。HandlerThread对象start后可以获得其Looper对象，并且使用这个Looper对象实例Handler。 一个Looper类似一个消息泵。它本身是一个死循环，不断地从MessageQueue中提取Message或者Runnable。而Handler可以看做是一个Looper的暴露接口，向外部暴露一些事件，并暴露sendMessage()和post()函数。 HandlerThread、 AsyncTask、 EventBus HandlerThread继承自Thread，就是Thread加上一个Looper AsyncTask是谷歌对Thread和Handler的进一步封装，完全隐藏起了这两个概念，而用doInBackground(Params... params)取而代之。但需要注意的是AsyncTask的效率不是很高而且资源代价也比较重，只有当进行一些小型操作时为了方便起见使用。 由于AsyncTask会持续地运行下去（即使启动它们的Activity/Fragment已经被销毁了）。这样，一旦你在onPostExecute方法中试图对UI进行更新，那么最终将导致抛出一个IllegalStateException异常。 使用EventBus不仅使代码变得清晰，而且增强了类型安全（type-safe） EventBus // 注册 EventBus.getDefault().register(this); // 注销 EventBus.getDefault().unregister(this); // 发送事件 EventBus.getDefault().post() onEvent(T event)：运行在和被发送事件相同的线程中。 onEventMainThread(T event)：运行在主（UI）线程中，不管事件从哪个线程中被发送过来。 onEventBackgroundThread(T event)：如果发送事件的线程不是UI线程，则运行在该线程中。如果发送事件的是UI线程，则它运行在由EventBus维护的一个单独的线程中。多个事件会同步地被这个单独的后台线程所处理。 onEventAsync(T event)：运行在单独的线程中，即非UI线程，也非发送事件的线程。 Jpg 和 Png alpha 你是否真的需要？如果需要 alpha 通道，那么没有别的选择，用 png。 你的图色值丰富还是单调？就像刚才提到的，如果色值丰富，那么用jpg，如果作为按钮的背景，请用 png。 对安装包大小的要求是否非常严格？如果你的 app 资源很少，安装包大小问题不是很凸显，看情况选择 jpg 或者 png（不过，我想现在对资源文件没有苛求的应用会很少吧。。） 目标用户的 cpu 是否强劲？jpg 的图像压缩算法比 png 耗时。这方面还是要酌情选择，前几年做了一段时间 Cocos2dx，由于资源非常多，项目组要求统一使用 png，可能就是出于这方面的考虑。 Switch能否用string做参数？ java 7 支持，string hashCode() 后实现的 多线程 Android 事件分发机制原理 Android 绘图机制原理 WindowManager 进程间传输方式 Activity与Fragment的生命周期 Activity缓存方法 动画有哪两类，各有什么特点？三种动画的区别 tween 补间动画。通过指定View的初末状态和变化时间、方式，对View的内容完成一系列的图形变换来实现动画效果。 Alpha Scale Translate Rotate。 frame 帧动画 AnimationDrawable 控制 animation-list xml布局 PropertyAnimation 属性动画 Android的数据存储形式。 SQLite：SQLite是一个轻量级的数据库，支持基本的SQL语法，是常被采用的一种数据存储方式。 Android为此数据库提供了一个名为SQLiteDatabase的类，封装了一些操作数据库的api SharedPreference： 除SQLite数据库外，另一种常用的数据存储方式，其本质就是一个xml文件，常用于存储较简单的参数设置。 File： 即常说的文件（I/O）存储方法，常用语存储大数量的数据，但是缺点是更新数据将是一件困难的事情。 ContentProvider: Android系统中能实现所有应用程序共享的一种数据存储方式，由于数据通常在各应用间的是互相私密的，所以此存储方式较少使用，但是其又是必不可少的一种存储方式。例如音频，视频，图片和通讯录，一般都可以采用此种方式进行存储。每个Content Provider都会对外提供一个公共的URI（包装成Uri对象），如果应用程序有数据需要共享时，就需要使用Content Provider为这些数据定义一个URI，然后其他的应用程序就通过Content Provider传入这个URI来对数据进行操作。 你用过什么框架，是否看过源码，是否知道底层原理。 Retrofit Retrofit 是一个 RESTful 的 HTTP 网络请求框架的封装 Retrofit 2.0 开始内置 OkHttp 简易的接口配置、强大的扩展支持、优雅的代码结构 原生的 HttpUrlConnection > 经典的 Apache 的 HttpClient > OkHttp > Square 公司开源的 Retrofit EventBus EventBus是一款针对Android优化的发布/订阅（publish/subscribe）事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息。 Android-Universal-Image-Loader 图片框架 打补丁框架 Android 高版本 API 方法在低版本系统上的兼容性处理 参考 Android 高版本 API 方法在低版本系统上的兼容性处理 用 @TargeApi($API_LEVEL) 显式表明方法的API level要求，使编译通过, 不建议使用 @SuppressLint(\"NewApi\"); 运行时判断系统版本，在低版本系统不调用此方法 Service 种类 下拉刷新，上拉获取更多 怎么实现 系统方法 SwipeRefreshLayout 没有上拉获取更多 自定义上拉获取更多添加嵌套滑动 嵌套滑动 NestedScrollingChild NestedScrollingParent 嵌套滑动机制是在 Android 发布 Lollipop 之后提供的 不过同样在Support v7 中同样支持了 RecycleView 以及 Android 5.0 以上的系统原声View 大部分都已经支持 嵌套滑动了 SurfaceView SurfaceView中包含一个Surface对象，而Surface是可以在后台线程中绘制的。Surface属于 OPhone 底层显示系统。SurfaceView的性质决定了其比较适合一些场景：需要界面迅速更新、对帧率要求较高的情况。 例如显示摄像头数据。 SuraceView的主要优势 1、SurfaceView的刷新处于主动，有利于频繁的更新画面。 2、SurfaceView的绘制在子线程进行，避免了UI线程的阻塞。 3、SurfaceView在底层实现了一个双缓冲机制，效率大大提升。 MVC MVP MVVM MVC: Model > View > Controller > Model MVP: Model <> Presenter <> View MVVM ~= MVP Presenter :作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。 优点： 降低耦合度，实现了Model和View真正的完全分离，可以修改View而不影响Modle 模块职责划分明显，层次清晰 隐藏数据 Presenter可以复用，一个Presenter可以用于多个View，而不需要更改Presenter的逻辑（当然是在View的改动不影响业务逻辑的前提下） 利于测试驱动开发。 View可以进行组件化。 代码灵活性 缺点： Presenter中除了应用逻辑以外，还有大量的View->Model，Model->View的手动同步逻辑，造成Presenter比较笨重，维护起来会比较困难。 由于对视图的渲染放在了Presenter中，所以视图和Presenter的交互会过于频繁。 如果Presenter过多地渲染了视图，往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更，那么Presenter也需要变更了。 额外的代码复杂度及学习成本。 Binder机制 Binder是Android系统进程间通信(IPC)方式之一。 Binder使用Client－Server通信方式。 JSON JSONObject 可以实现 JSON 字符串与 JSONObject 互转功能 JSONObject -> json string：toString() json string -> JSONObject：new JSONObject() google-gson 可以实现 JSONObject 或 JSON 字符串 与 模型互转的功能 object -> json string gson.toJson(obj) json string -> object gson.fromJson(json, BagOfPrimitives.class) 序列化 界面传数据不能直接传对象，需要序列化之后才能传。需要 Intent 需要序列化 Android序列化对象主要有两种方法： 实现Serializable接口,实现Serializable接口是JavaSE本身就支持的; 实现Parcelable接口,Parcelable是Android特有的功能，效率比实现Serializable接口高，像用于Intent数据传递也都支持，而且还可以用在进程间通信(IPC)，除了基本类型外，只有实现了Parcelable接口的类才能被放入Parcel中。 打包，固化 gym 360加固 "},"android/deep-links.html":{"url":"android/deep-links.html","title":"Deep Links","keywords":"","body":"Deep Links "},"android/intent.html":{"url":"android/intent.html","title":"Intent","keywords":"","body":"Intent 启动另一个 Activity Intent 和 Intent 过滤器 "},"android/gradle-upgrade-5.html":{"url":"android/gradle-upgrade-5.html","title":"gradle 升级到 5","keywords":"","body":"gradle 升级到 5 升级 参考 The Gradle Wrapper，运行 $ gradle wrapper --gradle-version 5.5 --distribution-type all 升级到 5.5 问题 问题 1 $ ./gradlew --stacktrace Caused by: java.lang.NoSuchMethodError: org.gradle.api.tasks.TaskInputs.dir(Ljava/lang/Object;)Lorg/gradle/api/tasks/TaskInputs; at org.jetbrains.kotlin.gradle.plugin.KotlinPluginKt.configureJavaTask(KotlinPlugin.kt:667) 解决 升级 kotlin-gradle-plugin 到最新版 "},"android/service.html":{"url":"android/service.html","title":"Service","keywords":"","body":"Service "},"android/key-event.html":{"url":"android/key-event.html","title":"KeyEvent 按键事件","keywords":"","body":"KeyEvent 按键事件 References KeyEvent KeyEvent.Callback Handling Keyboard Actions "},"android/flow.html":{"url":"android/flow.html","title":"控制流程","keywords":"","body":"控制流程 第一个 Activity AndroidManifest.xml 的 application 中被声明为 android.intent.category.LAUNCHER 或 android.intent.action.MAIN 的 Activity。eg： Activity 跳转 Intent intent = new Intent(); intent.setClass(this, WebViewActivity.class); startActivity(intent); 跳转 WebViewActivity.java Activity 关联 布局文件 protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.webview); } 关联 webview.xml Fragement 关联 布局文件 public class TitleFragment extends Fragment { @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.list, null, false); } } TitleFragment 关联 list android.R int i ; // 根据id找资源 i = android.R.id.item_id; // 动画 i = android.R.anim.fade_in; // 数组 i = android.R.array.emailAddressTypes; // 颜色 i = android.R.color.darker_gray; // 尺寸 i = android.R.dimen.app_icon_size; // 可绘制图片 i = android.R.drawable.title_bar; // 字符串 i = android.R.string.cancel; "},"android/other.html":{"url":"android/other.html","title":"杂七杂八","keywords":"","body":"杂七杂八 Gson格式化输出JSON字符串 Gson gson = new GsonBuilder().setPrettyPrinting().create(); String jsonOutput = gson.toJson(someObject); Reference gson Compact Vs. Pretty Printing for JSON Output Format Gson格式化输出JSON字符串 "},"android/questions.html":{"url":"android/questions.html","title":"Questions","keywords":"","body":"Questions Questions Q1: This version of Android Studio is incompatible with the Gradle Plugin used. Try disabling Instant Run(or updating either the IDE or the Gradle plugin to the latest version) Q2: com.android.server.job.controllers.JobStatus.getUid()-->NullPointerException Q3: Fatal Exception: java.lang.IllegalArgumentException: pointerIndex out of range Q4: A problem occurred starting process 'command 'node' Q5: gradle sync failed caused: java.lang.NullPointerException Q1: This version of Android Studio is incompatible with the Gradle Plugin used. Try disabling Instant Run(or updating either the IDE or the Gradle plugin to the latest version) Android Studio > Preferences > Build,Execution,Deployment > Instant Run > 取消勾选所有 Q2: com.android.server.job.controllers.JobStatus.getUid()-->NullPointerException https://issuetracker.google.com/issues/37018640 Android 系统 Bug。 解决方法： Change: public boolean onStartJob(JobParameters params) { Log.i(TAG, \"ON START JOB: \" + params.getJobId()); jobFinished(params, false); return false; } to : public boolean onStartJob(JobParameters params) { Log.i(TAG, \"ON START JOB: \" + params.getJobId()); return false; } or: public boolean onStartJob(JobParameters params) { Log.i(TAG, \"ON START JOB: \" + params.getJobId()); jobFinished(params, false); return true; } Q3: Fatal Exception: java.lang.IllegalArgumentException: pointerIndex out of range Q4: A problem occurred starting process 'command 'node' 因为没找到 /usr/local/bin/node，所以手动创建 $ command -v node /Users/bell/.nvm/versions/node/v8.9.1/bin/node $ ln -s /Users/bell/.nvm/versions/node/v8.9.1/bin/node /usr/local/bin/node Q5: gradle sync failed caused: java.lang.NullPointerException File -> Invalidate Caches / Restart -> Invalidate and Restart Build -> Clean Project "},"android/activity.html":{"url":"android/activity.html","title":"Activity","keywords":"","body":"Activity launchMode 启动模式 基础总结篇之二：Activity的四种launchMode standard 默认的启动模式 每次跳转系统都会在task中生成一个新的FirstActivity实例，并且放于栈结构的顶部，当我们按下后退键时，才能看到原来的FirstActivity实例。 这就是standard启动模式，不管有没有已存在的实例，都生成新的实例。 singleTop 跳转时系统会先在栈结构中有一个FirstActivity实例且位于栈顶，则不再生成新的，而是直接使用，否则重新生成 singleTask 如果发现有对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。 singleInstance 启用一个新的栈结构，将Acitvity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。 "},"android/size.html":{"url":"android/size.html","title":"设备尺寸","keywords":"","body":"设备尺寸 DPI是Dots Per Inch,每英寸所打印的点数 PPI = Pixels per inch，每英寸上的像素数,即 “像素密度” dpi 模式：ldpi mdpi hdpi xhdpi xxhdpi xxxhdpi px 像素 dp 是虚拟像素，在不同的像素密度的设备上会自动适配 DPI 模式 DPI 1dp=?px LDPI ~120 0.75 MDPI ~160 1.0 HDPI ~240 1.5 XHDPI ~320 2.0 XXHDPI ~480 3.0 XXXHDPI ~640 4.0 分辨率 机型 分辨率(pixels) 坚屏比例 横屏比例 备注 - 480 x 800 1.667 0.6 - 720 x 1280 1.778 (MAX) 0.5625 (MIN) - 768 x 1280 1.667 0.6 - 768 x 1334 1.737 0.5757 - 800 x 1280 1.6 0.625 - 1080 x 1920 1.778 0.5625 - 1200 x 1920 1.6 0.625 - 1440 x 2560 1.778 0.5625 - 1536 x 2048 1.333 (MIN) 0.75 (MAX) - 1600 x 2560 1.6 0.625 应用内需要占整个屏幕的图片 在layout xml中定义Android:scaleType=\"CENTER_CROP\" 或在代码中调用imageView.setScaleType(ImageView.ScaleType.CENTER_CROP); 不支持横屏 竖直高度： 1334 最小竖横比：1.333 最大竖横比：1.778 size(pixels) 备注 1334/1.333 × 1334 1 000.75 x 1334 有效宽度： 1334/1.778 = 750.28 支持横屏 取竖直高度：667 * 3 = 2001 最小竖横比：0.5625 最大竖横比：1.778 size(pixels) 备注 2001/0.5625 × 2001 3 557.33 x 2001 有效宽度： 2001/1.778 = 1 125.42 Reference https://developer.android.com/guide/practices/screens_support.html "},"android/local-notification.html":{"url":"android/local-notification.html","title":"本地通知","keywords":"","body":"本地通知 AlarmManager 全局定时器（又称为闹钟），在特定的时刻为我们广播一个指定的Intent Notification Intent Intent是一个意图，一个描述了想要启动一个Activity、Broadcast或是Service的意图。 PendingIntent PendingIntent可以认为是对Intent的包装，实际上就是，供当前App或之外的其他App调用，而常见的是供外部App使用，外部App执行这个 PendingIntent时，间接地调用里面的Intent,即外部App延时执行PendingIntent中描述的Intent及其最终行为 References AlarmManager+Notification实现定时通知提醒功能 "},"android/androidx.html":{"url":"android/androidx.html","title":"AndroidX","keywords":"","body":"AndroidX AndroidX 概览 迁移到 AndroidX React Native AndroidX Support References Android:你好,androidX！再见,android.support "},"android/layout.html":{"url":"android/layout.html","title":"布局","keywords":"","body":"布局 五大布局 FrameLayout 层布局，整个界面被当成一块空白备用区域，所有的子元素都不能被指定放置的位置，它们统统放于这块区域的左上角，并且后面的子元素直接覆盖在前面的子元素之上，将前面的子元素部分和全部遮挡 LinearLayout 线性布局,它包含的子控件将以横向或竖向的方式排列，按照相对位置来排列所有的widgets或者其他的containers,超过边界时，某些控件将缺失或消失。因此一个垂直列表的每一行只会有一个widget或者是container，而不管他们有多宽，而一个水平列表将会只有一个行高（高度为最高子控件的高度加上边框高度）。LinearLayout保持其所包含的widget或者是container之间的间隔以及互相对齐（相对一个控件的右对齐、中间对齐或者左对齐）。 Android:layout_weight 权重，只在 LinearLayout 有效，一旦View设置了该属性(假设有效的情况下)，那么该 View的宽度等于原有宽度(android:layout_width)加上剩余空间的占比！ RelativeLayout 相对布局,允许子元素指定它们相对于其父元素或兄弟元素的位置，这是实际布局中最常用的布局方式之一。它灵活性大很多，当然属性也多，操作难度也大，属性之间产生冲突的的可能性也大，使用相对布局时要多做些测试。 AbsoluteLayout 绝对位置布局，在此布局中的子元素的android:layout_x和android:layout_y属性将生效，用于描述该子元素的坐标位置。屏幕左上角为坐标原点（0,0），第一个0代表横坐标，向右移动此值增大，第二个0代表纵坐标，向下移动，此值增大。在此布局中的子元素可以相互重叠。在实际开发中，通常不采用此布局格式，因为它的界面代码过于刚性，以至于有可能不能很好的适配各种终端。 TableLayout 表格布局，适用于N行N列的布局格式。一个TableLayout由许多TableRow组成，一个TableRow就代表TableLayout中的一行。 fill_parent wrap_content match_parent 区别 fill_parent 设置一个构件的布局为fill_parent将强制性地使构件扩展，以填充布局单元内尽可能多的空间。设置一个顶部布局或控件为fill_parent将强制性让它布满整个屏幕。 wrap_content 设置一个视图的尺寸为wrap_content将强制性地使视图扩展以显示全部内容。以TextView和ImageView控件为例，设置为wrap_content将完整显示其内部的文本和图像。布局元素将根据内容更改大小。 match_parent Android2.2中match_parent和fill_parent是一个意思 .两个参数意思一样，match_parent更贴切，于是从2.2开始两个词都可以用。那么如果考虑低版本的使用情况你就需要用fill_parent了 xmlns xmlns 就是 xml 命名空间 http://schemas.Android.com/apk/res/ 引入自定义控件在layout中需要包含packagename，格式是. 自定义属性风格需要在layout或者view的属性列加载，格式是xmlns:=“http://schemas.Android.com/apk/res/” 使用自定义属性的格式是: http://schemas.android.com/apk/res-auto 自动寻找 Reference Android中如何使用xmlns 【Android】@+id与@id的区别 @+id：表示新增一个id，所以一般用在定义一个控件的id的时候。比如，android:id=\"@+id/textView1\"，表示新增一个叫做textView1的id，并且设置当前这个控件的id叫做textView1。 @id：表示引用一个id，一般用来指定某一个控件。比如，当放置一个B控件位于A控件的左边的时候，可以使用android:layout_toLeftOf=\"@id/A\"，这里就是通过引用A的id来指明相对于哪个控件进行布局。 "},"android/adapter.html":{"url":"android/adapter.html","title":"Adapter","keywords":"","body":"Adapter 适配器 Android设计模式源码解析之适配器(Adapter)模式 Adapter模式 将一个类的接口转换成客户希望的另外一个接口，Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 "},"android/proguard.html":{"url":"android/proguard.html","title":"混淆（Proguard）","keywords":"","body":"混淆（Proguard） 压缩代码和资源 buildTypes { debug { } release { minifyEnabled true // 是否混淆 shrinkResources true // 是否去除无效的资源文件 // 混淆的配置文件 proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' } } 说明 应用程序经过proguard混淆处理后会输出一个mapping.txt文件，该文件可用于恢复混淆前的堆栈信息。proguard提供了一个方便的恢复工具（retrace），通过这些文件我们可以方便的还原出混淆之前的堆栈信息，从而更好的定位出问题。 mapping.txt —> 表示混淆前后代码的对照表 dump.txt —> 描述apk内所有class文件的内部结构 seeds.txt —> 列出了没有被混淆的类和成员 usage.txt —> 列出了源代码中被删除在apk中不存在的代码 结论 一般直接加固就可以了，不用混淆 References APK反逆向之二：四种基本加固方式 "},"android/mac-android-env.html":{"url":"android/mac-android-env.html","title":"Mac 搭建 Android 开发环境","keywords":"","body":"Mac 搭建 Android 开发环境 下载 android studio https://developer.android.com/studio/install.html 需要翻墙 SDK Android Studio > Preferences > Apperence & Behavior > System Setting > Android SDK JDK http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html AVD (Android Virtual Device) Unable to create a virtual device: Missing system image required for an AVD setup https://developer.android.com/studio/run/managing-avds.html Tools > Android > AVD Manager. Genymotion 比 AVD 更快，占资源更少的模拟器 https://www.genymotion.com 注册下载安装免费版 Android Studio > Preferences > Plugins > 搜索 genymotion > install 安装 VirtualBox 配置 VirtualBox > 偏好设置 > 网络 > 仅主机网络 > 右击 > 编辑： 除 IP 外，其它配置成和电脑一样 Genymotion > 添加设备 Genymotion > Settings > ADB > Use custom Android SDK tools : ～/Library/Android/sdk 重启 Android Studio 和 Genymotion CLI 命令行 $ cd ～/Library/Android/sdk/tools Plugins Android Studio > Preferences > Plugins > Browse Repositories "},"android/android-studio.html":{"url":"android/android-studio.html","title":"Android Studio","keywords":"","body":"Android Studio Configure Your Build 快捷 快捷 说明 按两下 shift 搜索文件 command + shift + o 前往文件 自动显示提示 Android Studio > Preferences > Editor > General > Other > Show quick doc on mouse move Delay 删除 Module 选中Module右击，选择 Open Module Settings，打开Project Structure 窗。（或者选中Module，按F4打开Project Structure窗口） 或者选中Module按Delete键。 OK 格式化代码 Android Studio > Preferences > Editor > Code > Java Tab size tab 占空格数。 2 Indent 缩进空格数。2 Continuation indent 一行没完的语句换行空格数。 4 查看 APK 包 Build > Analyze APK "},"android/360-jiagu.html":{"url":"android/360-jiagu.html","title":"360 加固保","keywords":"","body":"360 加固保 官网 流程 签名 > 加固 > 再签名 界面方式加固 下载加固助手 加固助手使用说明 命令行方式加固 下载加固助手 加固助手使用说明 java -jar jiagu.jar -help "},"android/translucent-status-bar.html":{"url":"android/translucent-status-bar.html","title":"状态栏透明","keywords":"","body":"状态栏透明 /** * 沉浸式状态栏 * * M 及以上系统才支持 SYSTEM_UI_FLAG_LIGHT_STATUS_BAR 设置状态栏为深色，所以 LOLLIPOP > M 使用半透明状态栏背景实现 */ private void translucentStatusBar() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { translucentMStatusBar(); } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { translucentLollipopStatusBar(); } // 适配魅族 FlymeSetStatusBarLightMode(getWindow(), true); // 适配小米 MIUISetStatusBarLightMode(getWindow(), true); } @RequiresApi(api = Build.VERSION_CODES.M) private void translucentMStatusBar() { Window window = getWindow(); window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); window.setStatusBarColor(Color.TRANSPARENT); View decorView = getWindow().getDecorView(); decorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR); } @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) private void translucentLollipopStatusBar() { Window window = getWindow(); window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); window.setStatusBarColor(Color.argb(100, 0, 0, 0)); View decorView = getWindow().getDecorView(); decorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN); } /** * 设置状态栏图标为深色和魅族特定的文字风格，Flyme4.0以上 * 可以用来判断是否为Flyme用户 * * @param window 需要设置的窗口 * @param dark 是否把状态栏字体及图标颜色设置为深色 * @return boolean 成功执行返回true */ public static boolean FlymeSetStatusBarLightMode(Window window, boolean dark) { boolean result = false; if (window != null) { try { WindowManager.LayoutParams lp = window.getAttributes(); Field darkFlag = WindowManager.LayoutParams.class.getDeclaredField(\"MEIZU_FLAG_DARK_STATUS_BAR_ICON\"); Field meizuFlags = WindowManager.LayoutParams.class.getDeclaredField(\"meizuFlags\"); darkFlag.setAccessible(true); meizuFlags.setAccessible(true); int bit = darkFlag.getInt(null); int value = meizuFlags.getInt(lp); if (dark) { value |= bit; } else { value &= ~bit; } meizuFlags.setInt(lp, value); window.setAttributes(lp); result = true; } catch (Exception e) { } } return result; } /** * 设置状态栏字体图标为深色，需要MIUIV6以上 * * @param window 需要设置的窗口 * @param dark 是否把状态栏字体及图标颜色设置为深色 * @return boolean 成功执行返回true */ public static boolean MIUISetStatusBarLightMode(Window window, boolean dark) { boolean result = false; if (window != null) { Class clazz = window.getClass(); try { int darkModeFlag = 0; Class layoutParams = Class.forName(\"android.view.MiuiWindowManager$LayoutParams\"); Field field = layoutParams.getField(\"EXTRA_FLAG_STATUS_BAR_DARK_MODE\"); darkModeFlag = field.getInt(layoutParams); Method extraFlagField = clazz.getMethod(\"setExtraFlags\", int.class, int.class); if (dark) { extraFlagField.invoke(window, darkModeFlag, darkModeFlag); //状态栏透明且黑色字体 } else { extraFlagField.invoke(window, 0, darkModeFlag); //清除黑色字体 } result = true; } catch (Exception e) { } } return result; } "},"android/tools.html":{"url":"android/tools.html","title":"实用工具","keywords":"","body":"实用工具 References "},"android/gif.html":{"url":"android/gif.html","title":"Gif","keywords":"","body":"Gif android默认是不支持gif动画的，webview实际上是使用了webkit的功能来显示gif动画，虽然不能显示gif，但是不影响上传文件，你不要decode成bitmap来上传数据，直接用FileInputStream转成数组来上传，绝对没有问题的 "},"javascript/":{"url":"javascript/","title":"JavaScript","keywords":"","body":"JavaScript w3school 教程 mozilla 教程 Airbnb JavaScript Style Guide Airbnb JavaScript Style Guide ES6/ES2015 翻译 Airbnb JavaScript Style Guide React/JSX 翻译 深入理解JavaScript系列 ES2015 ES6 + ES7的一部分 + JSX call apply bind 区别 call apply bind 对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。 EG: var func = function(arg1, arg2) { }; func.call(this, arg1, arg2); func.apply(this, [arg1, arg2]) call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。 apply 、 call 、bind 三者都是用来改变函数的this对象的指向的； apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文； apply 、 call 、bind 三者都可以利用后续参数传参； bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。 语法 Object prototype 向对象添加属性或方法 立即执行函数 匿名闭包 (function () { // ... 所有的变量和function都在这里声明，并且作用域也只能在这个匿名闭包里 // ...但是这里的代码依然可以访问外部全局的对象 }()); 匿名函数有了自己的作用域或“闭包”。 这允许我们从父（全局）命名空间隐藏变量.这种方法的好处在于，你可以在函数内部使用局部变量，而不会意外覆盖同名全局变量，但仍然能够访问到全局变量 匿名闭包函数传入全局变量。这种方法的好处是可以预先声明好全局变量，让你的代码更加清晰可读。 && A && B 如果 A 成立返回 B，如果 A 不成立返回 A 作用 防止对象或者变量的覆盖 解决闭包冲突 模拟单例 Module模式 变量作用域已分模块，不需要再用 立即执行函数 了 DOM事件流（event flow) 事件捕获（event capturing）：通俗的理解就是，当鼠标点击或者触发dom事件时，浏览器会从根节点开始由外到内进行事件传播，即点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件。 事件冒泡（dubbed bubbling）：与事件捕获恰恰相反，事件冒泡顺序是由内到外进行事件传播，直到根节点。 addEventListener(event, listener, useCapture)　　 ·参数定义：event---（事件名称，如click，不带on，listener---事件监听函数，useCapture---是否采用事件捕获进行事件捕捉，默认为false，即采用事件冒泡方式 "},"javascript/Q&A.html":{"url":"javascript/Q&A.html","title":"Q&A","keywords":"","body":"Q&A 1 \"0\"就是true js里面是前面一个值不为\"\" false null undefined 0 就取前面一个，否则取后面一个. if (a || b) 是先得到 a || b的值 ，然后再将这个值强制转换成 bool 然后去进行if的运算 b ? b : \"3\" 简写成 b || \"3\" 2 js里面基本上所有类型都是对象 除了几个特殊的null，undefined，NaN 只要是对象都可以有方法函数 a && a.func() 3 async是es7的 es6是generator，但是有了async基本上不会用generator，generator比起async还是差了很多 生成唯一 ID 如何用JavaScript生成一个GUID/UUID function generateUUID(){ var d = new Date().getTime(); var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = (d + Math.random()*16)%16 | 0; d = Math.floor(d/16); return (c=='x' ? r : (r&0x7|0x8)).toString(16); }); return uuid; }; node-uuid 遍历修改 object array 参考 Array.prototype.map() var yourArray = [ { 'id':1, 'name':'john' },{ 'id':2, 'name':'jane' }........,{ 'id':2000, 'name':'zack' }]; var newArray = yourArray.map( function( el ){ return el.name; }); array or object to string var string = JSON.stringify(object) string to array or object var object = JSON.parse(string) string to int var str='1250' ; alert( Number(str) ); //得到1250 alert(parseInt(str)); //得到1250 var str1='00100'; alert( Number(str1) ); //得到100 alert(parseInt(str1)); //得到64 发现parseInt方法在format'00'开头的数字时会当作2进制转10进制的方法进行转换，所以建议string转int最好用Number方法 "},"javascript/jsdoc.html":{"url":"javascript/jsdoc.html","title":"jsdoc","keywords":"","body":"jsdoc GitHub usejsdoc "},"javascript/ES6.html":{"url":"javascript/ES6.html","title":"ES6","keywords":"","body":"ES6 es2015 = es6 + es7的一部分 + jsx 严格模式 尾递归优化只在严格模式下生效 类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。 考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。 相关资料 ECMAScript 6 教程 babel es6 文档 各平台对ES6的支持情况 Nodejs下的ES6兼容性与性能分析 三点操作符是如何改变Javascript的 "},"javascript/high-precision-calculation.html":{"url":"javascript/high-precision-calculation.html","title":"高精度计算","keywords":"","body":"高精度计算 涉及货币等对精度敏感的数据使用 javascript 浮点数精确计算 Java和Js的高精度计算 js高精度浮点数运算 第三方库 numbers.js Numeric Javascript accounting.js numbers.js Basic calculations 基本计算 complex 复数 Calculus 微积分 Matrix Operations 矩阵运算 Prime Numbers 质数 Statistics 统计 dsp 信号处理 radom 随机数 generate 基本计算 numbers.basic.product(arr) 乘积 numbers.basic.sum(arr) 和 "},"javascript/dots.html":{"url":"javascript/dots.html","title":"点点滴滴","keywords":"","body":"点点滴滴 1 '' + a 把 a 强转成字符串，防止直接用强转函数 undefined 报错。 undefined > 'undefined' null > 'null' "},"javascript/web-kernel.html":{"url":"javascript/web-kernel.html","title":"Web 内核","keywords":"","body":"Web 内核 MDN JS 引擎比较 wiki v8 apple javascriptcore javascriptcore 主流浏览器内核介绍（前端开发值得了解的浏览器内核历史） 浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。 渲染引擎 负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。 JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。 内核 Gecko（firefox） Trident（IE） WebKit (Safari chrome 等）： 由渲染引擎 WebCore 和 JS 解释引擎 JSCore 组成 Presto（前opera) 渲染引擎 WebCore Blink (chrome): WebKit 的分支 Javascript 引擎 KJS JSCore V8 "},"front-end/":{"url":"front-end/","title":"前端开发","keywords":"","body":"前端开发 html,css,javascript node + express+React+redux+Babel 自适应 Web 设计 响应式 Web 设计 - Viewport 为什么百度、淘宝之类的大公司网页不使用响应式，而是独立开发一套手机页面？ LESS LESSCSS是一种动态样式语言，属于CSS预处理语言的一种，它使用类似CSS的语法，为CSS的赋予了动态语言的特性，如变量、继承、运算、函数等，更方便CSS的编写和维护。 http://www.1024i.com/demo/less/ LESS VS SASS SASS用法指南 使用 .scss 方式的 SASS,语法比较习惯 Grunt VS Gulp 选择Gulp，因为语法像写代码 优化原则 按需加载 将脚本放在底部 将样式表放在头部 静态资源 静态资源在上线后需要添加hash戳作为版本标识 后端的包管理器 npm 前端的包管理器 npm + browserify 基于 Gulp + Browserify 构建 ES6 环境下的自动化前端项目 优点 browserify 基于 pipe 的方式更加干净而且灵活性也更高,尤其适合和 gulp 一起使用，[而 gulp 的官方 recipes 也是只有 browserify 的] https://github.com/gulpjs/gulp/tree/master/docs/recipes 缺点 npm不太适用于web，代码依赖层级太复杂，很多库几行代码的函数都要依赖别人的，很多冗余代码，而且编译很慢 gulp 模块管理 面向未来的前端模块化开发与包管理 System.js VS Webpack 对比 seajs / require : 是一种在线\"编译\" 模块的方案，相当于在页面上加载一个 CMD/AMD 解释器。这样浏览器就认识了 define、exports、module 这些东西。也就实现了模块化。 browserify / webpack : 是一个预编译模块的方案，相比于上面 ，这个方案更加智能。没用过browserify，这里以webpack为例。首先，它是预编译的，不需要在浏览器中加载解释器。另外，你在本地直接写JS，不管是 AMD / CMD / ES6 风格的模块化，它都能认识，并且编译成浏览器认识的JS。 webpack 预编译模块方案 Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。 Webpack 通过 babel-loader 也可以支持 ES2015。除此之外，webpack 的 loader 生态远比 System.js 繁荣，热替换，完善的 source map，优化插件，以及更小的 runtime library size（webpack 的额外代码量几乎可以忽略，而 System.js 压缩后居然还要 45kb，你是在逗我？）开发中的 Webpack 2 也将支持用 System.import 替代 AMD 语法作为模块异步加载点. 相比之下 SystemJS 的唯一特点就是不需要构建，然而即使如此，开发体验也远不如 webpack-dev-server。同时，除非你所有用户的浏览器都支持 HTTP/2，不然你最终还是要打包... 理想中的美好世界还是个没谱的事儿，所以综合来说现阶段 Webpack 完爆 SystemJS... react 的项目用 webpack 还不错，目前非react 项目 还是以gulp＋webpack 来搞，webpack仅被用来是代替 browerify 来做JS的模块化 比如，你的工程模块依赖很简单，不需要把js或各种资源打包，只需要简单的合并、压缩，在页面中引用就好了。那就不需要Browserify、Webpack。Gulp就够用了。 反过来，如果你的工程庞大，页面中使用了很多库（SPA很容易出现这种情况），那就可以选择某种模块化方案。至于是用Browserify还是Webpack就需要根据其他因素来判断了。比如团队已经在使用了某种方案，大家都比较熟悉了。再比如，你喜欢Unix小工具协作的方式，那就Browserify。 “还有就是如果我的项目不是SPA，而是很多Pages，然后我不希望所有文件最终都打包成一个bundle.js” 那就分page打包啊，至于是不是也适合用Webpack或Browserify，我只能说都可以。不过推荐使用webpack systemjs 动态的模块加载器，可以导入任何流行格式的模块（CommonJS、UMD、AMD、ES6） Webpack + SystemJS JSPM 基于SystemJS的Javascript包 package管理器，基于动态的ES6模块加载器之上构建。 Redux 展示数据 mp3 jPlayer 音频视频播放器 SoundManager2 音频 + RTMP 播放器 Service Workers Web 支持离线功能，目前支持的浏览器不多，而且支持的浏览器也是在试验阶段 Service Worker API Service Workers: an Introduction 页面守护者：Service Worker "},"front-end/storage.html":{"url":"front-end/storage.html","title":"存储","keywords":"","body":"存储 Application Cache 使用应用缓存 该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。 Service Workers 使用 Service Workers 替换 Application Cache 很多浏览器不支持，特别是 safari FileSystem FileSystem 该特性是非标准的，请尽量不要在生产环境中使用它！ Cookie 大多数浏览器对 Cookie 大小限制为 4K SessionStorage Window.sessionStorage 大小限制 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。 localForage localForage 大小限制 特性 同步的 仅支持字符串 支持所有现代浏览器（包括 IE8 及更高版本） 支持 IndexedDB，WebSQL 和 localStorage 三种存储模式； 在浏览器关闭，然后重新打开后数据仍然存在 Web SQL Database 没有被所有的主流的浏览器厂商支持 IndexedDB IndexedDB IndexedDB 是一种用于客户端存储大量结构化数据（包括文件/ blob）的低级API。此API使用索引来启用此数据的高性能搜索。 很多浏览器还不支持 References 基于 HTML5 中的 Web SQL Database 来构建应用程序 Web Storage API "},"front-end/favicon.ico.html":{"url":"front-end/favicon.ico.html","title":"favicon.ico","keywords":"","body":"favicon.ico 缩略的网站标志 制作 favicon.ico 在线制作 16×16像素 加 32×32像素 "},"front-end/gulp-webpack.html":{"url":"front-end/gulp-webpack.html","title":"gulp 结合 webpack","keywords":"","body":"gulp 结合 webpack gulp + webpack 构建多页面前端项目 gulp & webpack整合，鱼与熊掌我都要！ "},"front-end/jQuery.html":{"url":"front-end/jQuery.html","title":"jQuery","keywords":"","body":"jQuery 官网 官方文档 中文文档 "},"front-end/scss.html":{"url":"front-end/scss.html","title":"scss","keywords":"","body":"scss 官网 教程 .sass和.scss。这两种的区别在于.sass文件对代码的排版有着非常严格的要求，而且没有大括号，没有分号,以缩进方式显示。推荐用 scss 变量 所有变量以$开头 计算功能 嵌套 继承 @extend Mixin 代码块 使用@include命令，调用这个mixin。 颜色函数 lighten(#cc3, 10%) // #d6d65c darken(#cc3, 10%) // #a3a329 grayscale(#cc3) // #808080 complement(#cc3) // #33c 插入文件 @import 高级用法 @if @else @for @while @each 自定义函数 @function @return "},"front-end/debug.html":{"url":"front-end/debug.html","title":"web 调试","keywords":"","body":"web 调试 web 调试 移动设备web页在PC上调试 chrome safari iOS 真机调试 使用 Safari 调试 ios_webkit_debug_prox remotedebug-ios-webkit-adapter 重新签名打 develop 包 Android 真机调试 移动设备web页在PC上调试 chrome command + shift + m safari 开发 > 进入响应式设计模式 iOS 真机调试 使用 Safari 调试 手机端：设置 > Safari > 高级 > Web 检查器 > 开。 iOS 11 及以上可以进入 设置 > Safari > 高级 > Experimental Features > 开启你需要调试的选项。 Safari打开开发模式：Safari > 偏好设置 > 高级 > 勾选 在菜单栏中显示“开发”菜单 Safari调试：开发 > iOS 设备的名称 > 其子菜单项即为移动设备上 Safari 的所有标签页，点击任意一个开始调试。 有时候会出现 Safari 找不到设备或者设备不显示网站列表的情况。重启 Mac Safari。 这种方式只适用于 Safari 浏览器，和 debug 模式 App 内嵌的 webview，生产模式内嵌的 webview 无法调试 ios_webkit_debug_prox 这种方式可以有更多的调试工具选择。但是 safari 不能调试还是不能调试。 ios-webkit-debug-proxy remotedebug-ios-webkit-adapter 是基于 ios_webkit_debug_prox 的封装 remotedebug-ios-webkit-adapter 使用方法： 安装 ios-webkit-debug-proxy brew update brew unlink libimobiledevice ios-webkit-debug-proxy usbmuxd brew uninstall --force libimobiledevice ios-webkit-debug-proxy usbmuxd brew install --HEAD libimobiledevice brew install --HEAD usbmuxd brew install --HEAD ios-webkit-debug-proxy 安装 remotedebug-ios-webkit-adapter npm install remotedebug-ios-webkit-adapter -g \b打开模拟器或真机 必须在启动 remotedebug-ios-webkit-adapter 前打开 经测试，iOS12 模拟器不可用，其它模拟器如果出现无法调试问题，请 Hardware > Erase All Content and Settings... 后重试 开启调试权限 Settings > Safari > Advanced > Web Inspector = ON 启动 remotedebug-ios-webkit-adapter remotedebug_ios_webkit_adapter --port=9000 chrome 添加 9000 端口监听 chrome://inspect/#devices > Discover network targets Configure > 添加 localhost:9000 重新签名打 develop 包 fastlane sigh resign 使用 develop 的描述文件重新签名发包。 这样就可以调试 App 内嵌的 webview。 Android 真机调试 Chrome inspect 可以直接调试模拟器中的 webview chrome 中输入 chrome://inspect 选择设备，开始调试 [参考] https://developer.chrome.com/devtools/docs/remote-debugging 打造最舒适的webview调试环境 "},"front-end/css.html":{"url":"front-end/css.html","title":"CSS","keywords":"","body":"CSS MDN-CSS visibility hidden 隐藏元素，但是其他元素的布局不改变 display inline 该元素生成一个或多个行内元素盒。容器随内容变化 block 该元素生成一个块元素盒。容器固定 inline-block 该元素生成一个块状盒，该块状盒随着周围内容流动，如同它是一个单独的行内盒子（表现更像是一个被替换的元素） flex 弹性盒子 float 可以使一个元素脱离正常的文档流，然后被安放到它所在容器的的左端或者右端，并且其他的文本和行内元素围绕它安放. inline 会被修改成 block。 清除浮动最简单的方法就是给新的标题元素使用clear属性 overflow visible 默认值。内容不会被修剪，会呈现在元素框之外。 hidden 内容会被修剪，并且其余内容是不可见的。 scroll 内容会被修剪，并且浏览器会使用滚动条，无论内容什么内容被裁减。这避免了在动态环境中滚动条的出现和消失问题。打印机会打印溢出的内容。 auto 取决于用户代理。浏览器，例如火狐，会在内容溢出时提供滚动条。 position 设置元素的定位方式 static 元素使用正常的表现 relative 相对正常位置位移。即会适应该元素的位置，也不改变布局（这样会在此元素原本所在的位置留下空白） absolute 不为元素预留空间，元素位置通过指定其与它最近的非static定位的祖先元素的偏移来确定 fixed 不为元素预留空间。通过指定相对于屏幕视窗的位置来指定元素的空间，并且该元素的位置在屏幕滚动时不会发生改变。 "},"front-end/web-to-app.html":{"url":"front-end/web-to-app.html","title":"Web 调起 App","keywords":"","body":"Web 调起 App Android 微信通过应用宝调起 参考 https://www.linkedme.cc/docs/page6.html 要想通过应用宝跳转，应用必须在应用宝市场上线并开通了“微下载”功能，同时移动端必须安装了应用宝并安装了最新的App，才可实现流畅跳转。 参考 3.3 Applink能力 微下载能力不仅能够帮助开发者在微信等场景进行一键下载安装，目前已支持直接拉起应用的指定内容页，帮助开发者缩短内容触达路径，提升产品活跃和用户体验；（需要额外申请，根据应用资质进行审批，申请请联系工作人员QQ群1：670572083 QQ群2：166230738） 以下四点任意满足一点即可。 —— 应用评级达到B级； —— 应用微下载日访问量达到10W/天； —— 项目/应用参加腾讯“双百”扶持计划； —— 应用由腾讯投资占股。 References AppLink接入 http://wiki.open.qq.com/index.php?title=mobile/%E5%BA%94%E7%94%A8%E5%AE%9D%E5%BE%AE%E4%B8%8B%E8%BD%BD https://blog.csdn.net/lixuepeng_001/article/details/78043418 "},"front-end/babel.html":{"url":"front-end/babel.html","title":"Babel","keywords":"","body":"Babel Babel 中文网 GitHub Babel 入门教程 在node中使用babel6的一些简单分享 安装命令行 $ npm install -g babel-cli $ npm install -g babel-node 安装 $ npm install --save-dev babel-core 插件 $ npm install --save-dev babel-preset-es2015 对于 export default {} 支持不好，还得加个插件 babel-plugin-add-module-exports： \"plugins\": [ \"add-module-exports\" ] babel-polyfill includes a custom regenerator runtime and core-js. 必须放在程序总入口 .babelrc 官方文档 参数说明 presets 设定转码规则，代表需要启动什么样的预设转码，预设了6种，分别是 es2015 stage-0 stage-1 stage-2 stage-3 react plugins async babel-plugin-transform-async-to-generator 和 babel-polyfill babel的polyfill和runtime的区别 babel的polyfill和runtime的区别 babel-plugin-transform-runtime 需要修改内置api才能达成的功能(eg：扩展String.prototype)需要用 babel-polyfill "},"front-end/commonJS.html":{"url":"front-end/commonJS.html","title":"CommonJS","keywords":"","body":"CommonJS 官网 JavaScript 是一种模板规范，NodeJS是这种规范的实现 所有要输出的对象统统挂载在 module.exports 上，然后暴露给外界 通过 require 加载别的模块，require 的返回值就是模块暴露的对象 CommonJS 是一个单对象输出，单对象加载的模型 "},"front-end/error-catch.html":{"url":"front-end/error-catch.html","title":"错误捕获","keywords":"","body":"错误捕获 前端代码异常日志收集与监控 JSTracker：前端异常数据采集 第三方工具 betterJS 腾讯的 sentry google Analytics "},"front-end/editorConfig.html":{"url":"front-end/editorConfig.html","title":"EditorConfig","keywords":"","body":"EditorConfig EditorConfig 是一套用于统一代码格式的解决方案 官网 EditorConfig介绍翻译 EditorConfig 介绍 解释 indent_style：tab为hard-tabs，space为soft-tabs。 indent_size：设置整数表示规定每级缩进的列数和soft-tabs的宽度（译注：空格数）。如果设定为tab，则会使用tab_width的值（如果已指定）。 tab_width：设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。 end_of_line：定义换行符，支持lf、cr和crlf。 charset：编码格式，支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。 trim_trailing_whitespace：设为true表示会除去换行行首的任意空白字符，false反之。 insert_final_newline：设为true表明使文件以一个空白行结尾，false反之。 root：表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。 Example root = true [*] end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true indent_style = space indent_size = 2 "},"front-end/chrome.html":{"url":"front-end/chrome.html","title":"chrome 调试","keywords":"","body":"chrome 调试 导出文件 chrome 调试的时候可以改 html,css 等，改好后可以从 Sources 里选择指定文件，右击 save as 保存到本地。 "},"front-end/css-modules.html":{"url":"front-end/css-modules.html","title":"CSS Modules","keywords":"","body":"CSS Modules CSS 模块化 GitHub react-css-modules 通过高阶函数的形式来避免重复输入 styles.** 安装 npm install webpack -g npm install webpack --save-dev 使用 监控模式 webpack --progress --colors --watch References webpack with CSS Modules webpack 使用 css modules CSS Modules Webpack Demo CSS Modules入门Ⅰ：它是什么？为什么要使用它？ CSS Modules入门Ⅱ：快速上手 CSS Modules入门Ⅲ：与React协同 CSS Modules 用法教程 CSS Modules 详解及 React 中实践 "},"front-end/gulp.html":{"url":"front-end/gulp.html","title":"Gulp","keywords":"","body":"Gulp 任务自动管理工具 合并文件、压缩代码、检查语法错误、将Sass代码转成CSS代码等等 Gulp 中文网 Gulp 文档 Gulp 文档 GitHub GitHub 前端构建工具gulpjs的使用介绍及技巧 原理 Gulp 通过 流模块 的方式 pipe() 到其它插件或者写到文件中，不需要频繁的生成临时文件 Stream VS Buffer Stream: 在一个应用程序中，流是一组有序的、有起点和终点的字节数据的传输手段。 Buffer: 用于创建一个专门存放二进制数据的缓存区 在后端中应用，因为在后端与前端、后端的IO中，很大机会会出现文件太大，不能一次性读取的问题。因此在前端中使用的方法：整体读取后再进行操作，会导致程序的等待时间过长，因此，流操作（stream）便营运而生。 在数据传输过程中，如果需要把其中一段Stream截取并且进行修改查看，则需要Buffer类来进行协助，并且转化成其他的人类可理解对象 gulp-buffer file.contents 以 buffer 方式存储，有些情况不适合用流的方式处理，譬如文件倒序时必须读取整个文件内容才能实现。 gulp-stream file.contents 以 stream 方式存储 gulp.src() gulp.src()方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流(Vinyl files)，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，可以用这个方法来读取你需要操作的文件就行了。 gulp.src(globs[, options]) options.buffer 默认值是 true，所以默认以 buffer 方式返回 file.contents 安装 $ npm install --global gulp 插件 http://gulpjs.com/plugins/ gulp plugins 插件介绍 write gulp plugin guide lines 编写插件 stream-handbook 翻译 只处理修改过的文件 有多种方法实现,这里推荐用 方法一 方法一 gulp.watch + gulp-changed + gulp-changed-in-place gulp-changed: 用于处理后的结果输出到不同文件的情况。 gulp-changed-in-place: 用于处理后的结果输出到当前文件的情况 参考 http://www.gulpjs.com.cn/docs/recipes/only-pass-through-changed-files/ 方法二 gulp.watch + gulp-cached + gulp-remember 参考 http://www.gulpjs.com.cn/docs/recipes/incremental-builds-with-concatenate/ 方法三 gulp-watch 文件加后缀 gulp-rev 文件加后缀并生成 manifest 文件 + gulp-rev-collector 根据 gulp-rev 生成的 manifest 文件修改所有依赖的文件 css 自动加前缀 gulp-autoprefixer Questions gulp.watch 监控不到文件的增加 监听路径不要以 './' 开头 "},"front-end/fis.html":{"url":"front-end/fis.html","title":"fis","keywords":"","body":"fis sourcemap https://github.com/fex-team/fis/issues/511 "},"front-end/single-page-application.html":{"url":"front-end/single-page-application.html","title":"单页应用 (SPA)","keywords":"","body":"单页应用 (SPA) 在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。 构建单页Web应用 pjax pushState + AJAX pjax出现之前就有人用hash代替(就是#号)，做全页面ajax跳转。 pushState的功能具体来说就是修改url而页面无跳转，并且该url会被存放在历史记录中 WEB 端 react.js 推荐 angular.js 缺陷 不利于SEO 单页应用（Single Page Application）的搜索引擎优化 Isomorphic JavaScript 同构 JS,后端前端都可渲染 PC 端 electron 推荐. electron-vue 用Vue.js作为UI框架的脚手架 原 atom-shell.Electron生成的程序实在是太大 NodObjC Node.js ⇆ Objective-C edge .NET ⇆ Node.js nw.js 原 node-webkit 缺点 包太大 安装包包含 nodejs 与 webkit。 打包是移除掉运行时不需要的，例如 devDependencies ，通过npm i --production可以只安装 dependencies 包 或者 webpack 后只复制 C++ Modules ； 还有发布时压缩成 zip 包，可以把大小减少到 40-60MB ，如果压缩成 7z 包，可以减少到 30MB 。 运行速度比原生慢，比网页快 启动速度慢 Cordova 主打移动端，PC 端插件不足。支持平台 Platform Support 支持 Web 端，electron 和 nw.js 都是基于 node 所以不能运行在 Web 端。所以性能不如 electron 和 nw.js 总结 架构不清楚，如果要兼容XP就只能用nw.js。其它情况都首推Electron。 nw 对 xp 虽然支持，但还是很蛋疼，我们当时 XP 和 Win7+是分别打包的…… 用 electron 的有 Atom, visual studio Code electron+backbone+react Electron + React + Node.js + ES2015 "},"front-end/angular.html":{"url":"front-end/angular.html","title":"angular.js","keywords":"","body":"angular.js GitHub "},"front-end/phonegap.html":{"url":"front-end/phonegap.html","title":"PhoneGap","keywords":"","body":"PhoneGap 官网 PhoneGap VS Cordova PhoneGap, Cordova, and what’s in a name? 基于 Apache Cordova，多了 remote build 等功能: remote build remote install remote login,logout remote run serve 开发方法 App 嵌 PhoneGap iOS Embedding the Webview - iOS Android Embedding the Webview - Android "},"front-end/interview.html":{"url":"front-end/interview.html","title":"面试","keywords":"","body":"面试 前端开发面试题 Front-end-Developer-Interview-Questions CSS CSS 选择器 .class id element [attribute=value] CSS隐藏元素的几种方法 Opacity:元素本身依然占据它自己的位置并对网页的布局起作用。它也将响应用户交互; Visibility:与 opacity 唯一不同的是它不会响应任何用户交互。此外，元素在读屏软件中也会被隐藏; Display:display 设为 none 任何对该元素直接打用户交互操作都不可能生效。此外，读屏软件也不会读到元素的内容。这种方式产生的效果就像元素完全不存在; Position:不会影响布局，能让元素保持可以操作; Clip-path:clip-path 属性还没有在 IE 或者 Edge 下被完全支持。如果要在你的 clip-path 中使用外部的 SVG 文件，浏览器支持度还要低; 请解释一下为什么需要清除浮动？清除浮动的方式 清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。 clear: both; 实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。 overflow 指定当内容溢出其块级容器时,是否剪辑内容，显示滚动条或显示溢出的内容。 如何居中div？ 水平居中： div{ width:200px; margin:0 auto; } 水平垂直居中一: div { position: relative; /* 相对定位或绝对定位均可 */ width:500px; height:300px; top: 50%; left: 50%; margin: -150px 0 0 -250px; /* 外边距为自身宽高的一半 */ background-color: pink; /* 方便看效果 */ } 水平垂直居中二： div { position: absolute; /* 相对定位或绝对定位均可 */ width:500px; height:300px; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: pink; /* 方便看效果 */ } 水平垂直居中三： .container { display: flex; align-items: center; /* 垂直居中 */ justify-content: center; /* 水平居中 */ } .container div { width: 100px; height: 100px; background-color: pink; /* 方便看效果 */ } 用纯CSS创建一个三角形的原理是什么？ 把上、左、右三条边隐藏掉（颜色设为 transparent） #demo { width: 0; height: 0; border-width: 20px; border-style: solid; border-color: transparent transparent red transparent; } JavaScript JavaScript原型，原型链 ? 有什么特点？ 每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时， 如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype， 于是就这样一直找下去，也就是我们平时所说的原型链的概念。 关系：instance.constructor.prototype = instance.__proto__ 特点： JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话， 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。 function Func(){} Func.prototype.name = \"Sean\"; Func.prototype.getInfo = function() { return this.name; } var person = new Func();//现在可以参考var person = Object.create(oldObject); console.log(person.getInfo());//它拥有了Func的属性和方法 //\"Sean\" console.log(Func.prototype); // Func { name=\"Sean\", getInfo=function()} [\"1\", \"2\", \"3\"].map(parseInt) 答案是多少？ 参考 http://blog.csdn.net/justjavac/article/details/19473199 [1, NaN, NaN] 如何解决跨域问题? jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面 call apply bind call()方法的作用和 apply() 方法类似，只有一个区别，就是 call()方法接受的是若干个参数的列表，而apply()方法接受的是一个包含多个参数的数组。 func.apply(thisArg, [argsArray]) fun.call(thisArg, arg1, arg2, ...) fun.bind(thisArg[, arg1[, arg2[, ...]]]) fun 的 this 指向 thisArg apply call 结果： thisArg.func(...args) FlexBox flex-direction:决定项目的排列方向。 flex-wrap:即一条轴线排不下时如何换行。 flex-flow:是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 justify-content:定义了项目在主轴上的对齐方式。(justify) align-items:定义项目在交叉轴上如何对齐。 align-content:定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。(换行会产生多轴) React React 生命周期 渲染过程调用到的生命周期函数，主要几个要知道： constructor getInitialState getDefaultProps componentWillMount render componentDidMount 更新过程 componentWillReceiveProps shouldComponentUpdate componentWillUpdate render componentDidUpdate 卸载过程 componentWillUnmount 调用 setState 之后发生了什么？ 在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。 Component 与 PureComponent 区别 Redux 其它 请描述一下 cookies，sessionStorage 和 localStorage 的区别？ cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。 cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。 存储大小： cookie数据大小不能超过4k。 sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。 有期时间： localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； sessionStorage 数据在当前浏览器窗口关闭后自动删除。 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 懒加载（lazyload） 核心是按需加载 在什么场合中应用比较合适： 涉及到图片，falsh资源 , iframe, 网页编辑器(类似FCK)等占用较大带宽，且这些模块暂且不在浏览器可视区内,因此可以使用lazyload在适当的时候加载该类资源.避免网页打开时加载过多资源，让用户等待太久. 设计模式 知道什么是singleton, factory, strategy, decrator么? "},"front-end/chrome-apps.html":{"url":"front-end/chrome-apps.html","title":"Chrome Apps","keywords":"","body":"Chrome Apps 官网 GitHub "},"front-end/bootstrap.html":{"url":"front-end/bootstrap.html","title":"Bootstrap","keywords":"","body":"Bootstrap 响应式布局 GitHub Bootstrap 官网 Bootstrap 中文网 Bootstrap 中文文档 "},"front-end/fetch.html":{"url":"front-end/fetch.html","title":"Fetch","keywords":"","body":"Fetch 取代 ajax MDN Fetch API GitHub npm 包叫 whatwg-fetch，bower 包叫 fetch isomorphic-fetch whatwg-fetch 包了一层 可以跑在node 和 浏览器里面 使用 mode 参考 Request.mode fetch API 简介 cors, no-cors, cors-with-forced-preflight, same-origin, or navigate. same-origin 该模式很简单，如果一个请求是跨域的，那么将返回一个 error，这样确保所有的请求遵守同源策略。 no-cors 该模式允许来自 CDN 的脚本、其他域的图片和其他一些跨域资源，但是首先有个前提条件，就是请求的 method 只能是HEAD、GET 或 POST。此外，如果 ServiceWorkers 拦截了这些请求，它不能随意添加或者修改除这些之外 Header 属性。第三，JS 不能访问 Response 对象中的任何属性，这确保了跨域时 ServiceWorkers 的安全和隐私信息泄漏问题。 cors 该模式通常用于跨域请求，用来从第三方提供的 API 获取数据。该模式遵守 CORS 协议，并只有有限的一些 Header 被暴露给 Response 对象，但是 body 是可读的。例如，获取一个 Flickr 最感兴趣的照片的清单： 优点 使用 Promise，配合 async/await 写起来超爽 Fetch 常见坑 Fetch 请求默认是不带 cookie 的，需要设置 fetch(url, {credentials: 'include'}) 服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。 References 传统 Ajax 已死，Fetch 永生 "},"front-end/web-game.html":{"url":"front-end/web-game.html","title":"网页游戏","keywords":"","body":"网页游戏 引擎 第一、性能，webGL模式远超Canvas数倍。DOM模式就不适合用于真正的游戏开发，更不用提。 第二、3D方向，webGL模式理论上可以制作2D和3D游戏，Canvas和DOM模式下只能制作2D游戏。 第三、普及率，webGL的普及率已经非常高了，尤其是支持webGL的腾讯TBS-Blink内核已在4月19日发布，并逐步在微信、QQ空间、QQ浏览器、手机QQ等APP中采用静默安装方式全面升级。这个普及率在国内带来的影响，;你懂的…… 在webGL的2D渲染性能方面，pixi.js的性能处于当前的顶级。在webGL的3D渲染性能方面，Three.js非常优秀。在runtime方面Cocos2d-js也有着原生级的表现， Phaser.js 用到了 pixi.js References phaser pixi.js Which HTML5 Game Engine is right for you? 目前有哪些比较成熟的 HTML5 游戏引擎？ HTML5游戏引擎深度测评 "},"front-end/cordova-analyze.html":{"url":"front-end/cordova-analyze.html","title":"Cordova 分析","keywords":"","body":"Cordova 分析 Cordova 分析 Cordova-Android Web > Native Cordova-Android 监听 JS Web > Web 插件 Web 插件 > Cordova-Android Cordova-Android > Native 插件 Native 插件 > Cordova-Android Cordova-Android > Web Cordova-iOS Web > Native Cordova-iOS 注册 Native 插件 Web > Web 插件 Web 插件 > Cordova-iOS Cordova-iOS > Native 插件 Native 插件 > Cordova-iOS Cordova-Android apache/cordova-android Web > Native 实现过程 Cordova-Android 监听 JS SystemExposedJsApi exposedJsApi = new SystemExposedJsApi(bridge); webView.addJavascriptInterface(exposedJsApi, \"_cordovaNative\"); Web > Web 插件 Web 调用 Web 插件自定义的函数 Web 插件 > Cordova-Android cordova.exec() Cordova-Android > Native 插件 window._cordovaNative.exec() > SystemExposedJsApi.exec() Native 插件 > Cordova-Android execute() Cordova-Android > Web 执行 Web 定义的 Callback SystemExposedJsApi.execute() > callbackContext.sendPluginResult(r) Cordova-iOS apache/cordova-ios Web > Native 实现过程 Cordova-iOS 注册 Native 插件 把 Native 插件中继承 CDVPlugin 的类注册到 Cordova Web > Web 插件 Web 调用 Web 插件自定义的函数 Web 插件 > Cordova-iOS cordova.exec() Cordova-iOS > Native 插件 exec.js 的 pokeNative() 以 iframe 方式发送请求 > UIWebViewDelegate 的 shouldStartLoadWithRequest 监听请求 > CDVPlugin Native 插件 > Cordova-iOS 继承 CDVPlugin 的类实现 Web 插件 定义的方法 调用 CDVCommandDelegate 的 - (void)sendPluginResult:(CDVPluginResult*)result callbackId:(NSString*)callbackId 方法实现回调 "},"front-end/other.html":{"url":"front-end/other.html","title":"other","keywords":"","body":"other react 不后台做后台 react做后台不合适，比较麻烦,用其他双向绑定的框架要简单很多,angular和vue都比react合适,之前我也尝试过用react开发后台，但是发现开发成本和维护成本要比其他双向绑定的高很多 大型的单页应用还是react靠谱一些 "},"front-end/cache.html":{"url":"front-end/cache.html","title":"Web缓存","keywords":"","body":"Web缓存 浅谈Web缓存 HTTP 缓存 浏览器缓存知识小结及应用 header 页面的缓存状态是由header决定的，header的参数有四种： Cache-Control max-age Expires Last-modified ETag 强缓存和协商缓存 当浏览器对某个资源的请求命中了强缓存时，返回的http状态为200，在chrome的开发者工具的network里面size会显示为from cache 当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的http状态为304并且会显示一个Not Modified的字符串 chrome chrome 开发工具 > Network > Disable cache 开启关闭缓存 查看 chrome 缓存: chrome://cache/ Chrome cache View 查看二进制 chrome 缓存文件 用户操作行为与缓存 References js清除浏览器缓存的几种方法 "},"front-end/cordova.html":{"url":"front-end/cordova.html","title":"Cordova","keywords":"","body":"Cordova 官网 官方文档 cordova-tutorial cordova-plugman platform-centered workflow 方式开发时的 Cordova 插件管理工具 为 Web 提供与原生交互的能力 Cordova 文件/文件夹说明 开发方式 Cross-platform (CLI) workflow Android iOS Platform-centered workflow iOS 集成 Android 集成 使用 Android 使用 X5 内核 插件 写插件 文件/文件夹说明 Directory structure 各目录作用 Cordova那些事儿（一）——Cordova相关目录结构 目录 config.xml 是一些跨平台的通用配置 merges/ 不同平台要分开处理时，在这里分平台写代码 platforms//platform_www/ 平台相关的 Web 内容 platforms//www 自定义的 Web 内容 + platform_www/ 中的内容 开发方式 Development Paths Cross-platform(CLI) workflow : CLI是一个High-Level的工具，可以允许你在多个平台上只建立一次工程。 Platform-centered workflow : 以Native为中心，使用WebView的形式嵌入。 Cross-platform (CLI) workflow 参考 Create your first Cordova app npm install -g cordova # cordova create [ID [NAME [CONFIG]]] [options] ordova create hello com.example.hello HelloWorld cd hello cordova platform add ios --save cordova platform add android@6.2 --save # 6.2 以下的有 Bug cordova platform add browser --save cordova platform ls # 拷贝相应文件到各个平台 cordova prepare # 检查依赖 cordova requirements # 编译 cordova compile 安装插件 cordova plugin add cordova-plugin-device --save 编译、运行 建议在各个平台用对应 IDE 完成 Android Android Platform Guide # 拷贝 local.properties 到 Android 平台 cp local.properties ./ # 安装全局 gradle sdk install gradle # 安装当前工程的 wrapper gradle wrapper # 安装当前工程对应版的 gradle，并编译 ./gradlew iOS iOS Platform Guide Platform-centered workflow Embedding WebViews iOS 集成 iOS WebViews Embedding the Webview Cordova那些事儿（二）——App中集成Cordova的正确姿势（iOS） PhoneGap 文档写的比较详细，请参考 Embedding the Webview - iOS 方法一 1. 创建原生工程；pod 引入 Cordova 2. 使用Cordova-CLI创建Cordova工程； 3. 从“Cordova工程”的“原生平台工程”中，提取需要的文件，主要是以下几部分： config.xml ios.json 或 android.json platform_www 文件夹 插件的原生部分代码 4. 加入到之前创建的原生工程中。 方法二 1. 创建原生工程；pod 引入 Cordova 和 plugins 2. 使用Cordova-CLI创建Cordova工程； 3. Cordova工程写代码 3. 从“Cordova工程”的“原生平台工程”中，拷贝 www 到原生工程中。 方法三 plugman 管理插件 安装 cordova 插件 plugman install --platform ios --project . --plugin cordova-plugin-device Android 集成 Android WebViews PhoneGap 文档写的比较详细，请参考 Embedding the Webview - Android Android Studio 安装 cordova 插件 PhoneGap/Cordova Plugin 安装 cordova 插件 plugman install --platform android --project . --plugin cordova-plugin-device 使用 创建工程 在工程根目录下的 www 目录下写代码 cordova prepare www 和 plugins 目录下文件会编译到 platforms cordova compile 编译 platforms 下对应平台 cordova run 指定平台运行 其它 build -> cordova prepare && cordova compile emulate -> cordova run --emulator 不要直接改 platforms/ 下的文件，因为 prepare 的时候会被覆盖 Android 使用 X5 内核 offbye/cordova-plugin-x5engine-webview 插件 Plugin Development Guide 写插件 创建插件工程 cordova plugin add --link ../cordova-plugin-example 运行对应 platform 工程 "},"front-end/css-usage.html":{"url":"front-end/css-usage.html","title":"css 使用","keywords":"","body":"css 使用 text-align:center 只是将元素下面的内联元素居中显示 "},"front-end/requireJS.html":{"url":"front-end/requireJS.html","title":"requireJS","keywords":"","body":"requireJS 教程一 教程二 遵循的是 AMD（异步模块定义）规范,被 require 的必须 define 作用 防止 JS阻塞浏览器渲染 require([\"a\",\"b\",\"c\"]); 替换 用法 如果被定义的模块需要依赖其他模块，则define方法必须采用下面的格式。 define(['module1', 'module2'], function(m1, m2) { ... }); 为了避免像上面代码那样繁琐的写法，RequireJS提供一种更简单的写法。 define( function (require) { var dep1 = require('dep1'), dep2 = require('dep2'), dep3 = require('dep3'), dep4 = require('dep4'), dep5 = require('dep5'), dep6 = require('dep6'), dep7 = require('dep7'), dep8 = require('dep8'); ... } }); "},"front-end/webstorm.html":{"url":"front-end/webstorm.html","title":"WebStorm","keywords":"","body":"WebStorm 生成命令行工具 Preferences > Tools > Create Command-line Launcher 自动生成jsdoc格式的注释 写好函数,输入 /** 加回车 快捷键 苹果符号 苹果键盘 PC键盘 ⌘ Command Window ⌥ Option Control ⇧ Shift Shift ⌃ Ctrl Alt 快捷键 功能 ⌘ + F12 打开 Structure ⌘ + 1 打开 Project ⌘ + ↓ 打开 Code ⌃ + F12 打开 Terminal 配置 node.js WebStorm > Preferences > Languages & Frameworks > JavaScript > Node.js and NPM > 选择指定的 node.js 版本，并 enable Core library. Live Template 模板 官方文档 创建模板 Webstorm > Preferences > Editor > Live Templates > + 分享模板 Sharing Live Templates 模板路径： Windows: .WebStorm\\config\\templates\\.xml Linux: ~WebStorm\\config\\templates\\.xml OS X: ~/Library/Preferences/WebStorm/templates\\.xml 分享方法一 直接分享 .xml 文件，导入的时候保存到对应目录 分享方法二 导出配置： File > Export Settings > 只勾上 Live templates > 选择保存路径 > OK 导入配置： File > Import Settings > 选择配置文件 > 勾上 Live templates > OK 文件模板 Webstorm > Preferences > Editor > File and Code Templates 写插件 IntelliJ Platform SDK Documentation WebStorm 插件和 IntelliJ 插件一样 实时预览 chrome 安装 JetBrains IDE Support WebStorm > Run > Debug References Using JetBrains Chrome Extension "},"front-end/eslint.html":{"url":"front-end/eslint.html","title":"ESLint","keywords":"","body":"ESLint 官网 命令行使用 eslint-config-airbnb 安装 $ npm i -g eslint .eslintrc.* 01-Eslint静态代码检查 configuring $ eslint --init rules \"off\" or 0 - turn the rule off \"warn\" or 1 - turn the rule on as a warning (doesn’t affect exit code) \"error\" or 2 - turn the rule on as an error (exit code is 1 when triggered) object-curly-spacing 强制在花括号中使用一致的空格, WebStorm： Preferences > Editor > Code Style > Javascript > Spaces > Within > 勾选 ES6 import/export braces .eslintignore ignoring-files-from-linting "},"front-end/webpack.html":{"url":"front-end/webpack.html","title":"webpack","keywords":"","body":"webpack react 的项目用 webpack 还不错，目前非react 项目 还是以gulp＋webpack 来搞，webpack仅被用来是代替 browerify 来做JS的模块化 GitHub 官方文档 中文文档 安装 npm install --save-dev webpack@beta 插件 webpack 常用插件 UglifyJsPlugin 解析/压缩/美化所有的js chunk new webpack.optimize.UglifyJsPlugin([options]) ExtractTextPlugin 该插件会提取entry chunk中所有的 require('*.css')，分离出独立的css文件。 var ExtractTextPlugin = require(\"extract-text-webpack-plugin\"); new ExtractTextPlugin([id: string], filename: string, [options]) DedupePlugin 找出并删除重复的依赖 new webpack.optimize.DedupePlugin() NoErrorsPlugin 跳过编译时出错的代码并记录，使编译后运行时的包不会发生错误。 new webpack.NoErrorsPlugin() ProvidePlugin 定义标识符，当遇到指定标识符的时候，自动加载模块。 new webpack.ProvidePlugin(definitions) CommonsChunkPlugin 提取代码中的公共模块，然后将公共模块打包到一个独立的文件中，以便在其他的入口和模块中使用。 new webpack.optimize.CommonsChunkPlugin(options) DefinePlugin 变量替换 new webpack.DefinePlugin({ 'process.env.NODE_ENV': JSON.stringify('production'), __SERVER__: false }) 使用 CSS Code Splitting - CSS css-loader + extract-text-webpack-plugin 把CSS单独输出到文件 css-loader 遍历 CSS 文件，然后找到 url() 表达式然后处理他们,css-loader?modules这个参数来开启CSS Modules style-loader 把原来的 CSS 代码插入页面中的一个 style 标签中 extract-text-webpack-plugin 把CSS输出为单独的文件，而不是直接嵌入HTML里面 npm install --save-dev css-loader npm install --save-dev style-loader npm install --save-dev extract-text-webpack-plugin@beta 依赖的模块 Code Splitting - Libraries var webpack = require('webpack'); module.exports = function(env) { return { entry: { main: './index.js', vendor: 'moment' }, output: { filename: '[chunkhash].[name].js', path: './dist' }, plugins: [ new webpack.optimize.CommonsChunkPlugin({ names: ['vendor', 'manifest'] // Specify the common bundle's name. }) ] } }; 利用 CommonsChunkPlugin 插件把 moment 模块输出为 vendor.js，还有 manifest.js webpack-merge 合并配置 GitHub 配置 参考 Configuration entry 入口 output 输出 filename: 输出的文件名。开发环境 用 [name].js;生产环境用 [name].[chunkhash].js publicPath: html 中 url路径 devtool module 模块 loaders 加载器 rules 规则 test 必须遵守的规则, 正则表达式 include 必须遵守的规则, string or array exclude 例外的, string or array query == options == use url带的 query 参数 query.limit 限制文件大小，单件 byte resolve 更改模块的解析方式,配置应用层的模块（要被打包的模块）解析 resolve.alias 添加别名(添加相对路径的根目录) resolve.extensions require 或 import 的时候扫描的文件后缀，默认 extensions: [\".js\", \".json\"] resolve.modules 第三方依赖库存储的目录，默认 modules: [\"node_modules\"] resolveLoader 更改模块的解析方式,配置 loader 模块的解析, 默认: { modulesDirectories: [\"web_loaders\", \"web_modules\", \"node_loaders\", \"node_modules\"], extensions: [\"\", \".webpack-loader.js\", \".web-loader.js\", \".loader.js\", \".js\"], packageMains: [\"webpackLoader\", \"webLoader\", \"loader\", \"main\"] } plugins 插件 References webpack之热更新 "},"front-end/html.html":{"url":"front-end/html.html","title":"html","keywords":"","body":"html MDN-HTML 显示空格换行 用 pre "},"front-end/screen-adaptive.html":{"url":"front-end/screen-adaptive.html","title":"屏幕自适应","keywords":"","body":"屏幕自适应 框架 Bootstrap pc端 移动端 ideal viewport 的效果 等比缩放 (function(){var w=window.screen.width,s=w/750,u=navigator.userAgent,m='2.3)){m+=\"minimum-scale = \"+s+\", maximum-scale = \"+s+\",\"}}else{m+=\"user-scalable=no,\"}m+='target-densitydpi=device-dpi\">';document.write(m)}()); 不设置viewport,在head里面用js生成,在安卓内流里面会有一些问题 根据设备设不同的字体 使用自定义字体,font-face,然后js判断机型 rem 用的少,用rem是比较好，但是比较麻烦，如果不根据屏幕尺寸来调节html的font-size，这对rem没啥用,rem一般要配合@media用 相关资料 移动端高清、多屏适配方案 web app变革之rem 移动前端开发之viewport的深入理解 响应式网页设计 手机淘宝的flexible设计与实现 移动端自适应方案 "},"front-end/PostCSS.html":{"url":"front-end/PostCSS.html","title":"PostCSS","keywords":"","body":"PostCSS css预编译器 GitHub gulp-postcss 插件 Autoprefixer Autoprefixer 自动添加浏览器私有前缀,支持浏览器配置参考 browserslist postcss-modules 支持 css modules 使用 css预编译器和PostCSS可以协同使用。有一个流行的用法就是Sass编译后再接PostCSS的Autoprefixer 参考 在css预编译器之后，PostCSS "},"react/":{"url":"react/","title":"react.js","keywords":"","body":"react.js 主要用于大型单页应用 GitHub 教程 官方文档 官方文档-中文 把 reactjs.cn 文档链接后的 .html 改成 -zh-CN.html 可以看中文文档 安装 npm install --save react 工具 react-dom react DOM 工具 react-router 管理跌幅 redux 管理 state react-redux redux 的 react 实现 react-router-redux 协调 react-router 和 redux create-react-app 创建 React 工程 CDN https://cdnjs.com/libraries/react http://www.bootcdn.cn/react/ gulp + browserify 转 jsx https://csspod.com/using-browserify-with-gulp/ webstorm 配置 https://blog.jetbrains.com/webstorm/2015/10/working-with-reactjs-in-webstorm-coding-assistance/ https://blog.jetbrains.com/webstorm/2014/07/how-webstorm-works-completion-for-javascript-libraries/ WebStorm > Preferences > Languages & Frameworks > JavaScript > JavaScript language version > JSX Harmony React服务器端渲染 React服务器端渲染实践小结 玩转 React 服务器端渲染 Server-side Environments 服务端渲染 "},"react/react-usage.html":{"url":"react/react-usage.html","title":"React 使用","keywords":"","body":"React 使用 state VS prop 参考 动态交互式用户界面 大部分组件的工作应该是从 props 里取数据并渲染出来。但是，有时需要对用户输入、服务器请求或者时间变化等作出响应，这时才需要使用 State。 原则上不可修改 props Refs 参考 对组件的refs Refs是一种很好的发送消息给特定子实例(通过流式的Reactive props 和 state来做会不方便)的方式。 Inline Styles 搭建环境 在用户第一次访问页面时，由服务端路由处理，输出相关页面内容 客户端用户点击链接跳转，由客户端路由处理，渲染相关组件并展示 用户在前端跳转后刷新页面，此时被服务端路由截获，并由服务端处理渲染并返回页面内容 参考 Koa2 + React + Redux + antd 同构直出探索 Server Rendering React koa2 同构应用实践 参考项目 初始化 package.json npm init eslint npm install --save-dev eslint npm install --save-dev eslint-plugin-react WebStorm Preferences > Languages & Frameworks > Node.js and NPm > Node interperter:v6.9.1 | enable Node.js Core library Preferences > Languages & Frameworks > JavaScript > JavaScript language version > React JSX Preferences > Languages & Frameworks > JavaScript > Code Quality Tools > ESLint > Enable Koa2 npm install --save koa@next npm install --save koa-router@next npm install --save koa-favicon@next npm install --save koa-logger@next npm install --save koa-compress@next npm install --save request react npm install --save react npm install --save react-dom gulp npm install -g gulp npm install --save-dev gulp-babel npm install --save-dev gulp-changed npm install --save-dev gulp-clean-css npm install --save-dev gulp-htmlmin npm install --save-dev gulp-imagemin npm install --save-dev gulp-livereload npm install --save-dev gulp-plumber npm install --save-dev gulp-react npm install --save-dev gulp-rename npm install --save-dev gulp-rev npm install --save-dev gulp-rev-collector npm install --save-dev gulp-sass npm install --save-dev gulp-sourcemaps npm install --save-dev gulp-uglify npm install --save-dev gulp-watch npm install --save-dev imagemin-pngquant npm install --save-dev run-sequence webpack npm install --save-dev webpack babel npm install -g babel-cli npm install -g babel-node npm install --save babel-polyfill npm install --save-dev babel-core npm install --save-dev babel-eslint npm install --save-dev babel-plugin-transform-async-to-module-method npm install --save-dev babel-preset-es2015 npm install --save-dev babel-preset-stage-0 other npm install --save bluebird "},"react/redux.html":{"url":"react/redux.html","title":"redux","keywords":"","body":"redux 管理 state GitHub 官方文档 中文文档 安装 npm install --save redux React + redux 搭配 React npm install --save react-redux router npm install --save react-router-redux 说明 Store 整个应用只有一个唯一的 Store Store 对应的状态树（State），由调用一个 reducer 函数（root reducer）生成 状态树上的每个字段都可以进一步由不同的 reducer 函数生成 Store 包含了几个方法比如 dispatch, getState 来处理数据流 Store 的状态树只能由 dispatch(action) 来触发更改 Redux 的数据流 action 是一个包含 { type, payload } 的对象 reducer 函数通过 store.dispatch(action) 触发 reducer 函数接受 (state, action) 两个参数，返回一个新的 state reducer 函数判断 action.type 然后处理对应的 action.payload 数据来更新状态树 所以对于整个应用来说，一个 Store 就对应一个 UI 快照，服务器端渲染就简化成了在服务器端初始化 Store，将 Store 传入应用的根组件，针对根组件调用 renderToString 就将整个应用输出成包含了初始化数据的 HTML。 Reducer Store 是由 reducer 产生的，所以 reducer 实际上反映了 Store 的状态树结构 Action Selector 参考 Reselect "},"react/react-redux.html":{"url":"react/react-redux.html","title":"react-redux","keywords":"","body":"react-redux redux 的 react 实现 GitHub 安装 npm install --save react-redux "},"react/react-router.html":{"url":"react/react-router.html","title":"react router","keywords":"","body":"react router 管理 React 路由 GitHub docs react-router-tutorial Install $ npm install --save react-router "},"react/create-react-app.html":{"url":"react/create-react-app.html","title":"create-react-app","keywords":"","body":"create-react-app 创建 React 工程 GitHub 安装 npm install -g create-react-app "},"react/react-router-redux.html":{"url":"react/react-router-redux.html","title":"react-router-redux","keywords":"","body":"react-router-redux 保持路由与应用状态（state）同步。 react-router 和 redux 两个库不能协同工作,需要 react-router-redux 协调这两个库 GitHub Install npm install --save react-router-redux "},"react/antd.html":{"url":"react/antd.html","title":"ant-design","keywords":"","body":"ant-design 一套企业级的 UI 设计语言和 React 实现 GitHub 官方文档 中文 README awesome-ant-design 安装 npm install --save antd "},"file-format/":{"url":"file-format/","title":"文件格式转换","keywords":"","body":"文件格式转换 pandoc 支持很多种格式间转换 ONLYOFFICE 开源 Office Apache Apache FOP XSL-FO to PDF Apache Batik 使用 SVG 实现各种功能 java -jar batik-ttf2svg.jar /usr/home/myFont.ttf -l 48 -h 57 -id MySVGFont -o mySVGFont.svg -testcard Apache XML Graphics 集成 FOP Batik aspose EMF to SVG ucancode TIFF to SVG FreeHEP VectorGraphics ImageMagick References The differences between export formats "},"file-format/csv.html":{"url":"file-format/csv.html","title":"CSV","keywords":"","body":"CSV Example Year Make Model Description Price 1997 Ford E350 \"ac, abs, moon\" 3000.00 1999 Chevy Venture \"Extended Edition\" 4900.00 1999 Chevy Venture \"Extended Edition, Very Large\" 5000.00 1996 Jeep Grand Cherokee MUST SELL! air, moon roof, loaded 4799.00 转成 CSV Year,Make,Model,Description,Price 1997,Ford,E350,\"ac, abs, moon\",3000.00 1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00 1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00 1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00 References wikipedia IETF 标准 "},"file-format/markdown.html":{"url":"file-format/markdown.html","title":"Markdown","keywords":"","body":"Markdown 相关资料 Choosing the Right Markdown Parser npm trends markdown-it vs marked vs showdown Markdown 规范 Markdown 库 marked Markdown 解析编译库 markdown-it Markdown 解析编译库 showdown Markdown 在线编辑器 stackedit 依赖 markdown-it dillinger 依赖 markdown-it editor.md Q&A Markdown 支持 SVG "},"file-format/ms-office.html":{"url":"file-format/ms-office.html","title":"Microsoft Office","keywords":"","body":"Microsoft Office Microsoft Office 是对 Office Open XML 的扩展 VBA 在 Office 中运行的 VB 脚本 Office VBA Reference Office VBA 参考 OFfice 加载项（add-ins) Office 加载项文档 Macro http://dmcritchie.mvps.org/excel/getstarted.htm References Office File Formats Office 文件格式 Office Protocols Office 协议 My Excel Pages -- David McRitchie "},"file-format/xls.html":{"url":"file-format/xls.html","title":"XLS 文件","keywords":"","body":"XLS 文件 Extracting Metadata from an XLS(X) File [MS-CFB]: Compound File Binary File Format [MS-XLS]: Excel Binary File Format (.xls) Structure XLS 转 XLSX jodconverter 依赖 LibreOffice 或者 OpenOffice ASPOSE 收费 Other 常见的表格格式（XLS, XLSX/M, XLSB, ODS）都是ZIP或CFB的压缩文件。 这两种格式都不会将目录结构声明放在文件的开头，ZIP文件将中央目录记录放置在逻辑文件的末尾，而CFB文件可以将FAT结构放置在文件的任何位置！ 因此，如果要正确处理这些格式，流式传输功能必须在开始之前缓冲整个文件。 因为要缓冲整个文件，这样就违背了流式读取的初衷，所以模块不提供流式读取文件的功能。 OpenOffice 和 JodConvert 将既有的各种 Office 文件转换为 Pdf 文件 References How to convert .xls to .xlsx jodconverter ASPOSE 文档转换示例工程(Document -> PDF) "},"file-format/aspose.html":{"url":"file-format/aspose.html","title":"Aspose","keywords":"","body":"Aspose 一个强大的文件格式转化工具，收费 Cells 问题 xls 转 xlsx 的时候筛选器 autoFilter 会丢失 colorFilter 字段 References Aspose 官网 Spreadsheet File Formats Aspose.Cells for Java Example "},"file-format/poi.html":{"url":"file-format/poi.html","title":"POI","keywords":"","body":"POI 解析 Office java 库 文件类型 SXSSF 大表格解决方案 "},"file-format/pdf.html":{"url":"file-format/pdf.html","title":"PDF","keywords":"","body":"PDF PDF 协议 Java 库 Apache FOP java PDFBox java iText java 参考 Compare these products for PDF generation with Java given requirements inside: iText, Apache PDFBox or FOP? 选择 iText JS 库 jsPDF PDFKit Html to PDF wkhtmltopdf 其它库 PDF Code Library .net 收费 "},"file-format/office-open-xml.html":{"url":"file-format/office-open-xml.html","title":"Office Open XML","keywords":"","body":"Office Open XML Office Open XML(OOXML) Office 文件格式 OOXML文件的文档属性其实存在于docProps目录下，比较重要的有三个文件 app.xml：记录文档的属性，内容类似之前的DocumentSummaryInformation。 core.xml：记录文档核心的属性，比如创建时间、最后修改时间等等，内容类似之前的SummaryInformation。 thumbnail.*：文档的缩略图，不同文件存储的是不同的格式，比如Word为emf，Excel为wmf，PowerPoint为jpeg。 工具 OOXMl Tools [TODO] VS Code 插件 poi-ooxml java 版本处理 OOXML 文件格式 POIFS 基本的文件格式 HPSF (Horrible Property Set Format) 文档 XWPT 文档 HSSF (Horrible SpreadSheet Format) 2007 版本表格 XSSF (Excel file) 2013 版本表格 SXSSF XSSF 流模式，解决大表格问题 SS (Spread Sheet) HSSF XSSF 兼容 XSLF (Slide File) 幻灯片 sl (slide) 幻灯片 XDGF (Visio File) Visio References POI各Jar包的作用 Apache POI References OOXML 规范 欢迎使用 Open XML SDK 2.5 for Office SpreadsheetML 文档的结构 (Open XML SDK) Microsoft Open Specifications "},"file-format/json-to-xml.html":{"url":"file-format/json-to-xml.html","title":"JSON 转 XML","keywords":"","body":"JSON 转 XML Java JSON-java Json-lib References http://www.json.org/ "},"objective-c/":{"url":"objective-c/","title":"Objective C","keywords":"","body":"Objective C 代码格式化 代码统计 .(点）与->(箭头）用法区别 .(点语法）是访问类的属性，本质是调用set、get方法。 targetString 浮点型取整 ceil 向上取整 floor 向下取整 round 四舍五入 (int)强转 截尾取整 trunc 截尾取整 JSON to Objective-C model nidyx json-to-objective-c "},"objective-c/cloc.html":{"url":"objective-c/cloc.html","title":"CLOC","keywords":"","body":"CLOC 代码统计工具 http://cloc.sourceforge.net/ 安装 $ brew install cloc 使用 $ cloc ./ --exclude-dir=Pods "},"objective-c/macro.html":{"url":"objective-c/macro.html","title":"宏","keywords":"","body":"宏 #pragma与_Pragma #pragma与_Pragma效果一样，但是在宏定义时，#会被忽略.eg: #define MACRO(x) #x MACRO(example) //结果是example 所以在宏里面只能用_Pragma 用法 _Pragma(“OPT_LEVEL 2”) 等价于 #pragma OPT_LEVEL 2 "},"objective-c/arc.html":{"url":"objective-c/arc.html","title":"ARC","keywords":"","body":"ARC 黑幕背后的Autorelease "},"objective-c/clang-format.html":{"url":"objective-c/clang-format.html","title":"ClangFormat","keywords":"","body":"ClangFormat Xcode代码格式化工具 ClangFormat-Xcode 新版 Xcode 上已不可用 XcodeClangFormat 新版 Xcode 上可用，第三方扩展方式安装 配置 ClangFormat-Xcode 在工程目录或者workspace目录下创建一个\".clang-format\"文件，添加类似于以下内容的参数： # 基础样式 BasedOnStyle: LLVM # 缩进宽度 IndentWidth: 4 # 圆括号的换行方式 BreakBeforeBraces: Attach # 支持一行的if AllowShortIfStatementsOnASingleLine: true # switch的case缩进 IndentCaseLabels: true # 针对OC的block的缩进宽度 ObjCBlockIndentWidth: 4 # 针对OC，属性名后加空格 ObjCSpaceAfterProperty: true # 每行字符的长度 ColumnLimit: 0 # 注释对齐 AlignTrailingComments: true # 括号后加空格 SpaceAfterCStyleCast: true # 不在小括号里加空格 SpacesInParentheses: false # 不在中括号里加空格 SpacesInSquareBrackets: false 参考资料 .clang-format 文档 .clang-format 参数 http://blog.csdn.net/zhangao0086/article/details/42872263 "},"objective-c/high-precision-calculation.html":{"url":"objective-c/high-precision-calculation.html","title":"高精度计算","keywords":"","body":"高精度计算 涉及货币等对精度敏感的数据使用 用 NSDecimalNumber "},"objective-c/runtime.html":{"url":"objective-c/runtime.html","title":"runtime","keywords":"","body":"runtime Method class_copyMethodList 拷贝类的所有方法 不会取父类的方法 method_getTypeEncoding 获取方法的返回值和参数类型 Type Encodings NSMethodSignature SEL selector = method_getName(method); NSMethodSignature *signature = [class instanceMethodSignatureForSelector:selector]; NSUInteger numberOfArguments = [signature numberOfArguments]; for (int i=0 ; i"},"ruby/":{"url":"ruby/","title":"Ruby","keywords":"","body":"Ruby 官网 Ruby China Ruby 教程 安装 rvm Github 安装 rvm $ curl -L https://get.rvm.io | bash -s stable --autolibs=enabled 把其它方式安装的 ruby 添加到 rvm $ rvm automount 查看已安装的 ruby $ rvm list 查看稳定版本 http://www.ruby-lang.org/zh_cn/downloads/ 安装 ruby $ rvm install 2.2.5 "},"ruby/Gemfile.html":{"url":"ruby/Gemfile.html","title":"Gemfile","keywords":"","body":"Gemfile Gem包依赖文件 官方文档 bundle init 生成 Gemfile bundle install 自动去Gemfile中的sources中去下载gem "},"ruby/gem.html":{"url":"ruby/gem.html","title":"gem","keywords":"","body":"gem 安装 https://github.com/FIRHQ/fir-cli/blob/master/doc/install.md 源 官方 https://rubygems.org/ 淘宝 https://ruby.taobao.org/ Ruby China https://gems.ruby-china.org/ 最近淘宝源一直没更新。。。建议切换到Ruby China $ gem sources -a https://gems.ruby-china.org/ -r https://ruby.taobao.org/ $ gem sources -u 换回官方源 $ gem sources -a https://rubygems.org/ -r https://ruby.taobao.org/ $ gem sources -u gem install 安装指定版本 gem install -v "},"ruby/bundler.html":{"url":"ruby/bundler.html","title":"bundle 管理 gem 包","keywords":"","body":"bundle 管理 gem 包 管理 gem 包依赖 bundler官网 官方文档 安装 bundler $ gem install bundler 初始化Gemfile $ bundle init 利用 .gemspec生成Gemfile 安装依赖包 $ bundle install 根据Gemfile安装依赖包 创建 rubygem $ bundle gem my_gem 查看帮助： $ bundle help gem 编译 gem $ gem build my_gem.gemspec 发布到 rubygems http://guides.rubygems.org/publishing/ $ gem push my_gem-0.1.0.gem 详细使用 Reference http://blog.csdn.net/kucss/article/details/7163563 "},"ruby/gets.html":{"url":"ruby/gets.html","title":"gets 获取输入","keywords":"","body":"gets 获取输入 Ruby中gets和gets.chomp() gets和gets.chomp()都表示读入用户的输入并用于输出，但两者还是有所不同，其中gets是得到的内容后，在输出时后面接着换行；而gets.chmop()得到的内容输出时后面不带空格和换行。 例如： print \"How old are you? \" # input 29yrs age = gets.chomp() print \"How tall are you? \" # input 168cm height = gets.chomp() print \"How much do you weigh? \" # input 62kg weight = gets puts \"So, you're #{age} old, #{height} tall and #{weight} heavy.\" 运行结果： So, you're 29yrs old, 168cm tall and 62kg heavy. GetoptLong "},"ruby/Other.html":{"url":"ruby/Other.html","title":"Other","keywords":"","body":"Other 教程 http://www.runoob.com/ruby/ruby-tutorial.html Gemfile Gemfile里定义了约束，使用bundle install安装 IDE RubyMine Ruby 风格指南 ruby-style-guide Ruby 风格指南 rubocop rubocop 自动检查你的 Ruby 代码是否符合这份 Ruby 风格指南 使用 "},"git/readme.html":{"url":"git/readme.html","title":"Git","keywords":"","body":"Git 官方中文文档 PDF 版 gitflow 命令 cherry-pick 合并指定 commit Example： git cherry-pick 代理 git 设置和取消代理 git config --global http.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 git config --global --unset http.proxy git config --global --unset https.proxy npm config delete proxy "},"git/checkout.html":{"url":"git/checkout.html","title":"checkout","keywords":"","body":"checkout 创建新分支 git checkout -b git checkout -B = git checkout -b -f "},"git/diff.html":{"url":"git/diff.html","title":"git diff 的使用","keywords":"","body":"git diff 的使用 git diff后者对前者的修改 比较两个分支 bell分支相对master分支的修改 $ git diff origin/master origin/bell 比较两个tag $ git diff 0.0.1 0.0.2 0.0.1,0.0.2为tag 工作目录与上次提交时之间的差别 $ git diff HEAD 用其它工具查看 diff git difftool Reference http://www.cnblogs.com/wish123/p/3963224.html "},"git/git-stash.html":{"url":"git/git-stash.html","title":"git stash","keywords":"","body":"git stash 6.3 Git 工具 - 储藏（Stashing） 经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是 git stash 命令。 使用 存储 git stash 查看存储列表 git stash list 查看某个存储的具体修改 git stash show 0 取出存储 git stash pop "},"git/submodule.html":{"url":"git/submodule.html","title":"子模块","keywords":"","body":"子模块 Git-工具-子模块 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立 添加子模块 $ git submodule add --name DbConnector https://github.com/chaconinc/DbConnector DbConnector 克隆含有子模块的项目 方法一 $ git clone https://github.com/chaconinc/MainProject $ cd MainProject $ git submodule init $ git submodule update 方法二 $ git clone --recursive https://github.com/chaconinc/MainProject 更新子模块 $ git submodule update --remote 删除子模块 git submodule deinit -f -- a/submodule rm -rf .git/modules/a/submodule git rm -rf a/submodule # Note: a/submodule (no trailing slash) # or, if you want to leave it in your working tree git rm --cached a/submodule git submodule add --name RSKImageCropper https://github.com/shimo-react-native/RSKImageCropper.git ios/RSKImageCropper git submodule deinit -f -- ios/RSKImageCropper rm -rf .git/modules/ios/RSKImageCropper git rm -rf ios/RSKImageCropper git rm --cached ios/RSKImageCropper "},"git/tag.html":{"url":"git/tag.html","title":"git tag 管理","keywords":"","body":"git tag 管理 创建新的 tag $ git tag -a 0.0.1 -m \"new tag\" push 到远程服务器 $ git push origin 0.0.1 查看 tag 信息 $ git show 0.0.1 切换到指定 tag $ git checkout 0.0.1 "},"git/github.html":{"url":"git/github.html","title":"GitHub","keywords":"","body":"GitHub logo Markdown issue 用于管理开发进度、Bug修复进度 Mastering Issues label issue 的标签 milestone 是对issue的集合，譬如某个版本的功能列表 assignee issue 负责人 commit commit 后加上“Fixes”, “Fixed”, “Fix”, “Closes”, “Closed”, or “Close” # 将会关闭 issue Pull Request 贡献代码 Collaborating on projects using issues and pull requests Pull Request的正确打开方式 先 fork ，再建立新的对应某个任务的分支 ，再把该分支 pull request 到原分支。之后再修改 分支，如果 pull request 没 close，会自动提交。 comment code GitHub 不可以直接对仓库的文件评论，可以对相应的 commit 评论。所以如果如果要评论某段代码，需要 Blame 或者 History 找出对应的 commit ，然后从该 commit 中评论对应的代码。 compare Branch,tag,commit 之间的比较 在仓库首页 URL 后面加上 /compare 进入比较页面 左边: 输入被比较的 Branch,tag 或 commit 右边: 输入比较的 Branch,tag 或 commit "},"git/clone-local.html":{"url":"git/clone-local.html","title":"clone 本地代码","keywords":"","body":"clone 本地代码 有两种方式实现 clone 本地代码 -l 参数 $ git clone -l ~/Documents/Gitlab/pod-template/ WFT-social .git $ git clone ~/Documents/Gitlab/pod-template/.git WFT-social "},"git/git-merge-remote.html":{"url":"git/git-merge-remote.html","title":"Git合并其它仓库的代码","keywords":"","body":"Git合并其它仓库的代码 增加新仓库 $ git remote add pod-template git@github.com:CocoaPods/pod-template.git pod-template为本地新增加的仓库 查看新仓库 $ git remote -v origin git@github.com:GreedBell/pod-template.git (fetch) origin git@github.com:GreedBell/pod-template.git (push) pod-template git@github.com:CocoaPods/pod-template.git (fetch) pod-template git@github.com:CocoaPods/pod-template.git (push) 多了pod-template fetch 新仓库 $ git fetch pod-template 合并新仓库 $ git merge pod-template/master 提交 提交到自己仓库 $ git push origin master 提交到新仓库 如果有权限的话 $ git push pod-template master 相关资料 http://blog.sina.com.cn/s/blog_411fed0c0102vhlb.html "},"git/git-log.html":{"url":"git/git-log.html","title":"提交记录","keywords":"","body":"提交记录 查看提交记录 $ git log graph $ git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative 查看记录详情 $ git show 切换到指定版本 $ git checkout 为git log对应的commit "},"git/rebase.html":{"url":"git/rebase.html","title":"rebase","keywords":"","body":"rebase 变基. rebase 命令将提交到某一分支上的所有修改都移至另一分支上，变基使得提交历史更加整洁,提交历史是一条直线没有分叉。一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁 Reference 3.6 Git 分支 - 变基 3.6 Git Branching - Rebasing Git Community Book 中文版 "},"git/merge.html":{"url":"git/merge.html","title":"git merge","keywords":"","body":"git merge --no-ff：不使用fast-forward方式合并，保留分支的commit历史 --squash：使用squash方式合并，把多次分支commit历史压缩为一次 Reference https://git-scm.com/docs/git-merge "},"git/gitbook-usage.html":{"url":"git/gitbook-usage.html","title":"GitBook","keywords":"","body":"GitBook GitHub 文档 Help 本地编辑器 安装 $ npm install -g gitbook-cli 更新 $ gitbook update 安装依赖 $ gitbook install 编译 $ gitbook build book.json gitbook配置，配置插件。。。 例子： { \"gitbook\": \"2.x.x\" , \"title\": \"Bell's blog\", \"plugins\": [\"github\"], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/GreedBell/blog\" } } } 插件 http://zhangjikai.com/gitbook-use/plugins.html 添加插件后运行 $ cd ~ $ gitbook install 安装插件到用户目录 disqus 评论 插件地址 官网 安装 多说 评论 插件地址 官网 mermaid 画流程图 插件地址 adsense google 广告 插件地址 gitbook-plugin-anchors 加描点 gitbook-plugin-anchor-navigation-ex 添加toc到侧边悬浮导航 gitbook-plugin-splitter 侧边栏可以滑动 expandable-chapters 收起或展开章节目录中的父节点。 webhooks 向slack发消息 slack-incoming-webhooks 相关资料 Gitbook 的使用和常用插件 "},"git/branch.html":{"url":"git/branch.html","title":"git branch","keywords":"","body":"git branch git branch 列出本地已经存在的分支 git branch -r 列出远程分支 git branch -a 列出本地分支和远程分支 git branch -a 列出本地分支和远程分支 git branch -d 删除分支 git branch -D 强制删除分支 创建分支 git branch / 基于当前HEAD创建分支 git checkout git push origin "},"git/rollback.html":{"url":"git/rollback.html","title":"代码回滚","keywords":"","body":"代码回滚 git revert 是生成一个新的提交来撤销某次提交，此次提交之前、之后的commit都会被保留 添加新的提交记录，可以提交到远程仓库 git revert 后的冲突通过 git mergetool 解决 git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区 用于查看历史记录，切换到历史记录后不能提交到远程仓库 git reset --hard 撤销这次修改，之前本地的，没有提交的修改，都撤销 Reference http://blog.csdn.net/fyh2003/article/details/6869804 "},"git/flow.html":{"url":"git/flow.html","title":"git flow","keywords":"","body":"git flow GitHub 基于git的源代码管理模型——git flow "},"git/questions.html":{"url":"git/questions.html","title":"Questions","keywords":"","body":"Questions git clone error: RPC failed; result=56, HTTP code = 200 git config --global http.postBuffer 524288000（尽量大） 关闭代理 Reference https://confluence.atlassian.com/stashkb/git-clone-fails-error-rpc-failed-result-56-http-code-200-693897332.html "},"git/update-gitignore.html":{"url":"git/update-gitignore.html","title":"更新 .gitignore","keywords":"","body":"更新 .gitignore git rm -r --cached . git add . --all git commit -m 'chore: update .gitignore' git push origin master "},"git/commit.html":{"url":"git/commit.html","title":"git-commit","keywords":"","body":"git-commit git commit 不加 -m 会弹出输入提交信息的界面。第一行标题，空行，再输入正文。每个 commit 尽可能少些功能。 用一个空行隔开标题和正文 限制标题字数在 50 个字符内 用大写字母写标题行 不要用句号结束标题行 在标题行使用祈使语气 正文在 72 个字符处换行 使用正文解释是什么和为什么，而不是如何做 Reference Commit message 和 Change log 编写指南 写好Git Commit信息的7个建议 AngularJS Git Commit Message Conventions Git Commit Msg "},"git/git-server.html":{"url":"git/git-server.html","title":"ssh 方式架设 git 服务","keywords":"","body":"ssh 方式架设 git 服务 服务器 创建 git 用户 初始化 /git 目录 $ sudo mkdir /git $ sudo chown -R git:staff /git/ 初始化仓库 $ su - git $ git init --bare --shared=group /git/test.git 客户端 这里都以服务器在本地为例，所以在使用的时候记得把 localhost 换成对应服务器地址。 建立 ssh 互信 拷贝本地公钥到服务器的/home/git/.ssh/authorized_keys $ ssh git@localhost \"mkdir ~/.ssh\" $ scp ~/.ssh/id_rsa.pub git@localhost:~/.ssh/id_rsa.pub.back $ ssh git@localhost \"cat ~/.ssh/id_rsa.pub.back >> ~/.ssh/authorized_keys\" 如果是重新创建新仓库，直接 clone $ git clone ssh://git@localhost/git/test.git 如果要在原有仓库基础上转移到新的仓库 添加 remote $ git remote add ssh ssh://git@localhost/git/test.git push 到新的仓库 $ git push ssh master "},"gateway/":{"url":"gateway/","title":"翻墙","keywords":"","body":"翻墙 "},"gateway/CentOS-denote.html":{"url":"gateway/CentOS-denote.html","title":"CentOS 下安装 denote","keywords":"","body":"CentOS 下安装 denote 下载 https://www.inet.no/dante/download.html 配置 http://www.inet.no/dante/doc/latest/config/index.html 安装 wget https://www.inet.no/dante/files/dante-1.4.1.tar.gz tar zxvf dante-1.4.1.tar.gz cd dante-1.4.1 ./configure make make install /etc/sockd.conf 查看端口占用情况 netstat -lp kill -0 [pid] 关闭进程 killall sockd 连不上啊 "},"gateway/CentOS-ss5.html":{"url":"gateway/CentOS-ss5.html","title":"CentOS 下安装 ss5","keywords":"","body":"CentOS 下安装 ss5 下载 https://www.inet.no/dante/download.html 配置 http://www.inet.no/dante/doc/latest/config/index.html 安装 wget https://www.inet.no/dante/files/dante-1.4.1.tar.gz tar zxvf dante-1.4.1.tar.gz cd dante-1.4.1 ./configure make make install /etc/sockd.conf 查看端口占用情况 netstat -lp kill -0 [pid] 关闭进程 killall sockd 连不上啊 "},"gateway/shadowsocks.html":{"url":"gateway/shadowsocks.html","title":"shadowsocks","keywords":"","body":"shadowsocks GitHub ShadowsocksX-NG shadow socks Mac 客户端 撰写 Adblock Plus 过滤规则 安装pip http://www.centoscn.com/image-text/install/2015/0129/4585.html https://pip.pypa.io/en/stable/installing/ 安装 pip install shadowsocks 后台运行 sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start 停止 sudo ssserver -d stop 开机自启动 创建脚本 /etc/init.d/ssserver-start.sh，内容如下： #!/bin/bash #author: bell sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start mac 终端使用 OS X终端使用配置socks5 代理 用shadowsocks加速git clone 在 ~/.bash_profile 中添加 # 设置代理 function setproxy() { # export {HTTP,HTTPS,FTP}_PROXY=\"http://127.0.0.1:3128\" 也可以设置http代理 export ALL_PROXY=socks5://127.0.0.1:1086 } # 取消代理 function unsetproxy() { # unset {HTTP,HTTPS,FTP}_PROXY unset ALL_PROXY } # 测试代理 function testproxy() { curl -s ip.cn } "},"gateway/autossh-nginx.html":{"url":"gateway/autossh-nginx.html","title":"使用 autossh 建立反向 SSH 隧道管理内网 Mac 主机","keywords":"","body":"使用 autossh 建立反向 SSH 隧道管理内网 Mac 主机 内网主机 Web 服务端口 8080 分配的域名 xxxxx.greedlab.com 外网主机 7770 端口对应内网主机 8080 端口 建立从内网主机到公网主机的 ssh 互信 内网主机安装 autossh brew install autossh 内网主机将本机的 8080 端口映射到外网主机 7070 端口 autossh -M 8001 -fCNR 7770:localhost:8080 bell@node.greedlab.com -M 8001 : 负责通过 8001 端口监视连接状态，连接有问题时就会自动重连 -C ：启动数据压缩传输 -q ：安静模式运行，忽略提示和错误 -T ：不占用shell -f ：后台运行 -n ：配合 -f 参数使用 -N ：不执行远程命令，专为端口转发度身打造 7770:localhost:8080 ：公网主机 7770 端口数据转发到内网主机 8080 端口 测试 autossh 内网主机 lsof -i tcp:8001 外网主机的 nginx 配置反向代理 server { listen 80; server_name xxxxx.greedlab.com; location / { proxy_pass http://localhost:7770; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 现在 xxxxx.greedlab.com 就可以访问内网主机 8080 端口的服务了。 "},"gateway/centos-srelay.html":{"url":"gateway/centos-srelay.html","title":"Centos 安装 srelay","keywords":"","body":"Centos 安装 srelay http://socks-relay.sourceforge.net/ 安装 拷贝文件 `` /usr/local/sbin/srelay /usr/local/etc/srelay.conf /usr/local/etc/srelay.passwd /var/lock/subsys/srelay 查看日志 tail -f /var/log/messages ``` "},"gateway/ssh-ss5.html":{"url":"gateway/ssh-ss5.html","title":"ssh方式实现ss5代理","keywords":"","body":"ssh方式实现ss5代理 该方法简单，且不需要远程服务器做任务配置，有ssh权限就行。很适合有ssh权限的虚拟主机。eg:bluehost 修改Host localhost对应IP改成0.0.0.0，这样局域网内其它IP可以连上本机架设的代理 #127.0.0.1 localhost 0.0.0.0 localhost 建立互信 拷贝本地的id_rsa.pub到远程服务器的authorized_keys 启动ss5代理 $ ssh -D 0.0.0.0:$AUTO_SSH_PORT -p22 -N $AUTO_SSH_USER@$AUTO_SSH_ADDRESS 查看代理是否生效 $ netstat -AaLlnW | grep $AUTO_SSH_PORT 或者 $ lsof -i :$AUTO_SSH_PORT 定时任务 上面方法架的代理服务,如果一段时间没有任务包传输ssh会自动断开，导致代理服务停止，所以需要建立定时任务，定时检测连接是否断开，如果断开就重新连接。 启动代理的脚本: Resource/autossh.sh. 使用前先设好AUTO_SSH_ADDRESS和AUTO_SSH_USER.并拷贝到~/bin目录下 添加定时任务 $ crontab -e #second hour day month week commond */10 * * * * /Users/[username]/bin/autossh.sh >> /Users/[username]/log/ss5.log 2>&1 停止代理 $ ps -ef | grep ssh $ kill -9 $PID_NUM $PID_NUM为对应ssh -d 的进程id 使用代理 Firefox Firefox > 设置 > 高级 > 网络 > 连接 > 设置 > 手动配置代理 > SOCKS 主机：localhost, 端口：$AUTO_SSH_PORT，勾选 SOCKS v5 > 确定 MAC 设置 > 网络 > 高级 > 代理 > SOCKS 代理 > SOCKS 代理服务器：localhost, 端口：$AUTO_SSH_PORT，不要设用户名密码 > 确定 "},"gateway/public-to-internal.html":{"url":"gateway/public-to-internal.html","title":"外网访问内网","keywords":"","body":"外网访问内网 外网访问内网 DDNS localtunnel 安装 使用 后台使用 ngrok autossh + Nginx DDNS 路由器动态上传 IP 到服务器，域名指向该 IP 电信禁止外网访问动态 IP，所以该方法无法实现 localtunnel GitHub 可行，访问比较慢 安装 npm install -g localtunnel 使用 lt --port 8080 后台使用 nohup lt -p 8080 >> ${HOME}/.lt.log g 2>&1 & ngrok https://ngrok.com/ autossh + Nginx "},"back-end/":{"url":"back-end/","title":"后端开发","keywords":"","body":"后端开发 "},"back-end/mysql-ubuntu.html":{"url":"back-end/mysql-ubuntu.html","title":"ubuntu 安装 mysql","keywords":"","body":"ubuntu 安装 mysql http://dev.mysql.com/downloads/mysql/ 下载APT Repo 或 deb 包 wget http://dev.mysql.com/get/mysql-apt-config_0.8.1-1_all.deb 安装所得 deb 包 dpkg -i mysql-apt-config_0.8.1-1_all.deb 安装 mysql apt-get update apt-get install mysql-server "},"back-end/redis-mac.html":{"url":"back-end/redis-mac.html","title":"Mac 安装 redis","keywords":"","body":"Mac 安装 redis 安装 $ brew install redis 日志： ==> Downloading https://homebrew.bintray.com/bottles/redis-3.2.8.sierra.bottle.tar.gz curl: (6) Could not resolve host: akamai.bintray.com Error: Failed to download resource \"redis\" Download failed: https://homebrew.bintray.com/bottles/redis-3.2.8.sierra.bottle.tar.gz Warning: Bottle installation failed: building from source. ==> Using the sandbox ==> Downloading http://download.redis.io/releases/redis-3.2.8.tar.gz ################################################################## 100.0% ==> make install PREFIX=/usr/local/Cellar/redis/3.2.8 CC=clang Error: The brew link step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink bin/redis-benchmark Target /usr/local/bin/redis-benchmark already exists. You may want to remove it: rm '/usr/local/bin/redis-benchmark' To force the link and overwrite all conflicting files: brew link --overwrite redis To list all files that would be deleted: brew link --overwrite --dry-run redis Possible conflicting files are: /usr/local/bin/redis-benchmark /usr/local/bin/redis-check-aof /usr/local/bin/redis-check-rdb /usr/local/bin/redis-cli /usr/local/bin/redis-sentinel -> /usr/local/bin/redis-server /usr/local/bin/redis-server ==> Caveats To have launchd start redis now and restart at login: brew services start redis Or, if you don not want/need a background service you can just run: redis-server /usr/local/etc/redis.conf ==> Summary 🍺 /usr/local/Cellar/redis/3.2.8: 11 files, 1.7M, built in 29 seconds 强制 link redis brew link --overwrite redis 启动 redis brew services start redis brew services restart redis brew services stop redis 自启动 cp $(brew --prefix redis)/homebrew.mxcl.redis.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist 配置 配置文件路径 /usr/local/etc/redis.conf 设置密码 #requirepass foobared "},"back-end/java-tec.html":{"url":"back-end/java-tec.html","title":"Java 后端技术栈","keywords":"","body":"Java 后端技术栈 开发框架 Spring 测试框架 JUnit Java Web 容器 tomcat jetty 网络 Netty: 异步网络通信库 介绍 本质上是一个 servlet 容器，即可以在其上运行 Java Web 的应用程序 消息队列 kafka RabbitMq RPC 框架 dubbo 介绍 RPC 是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。 核心知识点 注册中心，服务注册、服务发现、负载均衡、序列化、反序列化、编码、解码等核心概念 适用场景 在相对复杂的应用服务网络中，扮演服务治理，服务解耦，负责均衡，简化服务调用方式的作用 日志 Log4j SLF4J References Java后端技术栈梳理 "},"back-end/centos-redis.html":{"url":"back-end/centos-redis.html","title":"CentOS 安装 redis","keywords":"","body":"CentOS 安装 redis yum install redis 配置文件路径：/etc/redis.conf 开机自启动 #设置为开机自启动服务器 chkconfig redis on #打开服务 service redis start #查看运行状态 service redis status #关闭服务 service redis stop "},"back-end/operations.html":{"url":"back-end/operations.html","title":"运维","keywords":"","body":"运维 运维工程师(Operations)。负责维护并确保整个服务的高可用性，同时不断优化系统架构、提升部署效率、优化资源利用率提高整体的ROI. Linux基础 shell 运维的命令 netstat top 基础服务 LNMP DNS DHCP 运维平台工具 如果只为了报警，nagios吧，足够满足需求； 如果需要图表，zabbix吧，别用cacti了…… Nagios Puppet Zabbix Cacti SaltStack zabbix 1.硬件监控。 2.系统监控。 3.服务监控。 4.网络监控。 5.安全监控。 6.Web监控。 7.日志监控。 8.业务监控。 9.流量分析。 10.可视化。 11.自动化监控。 安全 iptables 监控平台工具 分布式 从业务的日常运维来看： 1、性能调优：监控各类服务、API正常与否，并主动开发辅助系统分析的系统，并对整个系统的未来进行规划。 2、自动化部署，自动化上线。。。。。。 优化 Nginx Nginx配置性能优化的方法 Nginx性能优化 Nginx优化篇——配置优化 nginx 优化25条 "},"back-end/java-service.html":{"url":"back-end/java-service.html","title":"Java 服务","keywords":"","body":"Java 服务 Jetty 是一个纯粹的基于 Java 的网页服务器和 Java Servlet 容器。 Gretty, Gradle 插件，它不仅支持 Jetty servlet 容器,还支持 Tomcat servlet 等多种容器.配置也相对简单。 IntelliJ 调试 Gretty 参考 https://github.com/akhikhl/gretty/issues/36#issuecomment-49309075 References Jetty 的工作原理以及与 Tomcat 的比较 Jetty Gretty documentation "},"back-end/redis.html":{"url":"back-end/redis.html","title":"redis","keywords":"","body":"redis 官网 官方文档 GitHhb node_redis Redis 命令参考 Redis 教程 docker redis 安装 http://redis.io/download 安装 $ wget http://download.redis.io/releases/redis-3.2.3.tar.gz $ tar xzf redis-3.2.3.tar.gz $ cd redis-3.2.3 $ make ubuntu/CentOS 下安装 $ wget http://download.redis.io/releases/redis-3.2.3.tar.gz $ tar xzf redis-3.2.3.tar.gz $ cd redis-3.2.3 $ sudo apt-get install make gcc tcl $ make MALLOC=libc 测试MM $ make test 安装 $ make install 配置 $ sudo mkdir /etc/redis $ sudo chmod 777 redis/ $ cp redis.conf /etc/redis/ redis.conf Redis configuration port 端口，默认 6379 bind 绑定redis服务器网卡IP，默认 127.0.0.1 启动 $ redis-server /etc/redis/redis.conf 开机自启动 #设置为开机自启动服务器 chkconfig redisd on #打开服务 service redisd start #查看运行状态 service redisd status #关闭服务 service redisd stop 设置密码 命令 redis-cli redis-cli, the Redis command line interface 连接远程服务器 redis-cli -h host -p port -a password set string SET KEY_NAME VALUE get string GET key 列出所有 KEY KEYS * 删除 KEy DEL KEY_NAME "},"back-end/mysql-useage.html":{"url":"back-end/mysql-useage.html","title":"mysql 使用","keywords":"","body":"mysql 使用 登录 $ mysql -uroot -p 列出所有数据库 show databases; 创建数据库 CREATE DATABASE abccs; 切换数据库 use databasename; 查看当前数据库 SELECT database(); 列出所有表 show tables; 查看表结构 desc tablename; 创建用户 CREATE USER 'username'@'host' IDENTIFIED BY 'password'; CREATE USER 'username'@'%' IDENTIFIED BY 'password'; 给用户授权 GRANT privileges ON databasename.tablename TO 'username'@'host' GRANT ALL ON *.* TO 'bell'@'%'; "},"back-end/nginx.html":{"url":"back-end/nginx.html","title":"nginx","keywords":"","body":"nginx 官网 下载 图片处理 ngx_http_image_filter_module Nginx dynamic image resizing with caching location location 官方文档 nginx配置location总结及rewrite规则写法 "},"back-end/gretty.html":{"url":"back-end/gretty.html","title":"Gretty","keywords":"","body":"Gretty Gradle 使用 gretty 插件运行 web 项目 Gretty Github Greet Github 安装 https://plugins.gradle.org/plugin/org.gretty 配置 Gretty configuration jetty Jetty Github "},"back-end/mongodb-usage.html":{"url":"back-end/mongodb-usage.html","title":"mongodb 使用","keywords":"","body":"mongodb 使用 Aggregation 利用管道串行操作 db.patches.aggregate([ {$match: {project_id: \"57bfebadd2dbc1cea6430f8b\"}}, {$group: {_id: \"$project_version\"}}, {$sort : {project_version : 1}} ]) 过滤 $elemMatch 筛选条件 $ 列表中取出第一个满足条件的 $slice $group 分组 db.books.aggregate( [ { $group : { _id : \"$author\", books: { $push: \"$$ROOT\" } } } ] ) update 更新操作 更新所有 只更新传入部分 { $set: { item: \"ABC123\", } } "},"back-end/mysql.html":{"url":"back-end/mysql.html","title":"mysql","keywords":"","body":"mysql 文档地址 ：http://dev.mysql.com/doc/refman/5.7/en/ mysql mac 安装 mysql rpm 包方式安装 使用 存储引擎 服务器连接排序规则 数据库数据类型 Char Varchar text 外键 FLOAT DOUBLE DECIMAL NULL VS '' 连接查询 on VS where 笛卡尔积(交叉连接) 内连接 INNER JOIN 外连接 左外连接 LEFT [OUTER] JOIN 右外连接 RIGHT [OUTER] JOIN 完全外连接 FULL [OUTER] JOIN 自连接 DATETIME VS TIMESTAMP sql子查询 用于替代表达式的子查询 使用子查询原则 and or not 性能优化 Questions Tag latest not found in repository mysql mac 安装 mysql rpm 包方式安装 Installing MySQL on Linux Using the MySQL Yum Repository Download MySQL Yum Repository下载rpm包 mysql57-community-release-el6-9.noarch.rpm 安装 rpm -Uvh mysql57-community-release-el6-9.noarch.rpm 查看可以装的列表 yum repolist all | grep mysql yum repolist enabled | grep mysql 安装 yum install mysql-community-server 使用 启动 mysql sudo service mysqld start 停止 mysql sudo service mysqld stop 第一次启动的时候会生成 root 用户和默认密码 grep 'temporary password' /var/log/mysqld.log 查看默认 root 密码。 登录 root 用户 mysql -uroot -p 设置新 root 密码 ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!'; 允许mysql远程访问 修改 bind-address /etc/mysql/mysql.conf.d/mysqld.cnf 的 bind-address 改成系统IP 修改数据库 mysql -u root –p mysql>use mysql; mysql>update user set host = '%' where user = 'root'; mysql>select host, user from user; 存储引擎 MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。MyISAM在所有MySQL配置里被支持，它是默认的存储引擎，除非你配置MySQL默认使用另外一个引擎。 InnoDB和BDB存储引擎提供事务安全表。BDB被包含在为支持它的操作系统发布的MySQL-Max二进制分发版里。InnoDB也默认被包括在所 有MySQL 5.1二进制分发版里，你可以按照喜好通过配置MySQL来允许或禁止任一引擎。 MySQL存储引擎InnoDB与Myisam的六大区别 服务器连接排序规则 Connection Character Sets and Collations utf8_unicode_ci和utf8_general_ci对中、英文来说没有实质的差别。 utf8_general_ci 校对速度快，但准确度稍差。 utf8_unicode_ci 准确度高，但校对速度稍慢。 如果你的应用有德语、法语或者俄语，请一定使用utf8_unicode_ci。一般用utf8_general_ci就够了，到现在也没发现问题。。。 采用 utf8 编码的 MySQL 无法保存占位是4个字节的 Emoji 表情,需要用 utf8mb4 为安全起见，推荐用 utf8mb4_unicode_ci 数据库数据类型 Data Types Char Varchar text 参考 MySQL之char、varchar和text的设计 char（n）和varchar（n）中括号中n代表字符的个数，并不代表字节个数，所以当使用了中文的时候(UTF8)意味着可以插入m个中文，但是实际会占用m*3个字节。 同时char和varchar最大的区别就在于char不管实际value都会占用n个字符的空间，而varchar只会占用实际字符应该占用的空间+1，并且实际空间+1 超过char和varchar的n设置后，字符串会被截断。 char的上限为255字节，varchar的上限65535字节，text的上限为65535。 char在存储的时候会截断尾部的空格，varchar和text不会。 varchar会使用1-3个字节来存储长度，text不会。 总体来说： char，存定长，速度快，存在空间浪费的可能，会处理尾部空格，上限255。 varchar，存变长，速度慢，不存在空间浪费，不处理尾部空格，上限65535，但是有存储长度实际65532最大可用。 text，存变长大数据，速度慢，不存在空间浪费，不处理尾部空格，上限65535，会用额外空间存放数据长度，顾可以全部使用65535。 外键 思考 大家设计数据库时使用外键吗？ 主键：是唯一标识一条记录，不能有重复的，不允许为空，用来保证数据完整性 外键：是另一表的主键, 外键可以有重复的, 可以是空值，用来和其他表建立联系用的。所以说，如果谈到了外键，一定是至少涉及到两张表。 ON DELETE RESTRICT(限制)：如果你想删除的那个主表，它的下面有对应从表的记录，此主表将无法删除。 CASCADE（级联）：如果主表的记录删掉，则从表中相关联的记录都将被删掉。 SET NULL：将外键设置为空。 NO ACTION：什么都不做。 FLOAT DOUBLE DECIMAL float、double(浮点数)区别还有和decimal(定点数)的比较 MySQL浮点型和定点型可以用类型名称后加（M，D）来表示，M表示该值的总共长度，D表示小数点后面的长度，M和D又称为精度和标度，FLOAT和DOUBLE在不指定精度时，默认会按照实际的精度来显示，而DECIMAL在不指定精度时，默认整数为10，小数为0。 float:浮点型，含字节数为4，32bit，数值范围为-3.4E38~3.4E38（7个有效位）. 格式是：1位符号位 8位表示指数 23位表示尾数 double:双精度实型，含字节数为8，64bit数值范围-1.7E308~1.7E308（15个有效位）. 格式是：1位符号位 11位表示指数 52位表示尾数 decimal:数字型，128bit，不存在精度损失，常用于涉及货币或其他精度敏感的数据。（28个有效位）M:1～65, D:0～30 double 和 float 的区别是double精度高，有效数字16位，float精度7位。但double消耗内存是float 的两倍，double的运算速度比float慢得多 NULL VS '' 空值不一定为空 TimesTamp 当前时间 auto_increment属性的列 会插入一个正整数序列 空值不一定等于空字符 连接查询 详解SQL Server连接（内连接、外连接、交叉连接） W3school 在没有 ON 的情况下 交叉连接 与 内连接是一样的，有 ON 的时候就是 内连接，无 ON 就是 交叉连接。 table1 CROSS JOIN table2 = table1 JOIN table2 = table1, table2 = table1 INNER JOIN table2 on VS where on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回临时表的记录。 where条件是在临时表生成好后，再对临时表进行过滤的条件。 笛卡尔积(交叉连接) 加条件只能用where,不能用on 不带WHERE条件子句，它将会返回被连接的两个表的笛卡尔积，返回结果的行数等于两个表行数的乘积 有where子句，往往会先生成两个表行数乘积的数据表，然后才根据where条件从中选择。 SELECT * FROM table1 CROSS JOIN table2 SELECT * FROM table1 JOIN table2 SELECT * FROM table1,table2 内连接 INNER JOIN 只列出匹配的记录。 使用比较运算符（包括=、>、、>=、和! select * from TableA a inner join TableB b on a.b_id = b.id 外连接 左外连接 LEFT [OUTER] JOIN 左表列出全部，右表只列出匹配的记录。 select * from TableA a left join TableB b on a.id = b.id 右外连接 RIGHT [OUTER] JOIN 右表列出全部，左表只列出匹配的记录。 select * from TableA a right join TableB b on a.id = b.id 完全外连接 FULL [OUTER] JOIN 完全外连接包含full join左右两表中所有的行，如果右表中某行在左表中没有匹配，则结果中对应行右表的部分全部为空(NULL)，如果左表中某行在右表中没有匹配，则结果中对应行左表的部分全部为空(NULL)。 select * from TableA a full join TableB b on a.id = b.id 自连接 参与连接的表都是同一张表。(通过给表取别名虚拟出两张表) DATETIME VS TIMESTAMP DATETIME 范围为1000-01-01 00:00:00 ~ 9999-12-31 23:59:59， TIMESTAMP 范围为1970-01-01 08:00:01到2038-01-19 11:14:07。 TIMESTAMP类型在默认情况下，insert、update 数据时，TIMESTAMP列会自动以当前时间（CURRENT_TIMESTAMP）填充/更新。 TIMESTAMP比较受时区timezone的影响以及MYSQL版本和服务器的SQL MODE的影响 sql子查询 嵌套SELECT语句 SQL 子查询 mysql查询语句select-子查询 用于替代表达式的子查询 参考 用于替代表达式的子查询.aspx) 在 Transact-SQL 中，除了在 ORDER BY 列表中以外，在 SELECT、UPDATE、INSERT 和 DELETE 语句中任何能够使用表达式的地方都可以用子查询替代。 以下示例说明如何使用此增强功能。此查询找出所有山地车产品的价格、平均价格以及两者之间的差价。 USE AdventureWorks2008R2; GO SELECT Name, ListPrice, (SELECT AVG(ListPrice) FROM Production.Product) AS Average, ListPrice - (SELECT AVG(ListPrice) FROM Production.Product) AS Difference FROM Production.Product WHERE ProductSubcategoryID = 1; 使用子查询原则 一个子查询必须放在圆括号中。 将子查询放在比较条件的右边以增加可读性。 子查询不包含 ORDER BY 子句。对一个 SELECT 语句只能用一个 ORDER BY 子句，并且如果指定了它就必须放在主 SELECT 语句的最后。 在子查询中可以使用两种比较条件：单行运算符(>, =, >=, , and or not sql语句中not and or的执行优先级从高到低依次为:not,and,or select * from table where a=1 and b=2 or c=3 and d=4; == select * from table where (a=1 and b=2) or (c=3 and d=4); 参考 13.3.1 Operator Precedence SQL OR AND 优先级问题 性能优化 尽量用inner join.避免 LEFT JOIN 和 NULL. 尽量避免子查询，而用join 参考 Mysql Join语法解析与性能分析 五种提高 SQL 性能的方法 从一个MySQL left join优化的例子加深对查询计划的理解 SQL Joins Vs SQL Subqueries (Performance)? Questions Tag latest not found in repository mysql "},"back-end/jwt.html":{"url":"back-end/jwt.html","title":"json web token","keywords":"","body":"json web token json-web-token node-jsonwebtoken JSON Web Token - 在Web应用间安全地传递信息 JWT的组成 一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。 载荷（Payload） iss: 该JWT的签发者 sub: 该JWT所面向的用户 aud: 接收该JWT的一方 exp(expires): 什么时候过期，这里是一个Unix时间戳 nbf(Not Before): 开始生效时间，这里是一个Unix时间戳 iat(issued at): 在什么时候签发的 { \"iss\": \"John Wu JWT\", \"iat\": 1441593502, \"exp\": 1441594722, \"aud\": \"www.example.com\", \"sub\": \"jrocket@example.com\", \"from_user\": \"B\", \"target_user\": \"A\" } 头部（Header） alg 签名算法 { \"typ\": \"JWT\", \"alg\": \"HS256\" } 签名（签名） 通过密钥加密载荷和头部生成的字符串 logout 一般用redis来缓存这些已经登出但没有失效的token "},"back-end/RESTful-API.html":{"url":"back-end/RESTful-API.html","title":"RESTful API","keywords":"","body":"RESTful API RESTful API 设计指南 理解RESTful架构 REST API 安全设计指南 GitHub API 请求唯一性 请求添加下面两个参数 参数 说明 备注 timestamp 时间戳 精确到毫秒 uuid 设备唯一 ID web:如何用JavaScript生成一个GUID/UUID生成 UUID 并存储到 cookies 服务器缓存所有请求。如果有 timestamp 和 uuid 都相同的请求，则返回失败。 HTTP 状态码 200 ok - 成功返回状态，对应，GET,PUT,PATCH,DELETE. 201 created - 成功创建。 304 not modified - HTTP缓存有效。 400 bad request - 请求格式错误。 401 unauthorized - 未授权。 403 forbidden - 鉴权成功，但是该用户没有权限。 404 not found - 请求的资源不存在 405 method not allowed - 该http方法不被允许。 410 gone - 这个url对应的资源现在不可用。 415 unsupported media type - 请求类型错误。 422 unprocessable entity - 校验错误时用。 429 too many request - 请求过多。 URI 设计 参考 https://api.github.com/ 使用－而不是空格或下划线来连接单词 资源数目一般来说都是多个的，所以，对于某种资源的命名，一般使用复数，例如/conversations。 除非目的是查询（或有查询的含意），否则不要把参数放在URL的查询部分（？之后） 一些跟上下文有关的资源，可以在URI中添加me或my这样的单词来加以区别。例如对于用户的信息资源，普通用户只能看自己的信息，而管理员可以看所有用户的信息，那么管理员可以使用/users/{user_id}/info来获取用户信息，而普通用户则使用/users/my/info来获取。 "},"back-end/interview.html":{"url":"back-end/interview.html","title":"面试","keywords":"","body":"面试 面试 计算机理论知识 网络 TCP/IP、Http、Socket的区别 http状态码有那些？分别代表是什么意思？ 数据库 SQL 实现按时间排序取最后 10 个，且最后 10 个是顺序的。 操作系统 数据结构 运维 nginx缓存机制 php的配置优化 日志分析 防御监控 计算机理论知识 网络 TCP/IP、Http、Socket的区别 ISO 模型由下往上分为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 TCP/IP模型把所有的TCP/IP系列协议归类到四个抽象层中：应用层、传输层、网络层、数据链路层 应用层：HTTP、FTP、TELNET、SSH、DNS 表示层： 会话层：SSH、BSD sockets 传输层：TCP、UDP 网络层：IP 数据链路层：以太网 物理层：线路、无线电、光纤 各协议区别 IP 协议对应于网络层 TCP 协议对应于传输层，连接三次握手，断开四次握手 TPC/IP 协议栈：定义了主机如何连入因特网及数据如何再它们之间传输的标准，从字面意思来看TCP/IP是TCP和IP协议的合称，但实际上TCP/IP协议是指因特网整个TCP/IP协议族。不同于ISO模型的七个分层，TCP/IP协议参考模型把所有的TCP/IP系列协议归类到四个抽象层中 HTTP 协议对应于应用层，主要解决如何包装数据。 Socket 是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。支持 TCP 和 UDP，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。 HTTP 协议的实现 是基于socket（这里的上下文指的是http socket,网络协议上的进程间通信方式）实现 Websocket 是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。WebSocket一种在单个 TCP 连接上进行全双工通讯的协议。 http状态码有那些？分别代表是什么意思？ 简单版 [ 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息 200 OK 正常返回信息 201 Created 请求成功并且服务器创建了新的资源 202 Accepted 服务器已接受请求，但尚未处理 301 Moved Permanently 请求的网页已永久移动到新位置。 302 Found 临时性重定向。 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。 304 Not Modified 自从上次请求后，请求的网页未修改过。 400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。 401 Unauthorized 请求未授权。 403 Forbidden 禁止访问。 404 Not Found 找不到如何与 URI 相匹配的资源。 500 Internal Server Error 最常见的服务器端错误。 503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。 ] 完整版 1**(信息类)：表示接收到请求并且继续处理 100——客户必须继续发出请求 101——客户要求服务器根据请求转换HTTP协议版本 2**(响应成功)：表示动作被成功接收、理解和接受 200——表明该请求被成功地完成，所请求的资源发送回客户端 201——提示知道新文件的URL 202——接受和处理、但处理未完成 203——返回信息不确定或不完整 204——请求收到，但返回信息为空 205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件 206——服务器已经完成了部分用户的GET请求 3**(重定向类)：为了完成指定的动作，必须接受进一步处理 300——请求的资源可在多处得到 301——本网页被永久性转移到另一个URL 302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。 303——建议客户访问其他URL或访问方式 304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用 305——请求的资源必须从服务器指定的地址得到 306——前一版本HTTP中使用的代码，现行版本中不再使用 307——申明请求的资源临时性删除 4**(客户端错误类)：请求包含错误语法或不能正确执行 400——客户端请求有语法错误，不能被服务器所理解 401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 HTTP 401.1 - 未授权：登录失败 　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败 　　HTTP 401.3 - ACL 禁止访问资源 　　HTTP 401.4 - 未授权：授权被筛选器拒绝 HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败 402——保留有效ChargeTo头响应 403——禁止访问，服务器收到请求，但是拒绝提供服务 HTTP 403.1 禁止访问：禁止可执行访问 　　HTTP 403.2 - 禁止访问：禁止读访问 　　HTTP 403.3 - 禁止访问：禁止写访问 　　HTTP 403.4 - 禁止访问：要求 SSL 　　HTTP 403.5 - 禁止访问：要求 SSL 128 　　HTTP 403.6 - 禁止访问：IP 地址被拒绝 　　HTTP 403.7 - 禁止访问：要求客户证书 　　HTTP 403.8 - 禁止访问：禁止站点访问 　　HTTP 403.9 - 禁止访问：连接的用户过多 　　HTTP 403.10 - 禁止访问：配置无效 　　HTTP 403.11 - 禁止访问：密码更改 　　HTTP 403.12 - 禁止访问：映射器拒绝访问 　　HTTP 403.13 - 禁止访问：客户证书已被吊销 　　HTTP 403.15 - 禁止访问：客户访问许可过多 　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效 HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效 404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL 405——用户在Request-Line字段定义的方法不允许 406——根据用户发送的Accept拖，请求资源不可访问 407——类似401，用户必须首先在代理服务器上得到授权 408——客户端没有在用户指定的饿时间内完成请求 409——对当前资源状态，请求不能完成 410——服务器上不再有此资源且无进一步的参考地址 411——服务器拒绝用户定义的Content-Length属性请求 412——一个或多个请求头字段在当前请求中错误 413——请求的资源大于服务器允许的大小 414——请求的资源URL长于服务器允许的长度 415——请求资源不支持请求项目格式 416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段 417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。 5**(服务端错误类)：服务器不能正确执行一个正确的请求 HTTP 500 - 服务器遇到错误，无法完成请求 　　HTTP 500.100 - 内部服务器错误 - ASP 错误 　　HTTP 500-11 服务器关闭 　　HTTP 500-12 应用程序重新启动 　　HTTP 500-13 - 服务器太忙 　　HTTP 500-14 - 应用程序无效 　　HTTP 500-15 - 不允许请求 global.asa 　　Error 501 - 未实现 HTTP 502 - 网关错误 HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常 数据库 SQL 实现按时间排序取最后 10 个，且最后 10 个是顺序的。 操作系统 进程、线程、内存 数据结构 运维 nginx缓存机制 php的配置优化 日志分析 防御监控 "},"back-end/nginx-centos.html":{"url":"back-end/nginx-centos.html","title":"Centos 上安装和使用 nginx","keywords":"","body":"Centos 上安装和使用 nginx 安装 参考 http://nginx.org/en/linux_packages.html 添加 key 下载 key sudo rpm --import nginx_signing.key 更新源 To set up the yum repository for RHEL/CentOS, create the file named /etc/yum.repos.d/nginx.repo with the following contents: [nginx] name=nginx repo baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/ gpgcheck=0 enabled=1 Replace “OS” with “rhel” or “centos”, depending on the distribution used, and “OSRELEASE” with “5”, “6”, or “7”, for 5.x, 6.x, or 7.x versions, respectively. 安装 nginx # yum install nginx 使用 http://nginx.org/en/docs/beginners_guide.html https://www.nginx.com/resources/admin-guide/ 查看帮助 nginx -h 启动 nginx /etc/init.d/nginx start 开机自启动 nginx chkconfig nginx on nginx -s signal stop — fast shutdown quit — graceful shutdown reload — reloading the configuration file reopen — reopening the log files 配置 默认配置 /etc/nginx/conf.d/default.conf 手动配置 /etc/nginx/nginx.conf 添加反向代理 /etc/nginx/conf.d 下添加新的 .conf 文件，添加如下内容 server { listen 81; server_name *.efg.com; location / { proxy_pass http://localhost:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 测试配置是否正确 nginx -t 重新加载配置 nginx -s reload Questions Q 1 (13: Permission denied) while connecting to upstream setsebool httpd_can_network_connect on http://stackoverflow.com/a/31403848/5541472 "},"back-end/mysql-mac.html":{"url":"back-end/mysql-mac.html","title":"Mac 安装 Mysql","keywords":"","body":"Mac 安装 Mysql Download MySQL Community Server 安装 $ brew install mysql Updating Homebrew... ==> Downloading https://homebrew.bintray.com/bottles/mysql-5.7.17.sierra.bottle.1.tar.gz ######################################################################## 100.0% ==> Pouring mysql-5.7.17.sierra.bottle.1.tar.gz ==> Using the sandbox ==> Caveats We've installed your MySQL database without a root password. To secure it run: mysql_secure_installation To connect run: mysql -uroot To have launchd start mysql now and restart at login: brew services start mysql Or, if you don't want/need a background service you can just run: mysql.server start ==> Summary 🍺 /usr/local/Cellar/mysql/5.7.17: 321 files, 234.4M 启动 mysql brew services start mysql brew services restart mysql 自启动 mkdir -p ~/Library/LaunchAgents cp /usr/local/Cellar/mysql/5.7.17/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist 设置 root 密码 mysql_secure_installation 修改 root 密码 ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!'; 配置 mysql 查看配置文件路径 $ mysql --help | grep my.cnf Default options are read from the following files in the given order: /etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf The following groups are read: mysql client 参考配置文件路径 ls $(brew --prefix mysql)/support-files/my-* 拷贝配置文件到有效路径 cp $(brew --prefix mysql)/support-files/my-default.cnf /usr/local/etc/my.cnf Questions 1 没有 mysql 数据库 清除mysql 数据，重新安装 brew uninstall mysql rm -rf /usr/local/Cellar/mysql rm -rf /usr/local/var/mysql sudo rm -rf /tmp/mysql.sock* brew install mysql "},"back-end/postgresql.html":{"url":"back-end/postgresql.html","title":"postgresql","keywords":"","body":"postgresql 官网 使用 登录 $ psql --username= 列出所有数据库名 \\l 切换数据库 \\c 查看表 \\d 查看表结构 \\d sequence create table employ(id serial,name varchar(64),department varchar(128)) ; 或者 CREATE TABLE employ ( id serial, name varchar(64), department varchar(64) ) ; ----------------------------------------------------------------- CREATE SEQUENCE employ_id_seq ; CREATE TABLE employ ( id integer NOT NULL DEFAULT nextval('employ_id_seq'), name varchar(64), department varchar(64) ); ALTER SEQUENCE employ_id_seq OWNED by employ.id; Questions could not read block 0 in file \"base/16385/19378\": Input/output error # INSERT INTO users (email, name, username) VALUES ('test@test.com', 'test', 'test'); ERROR: could not read block 0 in file \"base/16385/19378\": Input/output error STATEMENT: INSERT INTO \"users\" (\"email\", \"name\", \"username\", \"projects_limit\", \"state\", \"created_by_id\", \"encrypted_password\", \"reset_password_token\", \"reset_password_sent_at\", \"confirmed_at\", \"notification_email\", \"authentication_token\", \"created_at\", \"updated_at\", \"admin\", \"external\", \"can_create_group\", \"can_create_team\", \"hide_no_ssh_key\", \"hide_no_password\", \"theme_id\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) RETURNING \"id\" postgresql 文件问题 解决方法： gitlabhq_production=> select oid, relname from pg_class where oid=16385 or oid=19378; oid | relname -------+-------------- 19378 | users_id_seq (1 row) 是 users_id_seq 表的问题，需要从备份恢复或者 设置 zero_damaged_pages 清掉坏数据 如果是root用户 show zero_damaged_pages; set zero_damaged_pages = on; show zero_damaged_pages; 如果不是root用户，切换到root用户给 gitlab 用户设置zero_damaged_pages su - postgres psql alter user gitlab set zero_damaged_pages = on; 还是不行，使用新的 SEQUENCE CREATE SEQUENCE users_id_1_seq; ALTER TABLE users ALTER COLUMN id SET DEFAULT nextval('users_id_1_seq'); ALTER SEQUENCE users_id_1_seq OWNED by public.users.id; 更新 sequence 开始位置 select id from users; SELECT setval('users_id_1_seq', 19) FROM users; select pg_get_serial_sequence('users','id'); reference ERROR: could not read block 4707 of relation 1663/16384/16564: Success Corruption "},"back-end/grpc.html":{"url":"back-end/grpc.html","title":"gRPC java","keywords":"","body":"gRPC java grpc-java protobuf-gradle-plugin gRPC 官方文档中文版 接入流程 build.gradle def grpcVersion = '1.21.0' // CURRENT_GRPC_VERSION def protobufVersion = '3.7.1' def protocVersion = protobufVersion sourceSets { main { proto { // In addition to the default 'src/main/proto' // .proto 文件路径，默认包含 'src/main/proto' // srcDir 'src/main/proto' // In addition to the default '**/*.proto' (use with caution). // Using an extension other than 'proto' is NOT recommended, // because when proto files are published along with class files, we can // only tell the type of a file from its extension. // 文件后缀，默认包含 '**/*.proto' // include '**/*.protodevel' } java { // 和 protobuf.generatedFilesBaseDir 对应，把 protobuf 生成的 java 文件添加到工程 srcDir 'build/generated/source/proto/main/grpc' srcDir 'build/generated/source/proto/main/java' } } } protobuf { protoc { artifact = \"com.google.protobuf:protoc:${protocVersion}\" } plugins { grpc { artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\" } } // 生成的 java 文件 要目录, 默认是 'build/generated' // generatedFilesBaseDir = \"build/generated\" generateProtoTasks { all()*.plugins { grpc {} } } } buildscript { dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8' } } dependencies { // protobuf compile \"com.google.protobuf:protobuf-java:${protocVersion}\" // grpc compile group: 'io.grpc', name: 'grpc-netty-shaded', version: grpcVersion compile group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion compile group: 'io.grpc', name: 'grpc-stub', version: grpcVersion } protocol 文件 option java_multiple_files = true; //生成java代码的package option java_package = \"com.grpc.mistra.generate\"; //创建的javaBean的文件名 option java_outer_classname = \"MistraProto\"; // 可以生成rpc接口 option java_generic_services = true; protocol 文件转代码 ./gradlew generateProto 生成的 java 文件会存储在 build.gradle 中 protobuf.generatedFilesDir 文件夹下 "},"back-end/tomcat-mac.html":{"url":"back-end/tomcat-mac.html","title":"Tomca For Mac","keywords":"","body":"Tomca For Mac 安装 brew install tomcat@8 安装地址： /usr/local/opt/tomcat\\@8/ -> /usr/local/Cellar/tomcat\\@8/8.5.41/ 启动服务 brew tap homebrew/services brew services start tomcat Debug https://www.mkyong.com/intellij/intellij-idea-run-debug-web-application-on-tomcat/ "},"back-end/tomcat.html":{"url":"back-end/tomcat.html","title":"Tomcat","keywords":"","body":"Tomcat 请求处理方式 BIO: 每个请求都要创建一个线程来处理 NIO: 是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，它拥有比传统I/O操作(bio)更好的并发运行性能。Tomcat8 以上默认 APR: 从操作系统级别解决异步IO问题，大幅度的提高服务器的处理和响应性能， 也是Tomcat运行高并发应用的首选模式。 "},"back-end/url-uri.html":{"url":"back-end/url-uri.html","title":"URL 与 URI 的区别","keywords":"","body":"URL 与 URI 的区别 URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。而URL是uniform resource locator，统一资源定位器，它是一种具体的URI。 URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的，scheme必须被指定 URI抽象结构： [scheme:]scheme-specific-part[#fragment] [scheme:][//authority][path][?query][#fragment] authority为[user-info@]host[:port] "},"back-end/redis-questions.html":{"url":"back-end/redis-questions.html","title":"redis-questions","keywords":"","body":"redis-questions hash expire https://github.com/antirez/redis/issues/167 redis 127.0.0.1:6379> hset expire:me name tom (integer) 0 redis 127.0.0.1:6379> hget expire:me name \"tom\" redis 127.0.0.1:6379> expire expire:me 10 (integer) 1 redis 127.0.0.1:6379> ttl expire:me (integer) 8 ... ... ... redis 127.0.0.1:6379> ttl expire:me (integer) -1 redis 127.0.0.1:6379> hget expire:me name (nil) "},"back-end/nginx-ubuntu.html":{"url":"back-end/nginx-ubuntu.html","title":"ubuntu 上安装和使用 nginx","keywords":"","body":"ubuntu 上安装和使用 nginx 安装 参考 http://nginx.org/en/linux_packages.html 添加 key 下载 key sudo apt-key add nginx_signing.key 更新源 把 deb http://nginx.org/packages/ubuntu/ codename nginx deb-src http://nginx.org/packages/ubuntu/ codename nginx codename 替换为 codename 中对应的 codename Ubuntu 14.04 替换后为 deb http://nginx.org/packages/ubuntu/ trusty nginx deb-src http://nginx.org/packages/ubuntu/ trusty nginx 再追加到 /etc/apt/sources.list 运行 apt-get update 安装 nginx # apt-get install nginx 使用 http://nginx.org/en/docs/beginners_guide.html https://www.nginx.com/resources/admin-guide/ 查看帮助 nginx -h 启动 nginx /etc/init.d/nginx start nginx -s signal stop — fast shutdown quit — graceful shutdown reload — reloading the configuration file reopen — reopening the log files 配置 默认配置 /etc/nginx/conf.d/default.conf 手动配置 /etc/nginx/nginx.conf 添加反向代理 /etc/nginx/conf.d 下添加新的 .conf 文件，添加如下内容 server { listen 81; server_name yourdomain.com; location / { proxy_pass http://localhost:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 测试配置是否正确 nginx -t 重新加载配置 nginx -s reload "},"back-end/phpMyAdmin.html":{"url":"back-end/phpMyAdmin.html","title":"phpMyAdmin","keywords":"","body":"phpMyAdmin 官网 安装 ubuntu 安装 sudo apt-get update sudo apt-get install phpmyadmin 选择 apache2 源码安装 wget https://files.phpmyadmin.net/phpMyAdmin/4.6.5.2/phpMyAdmin-4.6.5.2-all-languages.zip unzip phpMyAdmin-4.6.5.2-all-languages.zip cd phpMyAdmin-4.6.5.2-all-languages Composer 安装 Installing using Composer composer create-project phpmyadmin/phpmyadmin --repository-url=https://www.phpmyadmin.net/packages.json --no-dev docker 方式安装 phpmyadmin/phpmyadmin 下载镜像 docker pull phpmyadmin/phpmyadmin 或者 docker pull daocloud.io/daocloud/phpmyadmin 启动 docker run --name myadmin -d -e PMA_HOST=localhost -p 8082:80 phpmyadmin/phpmyadmin 进入 docker exec -it myadmin sh 配置 参考 Manually creating the file Config 翻译 cd phpmyadmin cp config.sample.inc.php config.inc.php $cfg['Servers'][$i] 配置 Mysql 地址 $cfg['Servers'][$i]['controlhost'] 配置用于存储高级功能表的数据库地址 "},"back-end/nginx-mac.html":{"url":"back-end/nginx-mac.html","title":"mac 安装 nginx","keywords":"","body":"mac 安装 nginx 先禁用 apache sudo apachectl stop $ brew install nginx Docroot is: /usr/local/var/www The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo. nginx will load all files in /usr/local/etc/nginx/servers/. To have launchd start nginx now and restart at login: brew services start nginx Or, if you don't want/need a background service you can just run: nginx /usr/local/etc/nginx/nginx.conf 8080 改 80 运行 nginx $ sudo nginx #打开 nginx $ sudo nginx -s reload|reopen|stop|quit #重新加载配置|重启|停止|退出 nginx $ sudo nginx -t #测试配置是否有语法错误 # 因为用到了 80 端口，所以必须用 sudo sudo brew services restart nginx sudo brew services stop nginx 加入 launchctl 启动控制 mkdir -p ~/Library/LaunchDaemons cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist /Library/LaunchDaemons/ launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist nginx 配置 fastcgi location ~ \\.php$ { root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } sudo nginx -V 查看 nginx 配置 "},"back-end/mongodb.html":{"url":"back-end/mongodb.html","title":"mongodb","keywords":"","body":"mongodb 官网 官方文档 官方下载 安装 官方工具 MongoDB Enterprise Advanced MongoDB 企业版 MongoDB Professional MongoDB 专业版 MongoDB Atlas 在线MongoDB，收费 MongoDB Ops Manager 可本地安装的 MongoDB 监控工具 MongoDB Cloud Manager MongoDB 云端监控工具，收费 MongoDB Compass 图形界面管理探索和操纵你的MongoDB。 MongoDB Connector for BI 在线分析和数据挖掘 MongoDB Connector for Apache Spark Spark 连接器。 mac 下安装社区版 $ brew install mongodb --with-openssl 自启动 cp $(brew --prefix mongodb)/homebrew.mxcl.redis.plist ~/Library/LaunchAgents/ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist ubuntu 安装企业版 Install MongoDB Enterprise on Ubuntu CentOS 安装企业版 Install MongoDB Enterprise on Red Hat Enterprise or CentOS¶ 配置 https://docs.mongodb.com/manual/administration/configuration-and-maintenance/ 默认配置文件路径 /etc/mongod.conf 用户 https://docs.mongodb.com/manual/tutorial/create-users/ 创建用户 mongo use admin db.createUser( { user: \"myUserAdmin\", pwd: \"abc123\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] } ) 登录用户 mongo use admin db.auth(\"myUserAdmin\", \"abc123\" ) mongodb manage-mongodb-processes 启动 ./bin/mongod --dbpath ~/mongodb/db --fork --logpath ~/mongodb/log/mongodb.log --logappend 查看状态 $ ./bin/mongostat 关闭 $ ./bin/mongo > use admin > db.shutdownServer() 或 $ ./bin/mongod --shutdown available only on Linux systems mongo shell The mongo Shell 进入命令行模式 $ cd $ ./bin/mongo 创建数据库 use 查看所有的 collection show collections 查看 collection 所有数据 db.foo.find() foo 为对应 collection 名字 Questions 1 启动警告 2016-12-13T13:58:04.601+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. 2016-12-13T13:58:04.601+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never' 2016-12-13T13:58:04.601+0800 I CONTROL [initandlisten] 2016-12-13T13:58:04.601+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'. 2016-12-13T13:58:04.601+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never' 解决方法： /etc/rc.local 中写入 if test -f /sys/kernel/mm/transparent_hugepage/enabled; then echo never > /sys/kernel/mm/transparent_hugepage/enabled fi if test -f /sys/kernel/mm/transparent_hugepage/defrag; then echo never > /sys/kernel/mm/transparent_hugepage/defrag fi 2 最大文件数太小 ** WARNING: soft rlimits too low. rlimits set to 1024 processes, 100000 files. Number of processes should be at least 50000 : 0.5 times number of files. 解决方法： 参考 Recommended ulimit Settings ulimit -n 64000 ulimit -u 64000 3 ** WARNING: Access control is not enabled for the database. ** Read and write access to data and configuration is unrestricted. 解决方法： 参考 security.authorization /etc/mongod.conf 配置： security: authorization: enabled "}}